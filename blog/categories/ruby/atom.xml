<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2015-02-09T18:33:23-08:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SpringOne2GX 2014 Keynote]]></title>
    <link href="http://thediscoblog.com/blog/2015/01/21/springone2gx-2014-keynote/"/>
    <updated>2015-01-21T17:53:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2015/01/21/springone2gx-2014-keynote</id>
    <content type="html"><![CDATA[<p>Last fall, <a href="https://2014.event.springone2gx.com/presenters/andrew_glover.html">I had the distinct pleasure</a> to keynote at <a href="http://springone2gx.com/">Pivotal's 2014 SpringOne2GX conference</a>. My message was one of speed; that is, <em>speed is the killer app</em>. Indeed, <a href="http://projects.spring.io/spring-boot/">Spring Boot</a> has been a breath of fresh air and a boon to development velocity. Boot is the bedrock for developmental speed on the JVM.</p>

<!-- more -->


<p>In fact, <a href="https://twitter.com/rob_winch/status/364871658483351552">a simple Boot app can fit into a tweet</a>, as <a href="https://twitter.com/rob_winch">Rob Winch</a> ingeniously demonstrated in August of 2013.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/xU267-YHN5c?rel=0&amp;start=1935&amp;end=2605.8 "></iframe></div></p>

<p></p>


<p>As I said at the conference and still maintain:</p>

<p><blockquote><p>Spring Boot makes it super easy and quick to make Spring-powered, production ready services without a lot of code! A Hello World app in a tweet is a radical departure from what it took 10 years ago! Out-of-the-box non-functional features like security, metrics, health-checks, embedded servers, and externalized configuration made Boot an easy choice...</p></blockquote></p>

<p>Check out <a href="http://projects.spring.io/spring-boot/">Spring Boot</a>! I think you'll be impressed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Integration is a hack!]]></title>
    <link href="http://thediscoblog.com/blog/2014/12/30/continuous-integration-is-a-hack/"/>
    <updated>2014-12-30T15:21:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2014/12/30/continuous-integration-is-a-hack</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/surprised-little-boy1.jpg">"<a href="http://www.amazon.com/gp/product/0321336380?ie=UTF8&amp;tag=thdibl-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321336380">Continuous Integration</a> is a hack!" said my friend <a href="https://twitter.com/benrady">Ben Rady</a> years ago during a discussion on CI hosted by <a href="http://www.stelligent.com/">Stelligent</a>. At the time, I was incredulous! How dare someone question the value of CI, especially when we had just finished writing a book about it! What's more, our book had been nominated for a prestigious <a href="http://en.wikipedia.org/wiki/Jolt_Awards">Jolt award</a>; indeed, <a href="http://www.drdobbs.com/tools/winners-of-the-18th-jolt-product-excelle/207600666?pgno=2">the following day, our CI book won it</a>!</p>

<p>In retrospect, Ben's point was poignant: CI is <em>reactionary</em>. You still have to wait some amount of time to ascertain correctness. That is, CI implicitly relies on a passive process to run a project's build and any corresponding tests. If those tests fail, you are of course, notified. Nevertheless, that notification is somewhat delayed: by the time a CI process runs the tests and reports on their status, you've already moved on to the next task. So much for failing fast!</p>

<!-- more -->


<p>On the other hand, if tests, which are arguably the <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=code+quality:">quintessential proof of valid integration</a>, are run <em>continuously</em>, then there's no wait time to ascertain issues! Ben's stance is really no surprise (especially if you know him) as he went on to play a major role in <a href="https://infinitest.github.io/">Infinitest</a> and co-author <a href="http://www.amazon.com/gp/product/1934356700/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356700&amp;linkCode=as2&amp;tag=thdibl-20&amp;linkId=B53N2UWBWAKQNAVH">Continuous Testing: with Ruby, Rails, and JavaScript</a>. I've come to realize Ben's wisdom since then and have become a huge fan of Continuous Testing.</p>

<iframe style="float: right; margin-left: 1.5em; margin-top: 1.0em; width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://thediscoblog.com//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=thdibl-20&marketplace=amazon&region=US&placement=1934356700&asins=1934356700&linkId=R2TMR5VSJAZVXCTS&show_border=true&link_opens_in_new_window=true">
</iframe>


<p> A more proactive means to ensuring all is kosher with a code base is to continuously run your tests as you work. In fact, an even more superior process would be to run any tests for code that has changed. That is, once a mapping has been established between code under test and a corresponding test, then when that code changes, the quickest, arguably most effective way to ensure that code isn't broken is to run its test(s).</p>

<p>One efficient way to ascertain mapping is to name tests after the code they verify proceeded with a <code>test</code> moniker. For example, an <code>Account</code> object would have its corresponding test called <code>AccountTest</code> (or <code>AccountSpec</code>, etc). Any time the <code>Account</code> object changes, then the <code>AccountTest</code> would be run.</p>

<p><a href="http://www.amazon.com/gp/product/1934356700/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356700&amp;linkCode=as2&amp;tag=thdibl-20&amp;linkId=FUVGSKMDG7GWI3CB">Continuous Testing</a> is an established practice in the world of Ruby. A great framework that facilitates it is called <a href="http://www.javaworld.com/article/2074593/core-java/continuous-android-testing-with-guard.html">Guard</a>. Briefly, <a href="https://github.com/guard/guard">Guard</a> is a framework for watching a file system and sending out a notification upon some event (like a change).  With Guard, you can define specific file matching patterns and a corresponding action to take when an event is triggered. You can probably see that this linkage facilitates running tests continuously.</p>

<p>There's really no corollary framework or tool in Java (other than Infinittest and other IDE tools). Nevertheless, you can use Guard to continuously test a <a href="http://thediscoblog.com/blog/categories/java/">Java</a> project. I wrote about <a href="http://www.javaworld.com/article/2074593/core-java/continuous-android-testing-with-guard.html">how to do it with an Android over two years ago</a> and about 6 months ago I got involved in a Guard plugin for Gradle, dubbed <a href="https://github.com/bricker/guard-gradle">Guard::Gradle</a>.</p>

<p>To use Guard::Gradle, you'll need to have <a href="http://thediscoblog.com/blog/categories/ruby/">Ruby</a> installed. For those on <a href="http://thediscoblog.com/blog/categories/osx/">OSX</a>, you already have Ruby. Once you have Ruby installed, the installation of Guard::Gradle couldn't be more easy: just open up a terminal in your desired Gradle project and type:</p>

<p><code>bash Simple installation!
$ curl https://raw.githubusercontent.com/bricker/guard-gradle/master/etc/installer.sh | bash -
</code></p>

<p>The above command will download a script and execute it. That script will:</p>

<ul>
<li>Install Ruby's <a href="http://bundler.io/">Bundler</a></li>
<li>Install the Guard::Gradle plugin</li>
<li>Create a default <code>Guardfile</code></li>
<li>Create a Guard launcher script, dubbed <code>guard.sh</code></li>
</ul>


<p>Therefore, after you run the above command, just execute <code>guard.sh</code> to start Guard::Gradle! Any time you change a file in your source tree, a <a href="http://www.ibm.com/developerworks/java/library/j-cq10316/">corresponding test</a> will be executed using the Gradle <code>test</code> task.</p>

<p>The default <code>Guardfile</code> assumes a standard Gradle project setup, with source code located in <code>src/main</code>. In fact, if you are  curious, take a look at the generated <code>Guardfile</code> and you'll see:</p>

<p><code>ruby Default Guard::Gradle Guardfile
guard :gradle do
  watch(%r{^src/main/(.+)\.*$}) { |m| m[1].split('.')[0].split('/')[-1] }
end
</code></p>

<iframe style="float: left; margin-right: 1.5em; margin-top: 0.7em; margin-bottom: 0.5em; width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://thediscoblog.com//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=thdibl-20&marketplace=amazon&region=US&placement=0321336380&asins=0321336380&linkId=GQYZOKPUZCUVELWX&show_border=true&link_opens_in_new_window=true">
</iframe>


<p>That <code>watch</code> command examines the <code>src/main</code> directory and attempts to execute a matched file's test. If no test is found, all tests are run. So either way, if a change happens, you're <a href="http://www.ibm.com/developerworks/java/library/j-cq01316/index.html">covered with some amount of tests</a>.
which ostensibly updates your local directory with all <a href="http://thediscoblog.com/blog/categories/git/">upstream changes</a>). Consequently, if upstream changes have broken your local branch, you'll know instantly. No more need to remember to "run the tests" -- they're <em>always</em> running.</p>

<p>Of course, Continuous Integration isn't a hack. But Ben made a prescient point back then: if you want to fail fast and shorten the time to detect failures, why not do it at the source? Why not know instantly while you're working instead of some later time after you've moved on? Assuming your <a href="http://thediscoblog.com/blog/categories/tdd/">project has tests</a>, then Continuous Testing is the answer. Continuous Testing is the proactive yin to CI's reactive yang.</p>

<p>Check out <a href="https://github.com/bricker/guard-gradle">Guard:Gradle</a> today and know <em>instantly</em> when you've made a breaking change! Now that's something everyone can dig, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just require tire to inquire]]></title>
    <link href="http://thediscoblog.com/blog/2013/12/29/just-require-tire-to-inquire/"/>
    <updated>2013-12-29T12:53:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/12/29/just-require-tire-to-inquire</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/es-bonzai.jpg">In the land of <a href="http://thediscoblog.com/blog/categories/ruby/">Ruby</a> there's a few client libraries for <a href="http://thediscoblog.com/blog/categories/elasticsearch/">Elasticsearch</a>, however, one stands above the rest with a comprehensive set of features and remarkable <a href="http://karmi.github.io/retire/">documentation</a>: <a href="https://github.com/karmi/retire">Tire</a>.</p>

<p>With its DSL based API, you'll find working with <a href="http://www.ibm.com/developerworks/library/j-javadev2-24/">Elasticsearch</a> straightforward and a lot of fun. And even though the project's repository has been renamed to <a href="https://github.com/karmi/retire/wiki/Tire-Retire">retire</a>, the Tire library</p>

<p><blockquote><p>will continue to work...bugs will be fixed and important features will be added.</p><footer><strong>Karel Minarik</strong> <cite><a href='https://github.com/karmi/retire/wiki/Tire-Retire'>Tire Retire</a></cite></footer></blockquote></p>

<p>In my opinion, for the time being, Tire is still superior to the <a href="https://github.com/elasticsearch/elasticsearch-ruby">elasticsearch-ruby</a> alternative in terms of features and its elegant DSL.</p>

<!-- more -->


<p></p>

<p>To begin using Tire, grab the gem. For instance, if you're using Bundler, then add the following line to your <code>Gemfile</code>:</p>

<p><code>ruby Adding Tire to a Gemfile
gem 'tire'
</code></p>

<p>After running a <code>bundle install</code>, you'll be able to require Tire.</p>

<p><code>ruby Requiring Tire
require 'tire'
</code></p>

<p>Tire assumes a locally running instance of Elasticsearch; if you wish to connect to a remote node, then create a <code>configure</code> block and set the <code>url</code> to a remote Elasticsearch instance.</p>

<p><code>ruby Configuring a remote Elasticsearch instance
Tire.configure do
  url environment['elasticsearch_host']
end
</code></p>

<p>In the code above, the <code>url</code> is set the value of <code>elasticsearch_host</code>.</p>

<h5>Dealing with Indexes</h5>

<p>First and foremost to working with Elasticsearch is the creation of an index, which can be thought of as a database. Search-able documents are then stored in an index and the process of adding documents to an index is known as <em>indexing</em>.</p>

<p>Consequently, to create an index, you simply name it an issue a <code>create</code> in an <code>index</code> block.</p>

<p><code>ruby Creating an index
Tire.index 'beer_recipes' do
  create
end
</code></p>

<p>In this case, the index is named 'beer_recipes'.</p>

<p>As I've <a href="http://thediscoblog.com/blog/2013/09/14/understanding-elasticsearch-analyzers/">covered before</a>, you can alter how Elasticsearch indexes a document by providing a customized index mapping. In the code below, I've specified that the <code>ingredients</code> property of the <code>beer</code> type will be analyzed using the snowball algorithm, which converts a word into its root, yielding a simpler token (i.e. 'lemons' becomes 'lemon', 'jazzy' becomes 'jazz').</p>

<p>``` ruby Changing the mapping of an index
Tire.index 'beer_recipes' do
  create mappings:  {</p>

<pre><code>beer: {
    properties: { 
        ingredients:  { type: 'string', analyzer: 'snowball' } 
    } 
}
</code></pre>

<p>  }
end
```</p>

<p>Finally, to delete an index, simply issue a <code>delete</code>, like so:</p>

<p>``` ruby Delete an index
Tire.index 'beer_recipes' do</p>

<pre><code>delete
</code></pre>

<p>end
```</p>

<p>Of course, the whole point of <a href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/">Elasticsearch is search</a>! And searching with Tire is super simple; what's more, Tire offers a slick feature of allowing you to define model objects for both indexing and searching (think <a href="https://gist.github.com/karmi/3200212">ActiveRecord</a> integration).</p>

<h5>Indexing &amp; Searching with Tire</h5>

<p>In <a href="http://thediscoblog.com/blog/categories/elasticsearch/">Elasticsearch</a>, an index can be thought of as a database and a <em>type</em> can be thought of as a database table. Accordingly, when you index a document, you give it a type and associate properties, which essentially act like columns.</p>

<p>Indexing a document is executed via the <code>store</code> command. In the code below, a document is stored as a <code>beer</code> type with three properties: <code>name</code>, <code>style</code>, and <code>ingredients</code>. The <code>refresh</code> command updates the index and accordingly makes this newly indexed document available for search.</p>

<p>``` ruby Indexing a document
Tire.index 'beer_recipes' do</p>

<pre><code>store type: 'beer',
name: "Todd Enders' Witbier",
style: "wit, Belgian ale, wheat beer",
ingredients: "4.0 lbs Belgian pils malt, 4.0 lbs raw soft red winter wheat, 0.5 lbs rolled oats, 0.75 oz coriander, freshly ground Zest from two table oranges and two lemons, 1.0 oz 3.1% AA Saaz, 3/4 corn sugar for priming, Hoegaarden strain yeast"
</code></pre>

<p>  refresh
end
```</p>

<p>Consequently, to search for a document in an index, you use the <code>search</code> method, which returns a list of results.</p>

<p>``` ruby Searching for a document
search_res = Tire.search('beer_recipes') do</p>

<pre><code>query do
    term :ingredients, 'lemon'
end
</code></pre>

<p>end</p>

<p>assert_equal 1, search_res.results.size
assert_equal "Todd Enders' Witbier", search_res.results[0].name
```</p>

<p>In the code above, the <code>search</code> block defines a simple query where the <code>ingredients</code> property is searched for the term 'lemon', which yields one result. Note, the resultant list contains maps whose keys are the document's properties (i.e. <code>name</code>, <code>style</code>, and <code>ingredients</code>).</p>

<p>You can use normal Ruby objects for both indexing and searching in Tire. The only requirement is that your model object provide a <code>type</code>, <code>_type</code> or <code>document_type</code> method as well as a <code>to_indexed_json</code> method.</p>

<p>In this case, I've defined a <code>Beer</code> class that includes the two required methods as well as a class method that enables searching the <code>ingredients</code> property.</p>

<p>``` ruby Using a model object
class Beer</p>

<pre><code>attr_reader :name, :style, :ingredients

class &lt;&lt; self
    def search_ingredients_for(ingredient)
        search_res = Tire.search('beer_recipes') do
        query do
            term :ingredients, ingredient
        end
    end
    search_res.results
    end
end

def initialize(attributes={})
    @attributes = attributes
@attributes.each_pair { |name,value| instance_variable_set :"@#{name}", value }
</code></pre>

<p>  end</p>

<p>  def type</p>

<pre><code>  'beer'
</code></pre>

<p>  end</p>

<p>  def to_indexed_json</p>

<pre><code>@attributes.to_json
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Next, to make use of my <code>Beer</code> model object, I need to configure Tire to use it via the <code>wrapper</code> command. Once that is done, I can use my <code>Beer</code> object to index beers and to search for them.</p>

<p>``` ruby
Tire.configure do</p>

<pre><code>wrapper Beer #forces results to be of type beer!
</code></pre>

<p>end</p>

<p>Tire.index 'beer_recipes' do</p>

<pre><code>store Beer.new type: 'beer',
name: "Todd Enders' Witbier",
style: "wit, Belgian ale, wheat beer",
ingredients: "4.0 lbs Belgian pils malt, 4.0 lbs raw soft red winter wheat, 0.5 lbs rolled oats, 0.75 oz coriander, freshly ground Zest from two table oranges and two lemons, 1.0 oz 3.1% AA Saaz, 3/4 corn sugar for priming, Hoegaarden strain yeast"
</code></pre>

<p>  refresh
end</p>

<p>results = Beer.search_ingredients_for 'lemons'
assert_equal 1, results.size
assert_equal Beer, results[0].class
assert_equal "Todd Enders' Witbier", results[0].name
```</p>

<p>As you can see above, the <code>store</code> method takes a new instantiated <code>Beer</code> instance; what's more, I can use my <code>search_ingredients_for</code> class method to find a corresponding document.</p>

<p>While there are alternate Ruby <a href="http://thediscoblog.com/blog/2013/01/02/scalable-searching-with-elasticsearch/">Elasticsearch</a> libraries available, Tire is by far the richest -- its features along with its DSL make working with <a href="http://www.ibm.com/developerworks/library/j-javadev2-24/">Elasticsearch</a> easy along with fun. So what are you waiting for? Require Tire to inquire!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lickety-split custom validations in Rails]]></title>
    <link href="http://thediscoblog.com/blog/2013/06/12/lickety-split-custom-validations-in-rails/"/>
    <updated>2013-06-12T13:19:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/06/12/lickety-split-custom-validations-in-rails</id>
    <content type="html"><![CDATA[<p>Have a highly specific, yet custom validation for a particular field on one of your <a href="http://thediscoblog.com/blog/categories/rails/">Rails</a> model objects? Don't want to create a <code>ActiveModel::Validator</code> type? Not a problem!</p>

<p>You can just as easily <a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html">create a method</a> that can be invoked as part of the validation process. For example, imagine a field dubbed <code>uri</code> in some model object; this field must begin with a protocol (i.e. http or https). You can create a validation method like so:</p>

<p>``` ruby Custom validator
def uri_should_start_with_protocol
  if !uri.start_with?('http://') &amp;&amp; !uri.start_with?('https://')</p>

<pre><code>errors.add(:uri, 'Web Address should start with http:// or https://')
</code></pre>

<p>  end
end
```
This method resides in your model. You can then register this method as a validation for your model like so:</p>

<p><code>ruby Wiring the validation
validate :uri_should_start_with_protocol
</code></p>

<p>Now if the <code>uri</code> field doesn't contain http or https, <code>model.save</code> will return <code>false</code>. Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backgrounding tasks in Heroku with Delayed Job]]></title>
    <link href="http://thediscoblog.com/blog/2013/06/10/backgrounding-tasks-in-heroku-with-delayed-job/"/>
    <updated>2013-06-10T12:56:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/06/10/backgrounding-tasks-in-heroku-with-delayed-job</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/heroku-logo-light.png">Long running web requests are bad. They create resource contention among other waiting incoming requests; what's more, with HTTP servers like <a href="https://github.com/defunkt/unicorn">Unicorn</a> (which is rapidly becoming the de facto HTTP server for Rails apps running on <a href="https://get.heroku.com/">Heroku</a>), long running requests are summarily terminated after some threshold (for example, 30 seconds) leaving users with a nasty timeout error (and, of course, other users complaining that it takes forever for your site to do anything). Luckily, with frameworks like <a href="https://github.com/collectiveidea/delayed_job">Delayed Job</a>, backgrounding long running tasks <a href="https://devcenter.heroku.com/articles/delayed-job">couldn't be any easier</a>.</p>

<!-- more -->


<p>To leverage Delayed Job in Heroku, you'll need for follow a few steps. In my case, since I'm using <a href="http://mongoid.org/en/mongoid/index.html">Mongoid</a>, I'm going to use an <a href="https://github.com/collectiveidea/delayed_job_mongoid">alternate Active Record Delayed Job tie-in</a> dubbed <code>delayed_job_mongoid</code>. The reason for this <a href="http://guides.rubyonrails.org/">Active Record</a> integration will become obvious once I show you how to actually force a long running task to be asynchronous. Regardless if you are using Mongoid or not, the Active Record integration is identical.</p>

<p>First and foremost, you'll need to add <code>delayed_job_mongoid</code> to your <code>Gemfile</code> (or if you aren't using Mongoid, add <code>delayed_job_active_record</code>).  Delayed Job stores jobs in your database; consequently, after you run <code>bundle install</code>, proceed to update your underlying MongoDB instance with a new index by running:</p>

<p><code>bash Adding an index and new collection to MongoDB
$&gt; script/rails runner 'Delayed::Backend::Mongoid::Job.create_indexes'
</code></p>

<p>Obviously, if you're using a normal RDMBS, your command will be slightly different (i.e. <code>rake db:migrate</code>).</p>

<p>After that step is complete, you'll need to generate a <code>delayed_job</code> script via:</p>

<p><code>bash Generating the Delayed Job script
$&gt; rails generate delayed_job
</code></p>

<p>This script allows to you execute the Delayed Job framework with a number of options. As it turns out, you don't really need this script as Delayed Job hooks into Rake as well; it is via the Rake integration that Heroku will work with Delayed Job.</p>

<p>Now that you've set up 80% of the infrastructure required to support Delayed Job, you next need to background some long running task. This is the fun part and like everything else so far, it couldn't be any easier.</p>

<p>Delayed Job hooks directly into Active Record and thus, you can background some unit of work on a model object by inserting a <code>delay</code> call. For example, in my case, I had a <code>Group</code> model object that when updated under certain circumstances required that <em>all associated</em> users also be updated (wouldn't it be nice if <a href="https://jira.mongodb.org/browse/SERVER-124">MongoDB supported triggers</a>?). As you can imagine, updating hundreds of users is rather time intensive.</p>

<p>Thus, the user update logic was thrown into a special method (dubbed <code>aysnc_update_users</code>) and was then invoked like so:</p>

<p><code>ruby Adding in a delay backgrounds the async_update_users call
group.delay.async_update_users
</code></p>

<p>This call essentially serializes the logic here into a collection called <code>delayed_backend_mongoid_jobs</code> which can then be invoked asynchronously by another process. And therein lies your last few steps.</p>

<p>Heroku has the notion of <a href="https://devcenter.heroku.com/articles/background-jobs-queueing">worker dynos</a>, which are background processors -- think of worker dynos as engines capable of doing what ever you want them to do. In the case of Delayed Job, you want those worker dynos to invoke jobs residing in the <code>delayed_backend_mongoid_jobs</code> collection (which is conceptually a queue).</p>

<p>To configure a worker dyno, you'll need to do 2 things. First, provision one like so:</p>

<p><code>bash Using Heroku CLI to fire up a worker dyno
$&gt; heroku ps:scale worker=1
</code></p>

<p>You'll then need to update your <code>Procfile</code> to include the command the worker dyno should invoke:</p>

<p><code>ruby Updated Procfile command
worker:  bundle exec rake jobs:work
</code></p>

<p>As you can see, the worker dyno in this case is invoking a <a href="http://rake.rubyforge.org/">Rake task</a> (<code>jobs:work</code>) which is asynchronously polling for new jobs in your conceptual queue and invoking them as they are found.</p>

<p>Finally, deploy to Heroku and keep an eye on the queue for jobs -- you can isolate the dyno workers logs via</p>

<p><code>
$&gt; heroku logs -p worker -t
</code></p>

<p>Was that easy or what?</p>
]]></content>
  </entry>
  
</feed>
