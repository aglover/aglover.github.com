<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | The Disco Blog]]></title>
  <link href="http://aglover.github.com/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://aglover.github.com/"/>
  <updated>2013-05-15T13:35:56-04:00</updated>
  <id>http://aglover.github.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobile-isticly optimized in 10 seconds]]></title>
    <link href="http://aglover.github.com/blog/2013/05/15/mobile-isticly-optimized-in-10-seconds/"/>
    <updated>2013-05-15T13:20:00-04:00</updated>
    <id>http://aglover.github.com/blog/2013/05/15/mobile-isticly-optimized-in-10-seconds</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/unoptmobile.png">Anyone ever told you that your website isn't mobile optimized? Or have you ever seen a lilliputian-looking website on your device? You know, one that renders so small you are forced to squint as you enlarge various parts of the site with your fingers just to read it?</p>

<p>Websites render this way on mobile devices because they lack a simple <code>meta</code> tag. While the subject of mobile website optimization can be rather involved (especially when dealing with <a href="http://css-tricks.com/css-media-queries/">CSS media queries</a>, which take longer than 10 seconds to understand), there is a simple trick that can at least can make your website render normally on a mobile device. And it can be done in 10 seconds.</p>

<!--more-->


<p>Simply add the following <code>meta</code> tag in the <code>head</code> element of your website's index page:</p>

<p><code>html viewport definition
&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
</code></p>

<p>The viewport <code>meta</code> tag is supported by browsers on both iOS, Android, and by other device browsers including Internet Explorer Mobile on Windows Phone 8. This tag instructs a browser on how to properly display a webpage; without it, a webpage is, unfortunately, displayed mini-style on device browsers, which have a narrow width.</p>

<p>Thus, the viewport tag essentially zooms in the display of a webpage. In the case of the example tag above, the width of the website is set to the device's width and the scale is set to 100% -- this'll allow the website to be displayed normally on a mobile device. Website visitors won't have to squint or pinch and expand to just to read the site's relevant text.</p>

<p><a href="http://www.paulund.co.uk">Paulund.co.uk</a> has a really <a href="http://www.paulund.co.uk/understanding-the-viewport-meta-tag">good write up</a> regarding the usage of the viewport <code>meta</code> tag as well as CSS media queries; what's more, the good folks who created <a href="http://html5boilerplate.com/mobile/">HTML5boilerplate.com</a> have a <a href="http://t.co/dKP3o1e">nifty presentation</a> that's worth a read too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hold your horses! It's still only a two horse race.]]></title>
    <link href="http://aglover.github.com/blog/2013/05/09/hold-your-horses-its-still-only-a-two-horse-race/"/>
    <updated>2013-05-09T12:49:00-04:00</updated>
    <id>http://aglover.github.com/blog/2013/05/09/hold-your-horses-its-still-only-a-two-horse-race</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/2horsesracesm.jpg">There has been a lot of excitement in recent months regarding a few new entrants to the mobile operating systems arena including <a href="http://www.mozilla.org/en-US/firefox/partners/">Firefox OS</a>, <a href="https://www.tizen.org/">Tizen</a>, and <a href="https://wiki.ubuntu.com/Touch">Ubuntu Touch</a>. These relatively nascent projects, which are all built on top of a Linux kernel, appear to have fully embraced HTML 5 apps; indeed, HTML 5 apps on these operating systems are first class citizens that can run without a browser. Moreover, the ubiquity of HTML 5 means the same app can run on all 3 of these operating systems plus Android and iOS!</p>

<p>What's also exciting is that there are some major players behind these projects -- Mozilla is, of course behind Firefox OS, Canonical is behind Ubuntu Touch, and quite a few large players are behind Tizen, including Samsung. <a href="http://www.forbes.com/sites/haydnshaughnessy/2013/04/13/how-mozillas-firefox-os-will-open-up-the-smartphone-market/">Firefox OS even appears to be courting carriers with an opportunity to run their own app stores</a>. This app store opportunity naturally has carriers foaming at the mouth to re-assert some semblance of control: behold the Verizon app store! All apps are $0.99 and we'll just bill you at the end of the month (like we used to do for all those ringtones you were accustomed to download back when we were in control of all things device-related before Apple destroyed that cash cow).</p>

<!--more-->


<p>Naturally, we're all eager to see how these new entrants fair. It reminds me of how interested I was in learning more about <a href="http://www.windowsphone.com/en-us/how-to/wp8/start/whats-new-in-windows-phone">Windows Phone 8</a> and even <a href="http://global.blackberry.com/blackberry-10.html">Blackberry's latest and greatest attempt</a> at regaining some composure.</p>

<p>But then I remember this stunning fact: Apple and Google</p>

<p><blockquote><p>together control nearly 9 out of 10 smartphones sold globally.</p><footer><strong>Tomi Ahonen</strong> <cite><a href='http://www.forbes.com/sites/haydnshaughnessy/2013/04/09/ios-vs-android-can-competitors-break-apple-and-googles-stranglehold/'>Can These Competitors Break Apple and Google's Stranglehold on the Mobile OS?</a></cite></footer></blockquote></p>

<p>Even with industry heavyweight contenders (who are not new to mobile!) like <a href="http://www.windowsphone.com/en-us">Microsoft</a> and <a href="http://us.blackberry.com/">Blackberry</a> (who, we all should remember, <em>owned</em> the smartphone market before Apple got involved) haven't really made a dent. Granted, it's early to rush to conclusions, however, preliminary signs don't bode well for either company.</p>

<p>The co-CEO of Samsung had some stinging criticism for Microsoft:</p>

<p><blockquote><p>Smartphones and tablets based on Microsoft's Windows operating system aren't selling very well. There is a preference in the market for Android. In Europe, we're also seeing lackluster demand for Windows-based products.</p><footer><strong>JK Shin</strong> <cite><a href='http://www.theverge.com/2013/3/15/4106980/samsung-ceo-jk-shin-says-windows-isnt-selling-very-well'>New Samsung CEO Says There Is 'Lackluster Demand' for Windows Tablets and Phones</a></cite></footer></blockquote></p>

<p>Blackberry appears to have some demand in the UK and Canada, a recently analyst T. Michael Walkley had this to say:</p>

<p><blockquote><p>While we anticipate stronger near-term results for BlackBerry as higher margin BB10 smartphones sell into the channel, we do not believe BlackBerry can achieve sell-through market share levels to return to sustained profit levels</p><footer><strong>T. Michael Walkley</strong> <cite><a href='http://business.financialpost.com/2013/05/06/blackberry-estimates-cut-despite-q10-strength-likely-offsetting-z10-weakness/'>BlackBerry Sales Forecast Cut Despite Strong Demand for Q10</a></cite></footer></blockquote></p>

<p>The salient point, nevertheless, is that neither Microsoft or Blackberry have yet to make a dent into the Google-Apple duopoly. And so while it's easy to get excited about new entrants like Ubuntu Touch, the reality, at least for the time being, is that these operating systems will have little impact in the smartphone market.</p>

<p>After all, when your competition essentially owns 9 out of every 10 smartphones, evolutionary enhancements aren't enough to break that stranglehold: you have to do something <em>revolutionary</em>. Besides, we've already seen this before: the iPhone was not an evolutionary offshoot of the Blackberry. It was revolutionary. Sadly, neither Ubuntu Touch, Tizen, nor Firefox OS appear revolutionary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile for the masses: gestures and test deployments]]></title>
    <link href="http://aglover.github.com/blog/2013/04/24/mobile-for-the-masses-gestures-and-test-deployments/"/>
    <updated>2013-04-24T21:13:00-04:00</updated>
    <id>http://aglover.github.com/blog/2013/04/24/mobile-for-the-masses-gestures-and-test-deployments</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/mftm_1.jpg">My second article in <a href="http://www.ibm.com/developerworks/">IBM developerWorks</a>' series <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=mobile+for+the+masses">Mobile for the Masses</a> is out! <a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses2/index.html">This article</a> covers how to go about designing a mobile interface from the standpoint of usability via gestures. In essence, eschew buttons and prefer the swipe! What's more, I cover at a high level how to test your app on an Android device.</p>

<p>As the article summary states:</p>

<p><blockquote><p>Mobile users are typically distracted, busy, and ergonomically constrained, so build your mobile application UIs accordingly. Andrew Glover discusses key factors that differentiate mobile apps from web apps, then guides you through the creation of a mobile application UI that uses swipe gestures for navigation rather than button clicks.</p><footer><strong>IBM DeveloperWorks</strong> <cite><a href='http://www.ibm.com/developerworks/java/library/j-mobileforthemasses2/index.html'>Mobile for the Masses: Take a Swipe at It! Programming Gestures in Android</a></cite></footer></blockquote></p>

<p>So what are you waiting for? Check out "<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses2/index.html">Mobile for the masses: Take a swipe at it! Programming gestures in Android</a>" and trade buttons for swipes in your Android mobile apps! And if you missed the first article, check out "<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses1/">Mobile for the masses: A gentle introduction to Android</a>" and learn the ins and outs of Android development!</p>

<p>Stay tuned for more articles in this series and don't forget to watch for <a href="http://thediscoblog.com/blog/categories/mobile/">mobile focused articles on this blog</a> as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hybrid inappropriateness]]></title>
    <link href="http://aglover.github.com/blog/2013/04/14/hybrid-inappropriateness/"/>
    <updated>2013-04-14T11:14:00-04:00</updated>
    <id>http://aglover.github.com/blog/2013/04/14/hybrid-inappropriateness</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/confused.png">The mobile development landscape is <a href="http://skytechgeek.com/2011/09/10-mobile-application-frameworks-for-easy-development/">bursting at the seams</a> with frameworks and tools that enable you to target <a href="http://thediscoblog.com/blog/2013/03/25/modeveast-2012-panel-discussion/">two primary mobile platforms</a>: iOS and <a href="http://thediscoblog.com/blog/categories/android/">Android</a>. And the mobile community has <a href="http://thediscoblog.com/blog/2012/12/02/comprehending-the-mobile-development-landscape/">classified these frameworks and tools</a> into three categories: native, hybrid, and web. Unfortunately, limiting the classification to three <a href="http://thediscoblog.com/blog/2013/04/05/crowd-think-often-lacks-clarity/">is inadequate</a> as the term hybrid is too generic.</p>

<p>Web apps are truly ubiquitous because they take advantage of the browser and are thus, cross platform. You, for the most part, can get away with <a href="http://thediscoblog.com/blog/2012/09/01/cost-and-the-great-mobile-app-debate/">maintaining one code base</a> that can be viewed on iOS, Android, and the other minor players. Yet, the key point of Web apps is that they are <a href="http://thediscoblog.com/blog/2012/09/25/modevtablet-2012-video-mobile-web-realities/"><em>web sites</em>, not mobile apps</a>.</p>

<!--more-->


<p>As you begin to blur that mobile app/mobile website line, you'll <a href="http://thediscoblog.com/blog/2013/03/04/its-a-question-of-wow/">stumble over various issues</a> like performance or varying behaviors depending on the underlying device.  Worse, you'll find that <a href="http://thediscoblog.com/blog/2012/09/24/a-tale-of-three-browsers/">not all browsers are created equally</a> and thus, you'll need to <a href="http://thediscoblog.com/blog/2013/02/17/circumventing-mobile-ux-expectations/">compensate for various scenarios</a> or use assorted compensating tools like <a href="http://modernizr.com/">Modernizr</a>. Or, you'll find yourself throwing the web app into a container because you want mass distribution via an app store or because you want to take advantage of some native feature.</p>

<p>And at that point, in the eyes of many, you've built a hybrid mobile app. But that's not the whole story.</p>

<p>Hybrid frameworks aren't all created equal.  There are, in fact, two flavors of hybrid-ness: <em>hybrid-web</em> and <em>hybrid-native</em>. Both are extremely different; in fact, to showcase the difference, I need only compare the "featured" apps of two hybrid frameworks: <a href="http://phonegap.com/">PhoneGap</a> and <a href="http://www.madewithmarmalade.com/">Marmalade</a>.</p>

<p>PhoneGap is a great framework for building hybrid-web apps. You code in HTML and JavaScript and the resultant code is run inside of a web view managed by a native container.  You ostensibly write one code base and deploy to all the primary mobile platforms. Similar frameworks are: <a href="http://www-01.ibm.com/software/mobile-solutions/worklight/">IBM's Worklight</a> and <a href="http://www.icenium.com/">Icenium</a>. <a href="http://www.sencha.com/products/touch">Sencha Touch</a> falls into this realm as well when you employ their container technology.</p>

<p><img class="center" src="/images/mine/phonegap_example.png"></p>

<p><a href="http://www.madewithmarmalade.com/">Marmalade</a> is a hybrid-native app platform; that is, you can code in an intermediary language like C++ that is ultimately compiled down into native code (i.e. Java for Android, Objective-C for iOS, etc). These apps are not characterized by a web view in any way. They are native, close to the bone as it gets apps. The benefit is that you only had to write <em>one code base</em>, the underlying tool took care of the dirty work in making it work similarly on iOS and Android, for example. Similar frameworks are: <a href="http://www.coronalabs.com/">Corona</a>, <a href="http://www.mosync.com/">MoSync</a>, and <a href="http://www.appcelerator.com/">Appcelerator</a> to name a few.</p>

<p><img class="center" src="/images/mine/marmalate_example.png"></p>

<p>Now look closely at the <a href="http://phonegap.com/app/feature/">featured apps</a> of each <a href="http://www.madewithmarmalade.com/app-showcase">hybrid framework</a>. They're <a href="http://phonegap.com/blog/2011/11/07/phonegap-application-craft-pain-free-mobile-app-development/">distinctly</a> <a href="http://www.madewithmarmalade.com/marmaladesdk/application/cut-rope">different</a> aren't they?</p>

<p>PhoneGap and the rest of the hybrid-web frameworks are good at producing informational apps. These apps can look beautiful and certainly can have some compelling features like tight integration with social networks and geo-tracking, for example. But they're inadequate for games and still lack a rich user experience when compared to more native apps like Flipboard or AngryBirds.</p>

<p>Marmalade and the rest of the hybrid-native crowd shine when it comes to highly interactive apps like games; what's more, these frameworks can build an app that generates a wow. And therein lies the crucial aspect that's missed when the industry blindly assumes all hybrid options are similar. They couldn't be more incorrect -- thus, we need at least four categories (native, web, hybrid-native, and hybrid-web) and we need to eschew the lone term "hybrid" as it lacks clarification and therefore has no meaning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Painless Android swipe detection]]></title>
    <link href="http://aglover.github.com/blog/2013/04/07/painless-android-swipe-detection/"/>
    <updated>2013-04-07T10:37:00-04:00</updated>
    <id>http://aglover.github.com/blog/2013/04/07/painless-android-swipe-detection</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/gesticulate.png">Why bother building navigation buttons in an Android app when you can easily capture finger swipes? But, if you've ever implemented gesture section in Android there's the drudgery of implementing listeners and you also need to do some elementary Cartesian math. Save yourself the boilerplate bother mathematics and use a <a href="https://github.com/aglover/gesticulate">library</a>!</p>

<p><a href="https://github.com/aglover/gesticulate">Gesticulate</a> makes it painless to detect straightforward swiping motions like up, down, left, and right. It's a simple jar file you include in your Android <code>libs</code> directory. Throw Gesticulate's <code>SwipeDetector</code> inside an instance of Android's <code>SimpleOnGestureListener</code>, for example, and you're detecting swipes with ease!</p>

<p>Gesticulate is used in Savvy Words, a flash card vocabulary app found on <a href="https://play.google.com/store/apps/details?id=com.b50.savvywords">Google Play</a> and <a href="http://www.amazon.com/Beacon50-Savvy-Words/dp/B00C535D20/ref=sr_1_1?s=mobile-apps&amp;ie=UTF8&amp;qid=1365339189&amp;sr=1-1">Amazon's Appstore for Android</a>. See the <a href="https://github.com/aglover/gesticulate">Github project</a> for more details such as code examples for how to use Gesticulate, how to build it, and to see Gesticulate's tests. Swipe on, baby!</p>
]]></content>
  </entry>
  
</feed>
