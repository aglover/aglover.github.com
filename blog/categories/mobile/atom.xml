<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2013-08-13T21:39:36-07:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Amazon Appstore's support of HTML5 matters]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters/"/>
    <updated>2013-08-07T21:09:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters</id>
    <content type="html"><![CDATA[<p><img class="right" src="https://images-na.ssl-images-amazon.com/images/G/01/mobile-apps/devportal2/content/sdk/images/webapps_icon-final-114.<em>V379662584</em>.png">Today, Amazon announced that their <a href="http://www.amazon.com/mobile-apps/b?ie=UTF8&amp;node=2350149011">Appstore for Android</a> <a href="https://developer.amazon.com/post/Tx2HGWRGOW5YG8/Amazon-is-Now-Accepting-HTML5-Web-Apps-Making-it-Easy-for-You-to-Reach-Millions.html">now supports the submission of HTML5 apps</a>. This is a game changer for <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a> because now there is a direct channel to consumers.</p>

<p>As I wrote almost a year ago:</p>

<p><blockquote><p>software delivery on the mobile platform is, at least for the foreseeable future, firmly established via app stores. And app stores cater to native apps (100% native and/or hybrid) only. The average person will not look for useful apps via their device’s browser: that route is still a jungle. And, at this point, there is no viable pure play mobile web app delivery channel.</p><footer><strong>thediscoblog.com</strong> <cite><a href='http://thediscoblog.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results/'>Past Performance Is No Guarantee of Future Results</a></cite></footer></blockquote></p>

<p>Today, it's still true that the most convenient mechanism  for app delivery on mobile devices (and increasingly desktops) is via various app stores. And until today, HTML5 apps were not included in these app stores (unless they were wrapped by some hybrid-web container like <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">PhoneGap</a>).</p>

<!-- more -->


<p>But now with Amazon's announcement, <a href="http://thediscoblog.com/blog/categories/html5/">HTML5</a> apps <em>without any native container</em> can be submitted into their Appstore. What's more, these apps can take advantage of monetization features like <a href="https://developer.amazon.com/sdk/webapps/iap/understanding.html">In-App purchasing</a> using Amazon's API.</p>

<p>Now HTML5 apps have a direct channel to consumers along with an API to make HTML5 app developers money. HTML5 apps are now icon-ized and people don't have to use a search engine to find them!</p>

<p>As <a href="https://developer.amazon.com/blog/author/Mike+Hines.html">Mike Hines</a> of Amazon puts it:</p>

<p><blockquote><p>Starting today, you can submit your web apps and mobile optimized web sites and have them merchandised alongside native apps on Amazon and Kindle Fire in nearly 200 countries worldwide, without any third-party software or doing any native app development.</p><footer><strong>https://developer.amazon.com/blog/</strong> <cite><a href='https://developer.amazon.com/post/Tx2HGWRGOW5YG8/Amazon-is-Now-Accepting-HTML5-Web-Apps-Making-it-Easy-for-You-to-Reach-Millions.html'>Amazon Is Now Accepting HTML5 Web Apps—Making It Easy for You to Reach Millions of Kindle Fire and Android Customers Worldwide</a></cite></footer></blockquote></p>

<p>This is big news for HTML5 developers. A direct channel to the masses and monetization APIs to boot -- what more could you ask for? Standby folks because it's about to get even more interesting, as I'm willing to bet that Google and Apple will follow suit in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swipe gestures in jQuery Mobile apps]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/30/adding-swipe-gestures-to-jquery-mobile-apps/"/>
    <updated>2013-07-30T12:52:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/30/adding-swipe-gestures-to-jquery-mobile-apps</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/swipe-right.png">I find that <a href="http://thediscoblog.com/blog/2013/04/07/painless-android-swipe-detection/">swipe gestures</a> for navigating between screens in a mobile app <a href="http://thediscoblog.com/blog/2013/07/01/mobile-for-the-masses-words-and-gestures-with-overheard-word/">quite nice</a>. <a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Early on</a> in my mobile development journey, I found myself instinctively adding navigation buttons, but quickly found them cumbersome for users to tap; plus, those buttons took up precious screen real estate! Gestures, on the other hand, free up screen space by removing needless buttons and give users a more interactive experience.</p>

<p>Implementing right and left swipes in an <a href="http://jquerymobile.com/">jQuery Mobile</a> app is fairly straightforward, but there are a few gotchas that I was able to piece together via multiple <a href="http://stackoverflow.com/questions/7533772/how-to-swipe-between-several-jquery-mobile-pages">stackoverflow threads</a>, blogs, and finally <a href="http://api.jquerymobile.com/">jQuery Mobile's own documentation</a>.</p>

<!-- more -->


<p>In a jQuery Mobile app, you <a href="http://the-jquerymobile-tutorial.org/jquery-mobile-tutorial-CH02.php">define pages</a> within <code>div</code> tags that represent a UI screen -- you can then declare transitions between pages well -- slide, flip, etc.  The key aspect with swiping between page <code>div</code>s is the selector for them, which is <code>div[data-role='page']</code>.</p>

<p>Once you have a handle to that <code>div</code>, you can proceed forward with a left swipe via jQuery's <a href="http://api.jquery.com/next/"><code>next</code></a> function. Conversely, swiping right with the intent of going back is facilitated by finding the previous matching <code>div[data-role='page']</code> via jQuery's <a href="http://api.jquery.com/prev/"><code>prev</code></a> function.</p>

<p>Also note, going backwards via a swipe requires that you <em>reverse</em> the slide transition, otherwise it looks misleading to the user (i.e. the transition is from left to right rather than the other way around!).</p>

<p>Accordingly, the JavaScript for swipe gestures should be placed within a <a href="http://jquerymobile.com/demos/1.2.0/docs/api/events.html"><code>pageinit</code> event</a> like so:</p>

<p>``` javascript Enabling swipe between page divs
$(document).on('pageinit', function(event){
  $('div.ui-page').on("swipeleft", function () {</p>

<pre><code>var nextpage = $(this).next('div[data-role="page"]');
  if (nextpage.length &gt; 0) {
    $.mobile.changePage(nextpage, "slide", false, true);
  }
</code></pre>

<p>  });</p>

<p>  $('div.ui-page').on("swiperight", function () {</p>

<pre><code>var prevpage = $(this).prev('div[data-role="page"]');
if (prevpage.length &gt; 0) {
  $.mobile.changePage(prevpage, { transition: "slide", reverse: true }, true, true);
}
</code></pre>

<p>  });
});
```</p>

<p>Note, this script should be referenced in your DOM <em>before</em> you pull in the jQuery mobile js file. That is, put the code above where you add jQuery mobile in your document's header (but <em>after</em> you load jQuery itself):</p>

<p>``` html Including jQuery Mobile</p>

<script src="https://d10ajoocuyu32n.cloudfront.net/jquery-1.9.1.min.js"></script>


<!-- add pageinit swipe initialization here -->


<script src="https://d10ajoocuyu32n.cloudfront.net/mobile/1.3.1/jquery.mobile-1.3.1.min.js"></script>


<p>```</p>

<p>Once you've done that, you'll be able to swipe between page <code>div</code>s.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Android migrations]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations/"/>
    <updated>2013-07-24T09:46:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/android_platform.png">Have you ever worked with <a href="http://guides.rubyonrails.org/migrations.html">Rails' migrations</a>? They make <a href="http://www.tutorialspoint.com/ruby-on-rails/rails-migrations.htm">database changes a breeze</a>, don't they?  While every software release doesn't necessarily involve a migration, when one does happen to make use of one, <a href="http://thediscoblog.com/blog/2013/02/18/testing-rails-migrations/">I'm always pleased</a> on how easily things work out. Whether it's to add new data or alter existing data structures, Rails migrations make evolving a datastore (be it an RDMBS or NoSQL one like MongoDB) painless.</p>

<p>When I recently found myself altering the data structure of a SQLite database for <a href="https://play.google.com/store/apps/details?id=com.b50.hoproll&amp;hl=en">one of my Android apps</a>, I found myself wishing there was some similar migration mechanism for Android as there is in Rails. Alas, I could fine none, so I did what any other developer would do: <a href="https://github.com/aglover/droid-migrate">I wrote one</a>.</p>

<!-- more -->


<p><a href="https://github.com/aglover/droid-migrate">Droid Migrate</a> is a simple command line framework that generates and runs database migrations for your Android apps that use <a href="http://www.sqlite.org/">SQLite</a>. A migration is encapsulated by a <code>DBVersion</code> class that contains an <code>up</code> and <code>down</code> method. The <code>up</code> method is called for an upgrade and <code>down</code> for a rollback. What those methods do is entirely up to you.</p>

<p>In addition, Droid Migrate generates a <code>DatabaseHelper</code> class through which you obtain underlying connections to a SQLite instance -- this is <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html">the canonical way</a> to <a href="http://www.stevenmcmillan.co.uk/blog/2012/java-sqlite-database-helper-class-for-android/">interact with SQLite</a> in <a href="http://www.androidhive.info/2011/11/android-sqlite-database-tutorial/">an Android app</a> anyway, but with Droid Migrate, you get a specially enhanced <code>DatabaseHelper</code> that determines which version of a target database instance is the most current and runs the appropriate migrations to bring the database to that version.</p>

<p>Thus, with your newly minted <code>DatabaseHelper</code> class, you can still interact with your app's database like you would normally, however, by using this class, all migrations are handled for you. Allow me to demonstrate.</p>

<p><a href="https://github.com/aglover/tidbit">I've created a simple app</a> that doesn't interact with any database at this point -- it simply creates a <code>ListView</code> that is intended to hold a list of records for viewing. You can find this app on <a href="https://github.com/aglover/tidbit">Github</a> if you'd like to follow along. Nevertheless, the app's main Activity is shown below.</p>

<p>``` java Simple Android app w/o any SQLite logic
package com.b50.db.ex;</p>

<p>import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;</p>

<p>public class MainActivity extends Activity {</p>

<p>  protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
TextView textView = (TextView) findViewById(R.id.textView1);
textView.setText("This would be a list from a DB if there was a DB");
</code></pre>

<p>  }
}
```</p>

<p>What I'd like to do is add the ability to interact with a SQLite database; plus, I'd like to be able to evolve the data model on subsequent releases. This is where Droid Migrate shines.</p>

<p>After I've installed Droid Migrate (simply clone or download the code, build it, and put it into your <code>PATH</code> and create new environment variable dubbed <code>DROID_MIGRATE_HOME</code>), I can initialize my app to use Droid Migrate by opening up a terminal in the root of my app and typing:</p>

<p><code>bash Initializing Droid Migrate
$&gt; droid-migrate init -d a_catalog
</code></p>

<p>The <code>-d</code> flag specifies the name of my desired database. I can optionally provide a package name via the <code>-p</code> flag if I'd like my newly generated classes in a separate package from my main app.</p>

<p>If you take a look at your app's code, you should notice a number of new things. First, you'll see two new classes and a new jar file. The classes are the aforementioned <code>DatabaseHelper</code> and a class dubbed <code>DBVersion1</code>. The newly added jar file in your app's <code>libs</code> folder contains a few classes that correspond to Droid Migrate's runtime dependencies -- this jar is extremely compact at 4KB.</p>

<p>The <code>DatabaseHelper</code> class is brutally simple:</p>

<p>```java DatabaseHelper couldn't be any easier
package com.b50.db.ex;</p>

<p>import com.b50.db.ex.R;
import android.content.Context;
import com.b50.migrations.MigrationsDatabaseHelper;</p>

<p>public class DatabaseHelper extends MigrationsDatabaseHelper {</p>

<p>  public DatabaseHelper(Context context) {</p>

<pre><code>super(context, context.getString(R.string.database_name), null, 
  context.getResources().getInteger(R.integer.database_version), 
  context.getString(R.string.package_name));
</code></pre>

<p>  }
}
```</p>

<p>This class extends Droid Migrate's <code>MigrationsDatabaseHelper</code>, which ultimately extends Android's <code>SQLiteOpenHelper</code> so as I mentioned earlier, you've got everything you need to interact with SQLite at your fingertips via <code>DatabaseHelper</code>. If you look closely, you'll see that this class makes use of a specialized XML file (that is ultimately generated into your <code>R</code> class).</p>

<p>Take a look in the <code>res/values</code> folder and open up the newly created <code>migrations.xml</code> file. It should look something like this:</p>

<p>```xml migrations.xml contains database version, package name and database name
&lt;?xml version="1.0" encoding="utf-8"?>
<resources></p>

<pre><code>&lt;integer name="database_version"&gt;1&lt;/integer&gt;
&lt;string name="database_name"&gt;a_catalog&lt;/string&gt;
&lt;string name="package_name"&gt;com.b50.db.ex&lt;/string&gt;
</code></pre>

<p></resources>
```</p>

<p>Note the value of <code>database_version</code> -- it's 1. This corresponds to the <code>DBVersion1</code> class that was generated. Take a look at that class:</p>

<p>```java DBVersion1 is your initial migration class
package com.b50.db.ex;</p>

<p>import com.b50.migrations.AbstractMigration;</p>

<p>public class DBVersion1 extends AbstractMigration {</p>

<pre><code>public void up() {
    //execSQL("some sql create stmts");
}

public void down() {
    //execSQL("some delete sql stmts");
}
</code></pre>

<p>}
```</p>

<p>This class is where you implement your initial migration, which would create various tables and populate them. Use the <code>execSQL</code> method to pass in a valid SQL <code>String</code>. For example, I'll create an initial migration like so:</p>

<p>```java DBVersion1 is now implemented
package com.b50.db.ex;</p>

<p>import com.b50.migrations.AbstractMigration;</p>

<p>public class DBVersion1 extends AbstractMigration {</p>

<pre><code>public void up() {
    String create = "CREATE TABLE hops (_id integer  PRIMARY KEY AUTOINCREMENT DEFAULT NULL, name TEXT, description TEXT, substitutions TEXT DEFAULT '', alpha_acid TEXT DEFAULT '', beer_styles TEXT DEFAULT '', type TEXT DEFAULT '', user_notes TEXT DEFAULT '');";
    execSQL(create);
    String oneThing = "INSERT INTO 'hops' VALUES(1,'Amarillo','Spicy hop with mild bitterness and a noble aroma.  Good all around hop.','Cascade, Centennial','7 to 10','Ale, IPA','Aroma', '');";
    execSQL(oneThing);
}

public void down() {
    execSQL("DROP TABLE hops;");
}
</code></pre>

<p>}
```</p>

<p>As you can see, my <code>up</code> method creates a table and inserts one record. My <code>down</code> method rolls things back, which in this case means dropping the created table.</p>

<p>Now all I have to do is make use of my app's <code>DatabaseHelper</code> instance and Droid Migrate will ensure things are properly initialized. Therefore, I'll update the original Activity to display a list of what's in the database, which I know only to be one record based upon my initial migration.</p>

<p>```java Updated Activity to interact with SQLite
package com.b50.db.ex;</p>

<p>import android.app.Activity;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;</p>

<p>public class MainActivity extends Activity {</p>

<p>  protected SQLiteDatabase db;</p>

<p>  protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

this.db = (new DatabaseHelper(this)).getWritableDatabase();
ListView list = (ListView) findViewById(R.id.list);

ListAdapter adapter = getAdaptorForQuery("SELECT _id, name, description FROM hops ORDER BY name ASC", null);
list.setAdapter(adapter);
</code></pre>

<p>  }</p>

<p>  private ListAdapter getAdaptorForQuery(String queryString, String[] parameters) {</p>

<pre><code>Cursor cursor = this.db.rawQuery(queryString, parameters);
return new SimpleCursorAdapter(this, R.layout.list_item, cursor,
            new String[] { "name", "description" }, new int[] { R.id.hopName, R.id.description }, 0);
</code></pre>

<p>  }
}
```</p>

<p>As you can see from the code above, the app now makes a query to the underlying SQLite instance and builds a <code>ListView</code> from the result set of the query.</p>

<p>The key line is how the <code>SQLiteDatabase</code> instance is obtained: <code>this.db = (new DatabaseHelper(this)).getWritableDatabase();</code> -- that is where all the magic takes place. Droid Migrate passes along the version number to the Android platform and if there is a change, the Android platform will call a series of life-cycle methods, which Droid Migrate wires up with your migrations.</p>

<p>For instance, let's imagine that a subsequent release of this app adds more data to the <code>hops</code> table. Therefore, I'll generate a new migration. This is done by typing the following command within the root directory of your project like so:</p>

<p><code>bash Generating a new migration
$&gt; droid-migrate generate up
</code></p>

<p>The <code>up</code> flag signifies an increase in the database version (i.e. version++) and <code>down</code> indicates a rollback (i.e. version--). If you take a look at your app's code, you'll notice a new class: <code>DBVersion2</code> and your <code>migrations.xml</code> file has been updated: the <code>database_version</code> value is now 2.</p>

<p>I'll implement my <code>DBVersion2</code> class like so:</p>

<p>```java Implementing DBVersion2 to add one more row of data
package com.b50.db.ex;</p>

<p>import com.b50.migrations.AbstractMigration;</p>

<p>public class DBVersion2 extends AbstractMigration {</p>

<pre><code>public void up() {
    execSQL("INSERT INTO 'hops' VALUES(100,'Zythos','New IPA style hop blend created to optimize and exceed the aroma characteristics of the traditional, and sometimes hard to get, IPA hops.','Amarillo, Columbus, Cascade','9.5 to 12','IPAs','Bittering and Aroma', '');");
}

public void down() {
    execSQL("DELETE from 'hops' where _id = 100");
}
</code></pre>

<p>}
```</p>

<p>Now if I fire up my app, the <code>ListView</code> will have 2 items in it!</p>

<p><img class="center" src="/images/mine/migrate_2.png"></p>

<p>What about if you need to rollback? That's just as easy. Imagine that the addition of that second row of data was a gigantic mistake and instead I really only want one row (i.e. I only want the data originally created in <code>DBVersion1</code>). All I have to do is type within the root of my project:</p>

<p><code>bash Rollbacks in Droid Migrate are just as easy
$&gt; droid-migrate generate down
</code></p>

<p>After typing the above command, you should see the following output:</p>

<p><code>bash Rollback to version 1!
Generating a rollback migration...
Rolling back your migrations.xml file to indicate database version 1
Done!
</code></p>

<p>The only thing that'll change in your project is the <code>migrations.xml</code> file -- the <code>database_version</code> value will be rolled back to 1 (or what ever 1 minus the current version is).</p>

<p>Fire the app back up, and behold: one value is displayed because <code>DBVersion2</code>'s <code>down</code> method was executed!</p>

<p>Droid Migrate makes upgrades and rollbacks to your underlying SQLite database a breeze; what's more, it can handle upgrades or rollbacks beyond just one version. That is, if an app instance is upgraded from version 2 to version 6, each migration will be run in order (3, 4, 5, and 6). The same is true of a rollback.</p>

<p>If you are working with SQLite in an Android app, I highly recommend you take a look at <a href="https://github.com/aglover/droid-migrate">Droid Migrate</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile for the masses: Words and gestures with Overheard Word]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/01/mobile-for-the-masses-words-and-gestures-with-overheard-word/"/>
    <updated>2013-07-01T12:10:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/01/mobile-for-the-masses-words-and-gestures-with-overheard-word</id>
    <content type="html"><![CDATA[<p>The fourth article in <a href="http://www.ibm.com/developerworks/">IBM developerWorks</a>' series <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=mobile+for+the+masses">Mobile for the Masses</a> has been published! <a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html">This copasetic article</a> shows you how to take the Overheard Word demo app up a level with a JSON-based word engine and some prebaked, swipe-gesture functionality.</p>

<!-- more -->


<p>As the article summary states:</p>

<p><blockquote><p>You might feel like a kid in a candy store grabbing third-party code from GitHub or another repository, but there are still some tricks to integrating it with your Android UI. This month, Andrew Glover shows you how to take the Overheard Word demo app up a level with a JSON-based word engine and some prebaked, swipe-gesture functionality. As it turns out, Android easily accommodates third-party code, but you still have to do some careful logic if you want your app's UI to run it smoothly.</p><footer><strong>IBM DeveloperWorks</strong> <cite><a href='http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html'>Mobile for the Masses: Words and Gestures With Overheard Word</a></cite></footer></blockquote></p>

<p>Check out "<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html">Mobile for the masses: Mobile for the masses: Words and gestures with Overheard Word</a>" and programmatically integrate third-party code into your Android UI! If you missed the first article, check out "<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses1/">Mobile for the masses: A gentle introduction to Android</a>"; what's more, don't forget to read my second article, entitled "<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Mobile for the masses: Take a swipe at it! Programming gestures in Android</a>" and the third article "<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses3/index.html">Mobile for the masses: Activities and icons in your Android application lifecycle</a>".</p>

<p>Stay tuned for more articles in this series and don't forget to watch for <a href="http://thediscoblog.com/blog/categories/mobile/">mobile focused articles on this blog</a> as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android tip: ListView becomes black when scrolling]]></title>
    <link href="http://thediscoblog.com/blog/2013/06/27/android-tip-listview-becomes-black-when-scrolling/"/>
    <updated>2013-06-27T13:15:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/06/27/android-tip-listview-becomes-black-when-scrolling</id>
    <content type="html"><![CDATA[<p>One of <a href="https://play.google.com/store/apps/details?id=com.b50.hoproll">my Android apps</a> recently suffered from a nefariously ugly UI glitch that, embarrassingly, a user reported to me.  Strangely, this phenomenon did not surface itself in local testing on either emulators or devices when I first wrote the app; nevertheless, I was able to reproduce the error after the bug report came in. I suspect that recent updates in the Android platform might have exacerbated the issue for my app as I'm fairly certain I never saw it before.</p>

<!-- more -->


<p></p>

<p><a href="http://www.amazon.com/Beacon50-Hop-Roll/dp/B00A9Z5P42/ref=sr_1_1?ie=UTF8&amp;qid=1370959609&amp;sr=8-1&amp;keywords=hoproll">HopRoll</a> displays a ListView of hops and has a custom background like so:</p>

<p><img class="center" src="/images/mine/hop_roll_2.png"></p>

<p>When people scrolled through that list, however, they would see a nasty black partially rendered screen that made the app completely unusable as you can see below:</p>

<p><img class="center" src="/images/mine/hop_roll_1.png"></p>

<p>If you start to notice that your <a href="http://developer.android.com/reference/android/widget/ListView.html">ListView</a> containing custom backgrounds become <a href="http://android-developers.blogspot.com/2009/01/why-is-my-list-black-android.html">horribly black</a> when scrolling then you've got the same issue.</p>

<p>Luckily, it's quite easy to rectify. It turns out that when scrolling, there is some rendering magic going on that can obstruct the background in an ungainly way; you <a href="http://stackoverflow.com/questions/2833057/background-listview-becomes-black-when-scrolling">can fix it</a> by adding one line to the ListView's layout definition:</p>

<p><code>xml Adding this to your ListView Layout definition will fix the issue
android:cacheColorHint="@android:color/transparent"
</code></p>

<p>With that line in place, scrolling, once again, becomes clean and smooth.</p>

<p>You can find my app, Hop Roll, which is your go-to home brew resource for all hop related information on <a href="https://play.google.com/store/apps/details?id=com.b50.hoproll">Google Play</a> and <a href="http://www.amazon.com/Beacon50-Hop-Roll/dp/B00A9Z5P42/ref=sr_1_1?ie=UTF8&amp;qid=1370959609&amp;sr=8-1&amp;keywords=hoproll">Amazon's Android App Store</a> -- keep on trucking, baby!</p>
]]></content>
  </entry>
  
</feed>
