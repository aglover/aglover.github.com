<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2015-02-09T18:33:23-08:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuous Integration is a hack!]]></title>
    <link href="http://thediscoblog.com/blog/2014/12/30/continuous-integration-is-a-hack/"/>
    <updated>2014-12-30T15:21:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2014/12/30/continuous-integration-is-a-hack</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/surprised-little-boy1.jpg">"<a href="http://www.amazon.com/gp/product/0321336380?ie=UTF8&amp;tag=thdibl-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321336380">Continuous Integration</a> is a hack!" said my friend <a href="https://twitter.com/benrady">Ben Rady</a> years ago during a discussion on CI hosted by <a href="http://www.stelligent.com/">Stelligent</a>. At the time, I was incredulous! How dare someone question the value of CI, especially when we had just finished writing a book about it! What's more, our book had been nominated for a prestigious <a href="http://en.wikipedia.org/wiki/Jolt_Awards">Jolt award</a>; indeed, <a href="http://www.drdobbs.com/tools/winners-of-the-18th-jolt-product-excelle/207600666?pgno=2">the following day, our CI book won it</a>!</p>

<p>In retrospect, Ben's point was poignant: CI is <em>reactionary</em>. You still have to wait some amount of time to ascertain correctness. That is, CI implicitly relies on a passive process to run a project's build and any corresponding tests. If those tests fail, you are of course, notified. Nevertheless, that notification is somewhat delayed: by the time a CI process runs the tests and reports on their status, you've already moved on to the next task. So much for failing fast!</p>

<!-- more -->


<p>On the other hand, if tests, which are arguably the <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=code+quality:">quintessential proof of valid integration</a>, are run <em>continuously</em>, then there's no wait time to ascertain issues! Ben's stance is really no surprise (especially if you know him) as he went on to play a major role in <a href="https://infinitest.github.io/">Infinitest</a> and co-author <a href="http://www.amazon.com/gp/product/1934356700/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356700&amp;linkCode=as2&amp;tag=thdibl-20&amp;linkId=B53N2UWBWAKQNAVH">Continuous Testing: with Ruby, Rails, and JavaScript</a>. I've come to realize Ben's wisdom since then and have become a huge fan of Continuous Testing.</p>

<iframe style="float: right; margin-left: 1.5em; margin-top: 1.0em; width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://thediscoblog.com//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=thdibl-20&marketplace=amazon&region=US&placement=1934356700&asins=1934356700&linkId=R2TMR5VSJAZVXCTS&show_border=true&link_opens_in_new_window=true">
</iframe>


<p> A more proactive means to ensuring all is kosher with a code base is to continuously run your tests as you work. In fact, an even more superior process would be to run any tests for code that has changed. That is, once a mapping has been established between code under test and a corresponding test, then when that code changes, the quickest, arguably most effective way to ensure that code isn't broken is to run its test(s).</p>

<p>One efficient way to ascertain mapping is to name tests after the code they verify proceeded with a <code>test</code> moniker. For example, an <code>Account</code> object would have its corresponding test called <code>AccountTest</code> (or <code>AccountSpec</code>, etc). Any time the <code>Account</code> object changes, then the <code>AccountTest</code> would be run.</p>

<p><a href="http://www.amazon.com/gp/product/1934356700/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356700&amp;linkCode=as2&amp;tag=thdibl-20&amp;linkId=FUVGSKMDG7GWI3CB">Continuous Testing</a> is an established practice in the world of Ruby. A great framework that facilitates it is called <a href="http://www.javaworld.com/article/2074593/core-java/continuous-android-testing-with-guard.html">Guard</a>. Briefly, <a href="https://github.com/guard/guard">Guard</a> is a framework for watching a file system and sending out a notification upon some event (like a change).  With Guard, you can define specific file matching patterns and a corresponding action to take when an event is triggered. You can probably see that this linkage facilitates running tests continuously.</p>

<p>There's really no corollary framework or tool in Java (other than Infinittest and other IDE tools). Nevertheless, you can use Guard to continuously test a <a href="http://thediscoblog.com/blog/categories/java/">Java</a> project. I wrote about <a href="http://www.javaworld.com/article/2074593/core-java/continuous-android-testing-with-guard.html">how to do it with an Android over two years ago</a> and about 6 months ago I got involved in a Guard plugin for Gradle, dubbed <a href="https://github.com/bricker/guard-gradle">Guard::Gradle</a>.</p>

<p>To use Guard::Gradle, you'll need to have <a href="http://thediscoblog.com/blog/categories/ruby/">Ruby</a> installed. For those on <a href="http://thediscoblog.com/blog/categories/osx/">OSX</a>, you already have Ruby. Once you have Ruby installed, the installation of Guard::Gradle couldn't be more easy: just open up a terminal in your desired Gradle project and type:</p>

<p><code>bash Simple installation!
$ curl https://raw.githubusercontent.com/bricker/guard-gradle/master/etc/installer.sh | bash -
</code></p>

<p>The above command will download a script and execute it. That script will:</p>

<ul>
<li>Install Ruby's <a href="http://bundler.io/">Bundler</a></li>
<li>Install the Guard::Gradle plugin</li>
<li>Create a default <code>Guardfile</code></li>
<li>Create a Guard launcher script, dubbed <code>guard.sh</code></li>
</ul>


<p>Therefore, after you run the above command, just execute <code>guard.sh</code> to start Guard::Gradle! Any time you change a file in your source tree, a <a href="http://www.ibm.com/developerworks/java/library/j-cq10316/">corresponding test</a> will be executed using the Gradle <code>test</code> task.</p>

<p>The default <code>Guardfile</code> assumes a standard Gradle project setup, with source code located in <code>src/main</code>. In fact, if you are  curious, take a look at the generated <code>Guardfile</code> and you'll see:</p>

<p><code>ruby Default Guard::Gradle Guardfile
guard :gradle do
  watch(%r{^src/main/(.+)\.*$}) { |m| m[1].split('.')[0].split('/')[-1] }
end
</code></p>

<iframe style="float: left; margin-right: 1.5em; margin-top: 0.7em; margin-bottom: 0.5em; width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="http://thediscoblog.com//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&OneJS=1&Operation=GetAdHtml&MarketPlace=US&source=ss&ref=ss_til&ad_type=product_link&tracking_id=thdibl-20&marketplace=amazon&region=US&placement=0321336380&asins=0321336380&linkId=GQYZOKPUZCUVELWX&show_border=true&link_opens_in_new_window=true">
</iframe>


<p>That <code>watch</code> command examines the <code>src/main</code> directory and attempts to execute a matched file's test. If no test is found, all tests are run. So either way, if a change happens, you're <a href="http://www.ibm.com/developerworks/java/library/j-cq01316/index.html">covered with some amount of tests</a>.
which ostensibly updates your local directory with all <a href="http://thediscoblog.com/blog/categories/git/">upstream changes</a>). Consequently, if upstream changes have broken your local branch, you'll know instantly. No more need to remember to "run the tests" -- they're <em>always</em> running.</p>

<p>Of course, Continuous Integration isn't a hack. But Ben made a prescient point back then: if you want to fail fast and shorten the time to detect failures, why not do it at the source? Why not know instantly while you're working instead of some later time after you've moved on? Assuming your <a href="http://thediscoblog.com/blog/categories/tdd/">project has tests</a>, then Continuous Testing is the answer. Continuous Testing is the proactive yin to CI's reactive yang.</p>

<p>Check out <a href="https://github.com/bricker/guard-gradle">Guard:Gradle</a> today and know <em>instantly</em> when you've made a breaking change! Now that's something everyone can dig, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schooled in ping pong]]></title>
    <link href="http://thediscoblog.com/blog/2014/04/01/schooled-in-ping-pong/"/>
    <updated>2014-04-01T20:53:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2014/04/01/schooled-in-ping-pong</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/pingpong.jpg">Years ago, a <a href="http://www.pauljulius.com/">good friend of mine</a> taught me an effective pair programming technique that results in universally covered code. What's more, this manner of pairing ultimately made me a better developer as I learned myriad different coding skills from my coding partner, ranging from testing techniques, defensive coding, and encapsulation, just to name a few.</p>

<p>A lot of my coding practices today can be traced to tactics I learned from playing what's known as <em>ping pong</em>.</p>

<!-- more -->


<p>What's <a href="http://c2.com/cgi/wiki?PairProgrammingPingPongPattern">ping pong</a> you ask? It's a pair programming approach that's absurdly simple:</p>

<ol>
<li>You write a failing test.</li>
<li>Your crony writes just enough code to make that test pass.</li>
<li>Your crony writes an additional failing test.</li>
<li>You write just enough code to make that new failing test pass.</li>
<li>Repeat (and refactor as needed).</li>
</ol>


<p>It's that easy. The beauty of this process is that by limiting your coding to <em>just enough logic</em> to make a test pass, followed up with an additional test that <em>must fail</em> (which is thereby testing something new) you end up with 100% code coverage. What's more, you don't end up writing a lot of superfluous code.</p>

<h4>Show me the money</h4>

<p>Let me show you how it works. My fictitious ping pong pairing, with Frank and Glenn, will focus on creating a calculator that can add 2 numbers in <a href="http://thediscoblog.com/blog/categories/coffeescript/">CoffeeScript</a>.</p>

<p>Step 1 is to write a failing test. Accordingly, Frank crafts a test in <a href="http://visionmedia.github.io/mocha/">Mocha</a> with the expectation that 1 and 4 make 5.</p>

<p>``` javascript Step 1: a failing test
require 'should'
require 'mocha'</p>

<p>describe 'a calculator', -></p>

<pre><code>describe 'the addition function', -&gt;
    it 'should support adding 2 positive numbers', -&gt;
        calculator = new Calculator
        value = calculator.add(1, 4)
        value.should.equal 5
</code></pre>

<p>```</p>

<p>Glenn runs the test and is immediately presented with an error:</p>

<p><code>bash Oh no!
1) a calculator the addition function should support adding 2 positive numbers:
   ReferenceError: Calculator is not defined
</code></p>

<p>"No problem" thinks Glenn and he adds the following line of code to the top of the test:</p>

<p><code>javascript Import it, baby
Calculator = require 'Calculator'
</code></p>

<p>Glenn knew this wouldn't make the test pass, but he recognized that the error he saw was related to the fact that <code>Calculator</code> wasn't defined in the test. One problem has been licked, but he knows another one exists. Nevertheless, he runs the test again.</p>

<p><code>bash Still erroring out?
Error: Cannot find module 'Calculator'
</code></p>

<p>Glenn's one step closer to making the test pass -- he must define a <code>Calculator</code> class. Here, Glenn decides to write the <em>absolute minimum amount of code</em> to make the test pass:</p>

<p>``` javascript As easy as it gets
class Calculator</p>

<pre><code>add: (x, y) -&gt;
    5
</code></pre>

<p>module.exports = Calculator
```</p>

<p>Glenn now proceeds to run the test.</p>

<p>``` bash And it passes!
a calculator</p>

<pre><code>the addition function
  ✓
</code></pre>

<p>```</p>

<p>Step 2 is now complete: Glenn has written the minimum amount of code to make Frank's test pass. Now Glenn must write a new test that fails.</p>

<p>Accordingly, for step 3, Glenn decides to do a bit of refactoring of the test and adds the following logic:</p>

<p>``` javascript Step 3: A newly failing test
require 'should'
require 'mocha'
Calculator = require 'Calculator'</p>

<p>describe 'a calculator', -></p>

<pre><code>describe 'the addition function', -&gt;
    it 'should support adding 2 positive numbers', -&gt;
      inputs = [{x: 1, y: 2, ans: 3}, {x: 1, y: 4, ans: 5}]
      calculator = new Calculator
      for input in inputs
        calculator.add(input['x'], input['y']).should.equal input['ans']
</code></pre>

<p>```</p>

<p>Frank runs the test and, indeed, the two intrepid developers are presented with a new error:</p>

<p>``` bash Without a surprise, it fails
a calculator</p>

<pre><code>the addition function
  1) should support adding 2 positive numbers
</code></pre>

<p>  0 passing (5ms)
  1 failing</p>

<p>  1) a calculator the addition function should support adding 2 positive numbers:</p>

<pre><code> AssertionError: expected 5 to equal 3
</code></pre>

<p>```</p>

<p>But Frank's no fink. He quickly corrects the state of failing code with a simple change to the <code>Calculator</code>.</p>

<p>``` javascript Addition at its finest
class Calculator
  add: (x, y) -></p>

<pre><code>x + y
</code></pre>

<p>module.exports = Calculator
```</p>

<p>He reruns the test and, not surprisingly, everything is kosher. Now it's Frank's turn for a bit of sadism, so he refactors the test slightly but throwing in a random <code>String</code>.</p>

<p>``` javascript Tricky, Frank. Tricky.
require 'should'
require 'mocha'
Calculator = require 'Calculator'</p>

<p>describe 'a calculator', -></p>

<pre><code>describe 'the addition function', -&gt;
    it 'should support adding 2 positive numbers', -&gt;
      inputs = [{x: 1, y: 2, ans: 3}, {x: 1, y: 4, ans: 5}, {x: '1', y: 4, ans: 5}]
      calculator = new Calculator
      for input in inputs
        calculator.add(input['x'], input['y']).should.equal input['ans']
</code></pre>

<p>```</p>

<p>Naturally, the test fails with the not too strange result of <code>AssertionError: expected '14' to equal 5</code>.</p>

<p>Glenn, feeling fiendish, goes to work by enhancing the <code>Calculator</code> <em>ever so slightly</em>.</p>

<p>``` javascript Why just x?
class Calculator
  add: (x, y) -></p>

<pre><code>new Number(x) + y
</code></pre>

<p>module.exports = Calculator
```</p>

<p>The addition of the <code>Number</code> type for <em>x only</em> fixes Frank's tricky test. Time to write a failing test. In what should be no big surprise, Glenn simply adds an additional associative array which contains <em>two</em> <code>String</code>s.</p>

<p>This step might seem pedestrian, but it's deliberate: by only writing the minimum amount of code required to make a test pass and following that step up with an additional test, Glenn's villainous coding behavior is ensuring every logical path through the evolving code is covered by a test.</p>

<p>Naturally, once Glenn's new associative array is forcing a failure, Frank updates the <code>add</code> method to make the <code>y</code> input parameter a <code>Number</code> as well. Frank then proceeds to add a few more values to the <code>inputs</code> array.</p>

<p>``` javascript Let's see if you can make it fail now!
require 'should'
require 'mocha'
Calculator = require 'Calculator'</p>

<p>describe 'a calculator', -></p>

<pre><code>describe 'the addition function', -&gt;
    it 'should support adding 2 positive numbers', -&gt;
      inputs = [{x: 1, y: 2, ans: 3}, 
         {x: 1, y: 4, ans: 5}, 
         {x: '1', y: 4, ans: 5},
         {x: '1', y: '4', ans: 5},
         {x: -1, y: 4, ans: 3},
         {x: 1.5, y: 4, ans: 5.5}]
      calculator = new Calculator
      for input in inputs
        calculator.add(input['x'], input['y']).should.equal input['ans']  
</code></pre>

<p>```</p>

<p>He runs the test hoping for a failure, but to no avail. Time to think a bit harder. Time to embrace one's inner sadistic troll. He then adds the following associative array to the <code>inputs</code> array: <code>{x: 1.5, y: null, ans: 1.5}</code>. Yet, the test still passes.</p>

<p>It's at this point that both Frank and Glenn feel they're done: <code>add</code> works to their expectations. If they wanted to go on, Frank could proceed to write a failing test for a <code>subtract</code> function and so on.</p>

<h4>It's a learning experience</h4>

<p>Interestingly, Frank learned a new way to approach testing from Glenn. When Glenn introduced the array of associative arrays, Frank was initially surprised. He figured it would be easier to write an additional test case. He even pointed that out to Glenn.  But Glenn countered that more <code>it</code> phrases don't necessarily mean better tests; and besides, using his method of iterating over a series of values provided them with a lot of flexibility <em>without</em> a lot of boiler plate code -- something Frank agreed with. Accordingly, Frank learned a new way of thinking about testing -- make a single test a bit more powerful by using a series of values rather than making a lot of similar tests.</p>

<p>Frank also learned a bit of coding patience. He was initially annoyed when Glenn only updated <code>x</code> to use a <code>Number</code> type and completely ignored <code>y</code>. He accosted Glenn: "Update <code>y</code> too?!" to which Glenn countered that the only amount of code he needed to write to make Frank's test pass. Frank then saw that his tricky test case with only 1 <code>String</code> input was essentially inadequate.</p>

<h4>Benefits and costs</h4>

<p>Ping pong pairing is a methodically deliberate manner of programming that forces you to be extremely patient, because you are limited to write the least amount of code to make a test pass <em>and no more</em>. And while it might seem like this process is a slow way to get things done, the benefits far outweigh the costs.</p>

<p>For one thing, two chums practicing ping pong will produce well tested functionality. Second, they'll produce this functionality in a lot fewer lines of code than if they had done it otherwise. That's a good thing and I've seen this result consistently. There's one thing that I've come to learn: less working code is better than more. And pay attention here: producing fewer lines of working code usually means you have more tests than the code those tests are validating.</p>

<p>Additionally, this technique forces developers to learn from each other. Every developer has a great coding facility up their sleeves and every developer can learn something <em>new</em>.</p>

<p>Finally, ping pong results in two parties having an intimate knowledge of code. Two is better than one, in my book.</p>

<h4>Ping pong style</h4>

<p>I've found that ping pong is best practiced <a href="http://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro style</a> -- ping pong isn't something you can do all day, nor would I recommend you do so. Do it for 20 to 25 minutes then take a break and figure out if it was valuable or not. Chances are you'll find it was a worthwhile investment in time and you'll elect to do it again later in the day or another time.</p>

<p>Make no mistake: holding back the urge to loquaciously code away takes a lot of discipline and practice. But ping pong <em>will make you a better programmer</em> even if you only do it once in a while.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review: Instant Mockito]]></title>
    <link href="http://thediscoblog.com/blog/2013/11/22/book-review-instant-mockito/"/>
    <updated>2013-11-22T13:33:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/11/22/book-review-instant-mockito</id>
    <content type="html"><![CDATA[<p>Recently, the good folks over at <a href="http://www.packtpub.com/">Packt Publishing</a> gave me a copy of their newly published <a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a>, by <a href="http://toomuchcoding.blogspot.com/">Marcin Grzejszczak</a>. Packt's <a href="http://www.packtpub.com/books/instant">Instant series</a> are really enjoyable. The premise of these books is that they're short and sweet. They're slightly more than a tutorial; they get you up and running quickly while throwing in a few more facets that go beyond the typical tutorial.</p>

<!-- more -->


<p></p>

<iframe style="float: right; margin-left: 1.5em; height:260px; width:150px;" src="http://rcm-na.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=thdibl-20&o=1&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00ESX15M2" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p><a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a> is a quick read at 92 pages; what's more, Marcin does a great job of keeping a consistent example domain alive throughout the entire book. The big picture is how to use <a href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/">Mockito</a> with <a href="http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer/">JUnit</a>, testing a fictitious restaurant ordering system.</p>

<p>The format of Packt's Instant books are all similar — the first part is a quick "up and running" that essentially encapsulates the basic tutorial you can find on a project's home page. The meat of an Instant book comes next, where the author dives into a number of features they feel are important to grasp a particular subject.</p>

<p>In the case of <a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book">Marcin's book</a>, he elaborates on 8 key Mockito subjects:</p>

<ul>
<li>Performing argument matching</li>
<li>Stubbing multiple calls</li>
<li>Working with void methods and thrown exceptions</li>
<li>Stubbing with a custom answer</li>
<li>Verifying behavior (including argument capturing, verifying call order, and working with asynchronous code)</li>
<li>Doing partial mocking (spying)</li>
<li>Reducing boilerplate code with annotations</li>
<li>Taking advantage of advanced mocks configuration</li>
</ul>


<p>Again, each subject expands upon a waiter-taking-an-order domain. As this is a book focusing on Mockito, the mocking aspects are straightforward — this isn't a book on how to test poorly written code, for example, so the code under test in this case uses dependency injection. This makes it easy to grasp Mockito subjects without having to delve into the intricacies of terrible code (ironically, I often times find myself employing Mockito when dealing with poorly written code).</p>

<p>Speaking of poorly written code: the only thing I did not particularly enjoy about the book was the formatting of the code. Code formatting has always been problematic in books, however, many publishers have figured out how to properly convey code (in particular, <a href="http://www.oreilly.com/">O'Reilly</a> books do a good job).</p>

<p>In the case of <a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a>, the code examples (at least reading the epub version on my iPad) have such narrow margins that each logical line of code is often broken into 3 or more lines (and dashes are used to signify a line break). While it certainly doesn't render the code unreadable, it makes instant code comprehension challenging. I found myself having to read through each code example multiple times just to get the basic idea.</p>

<p>Code formatting aside, <a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book">Marcin's book was an easy read</a> and the 8 features he feels every Mockito user should know are well explained.  As a user of Mockito, I couldn't agree more with the relevance of these features. If you enjoy quick reads, want to learn the basics of mocking in JUnit with Mockito, and you can put up with inadequate code formatting, then go ahead and give <a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a> a read!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes TDD requires a hammer]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer/"/>
    <updated>2013-08-04T11:08:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/hammerj.jpg">While there are myriad mocking libraries available for the Java platform, only a select few of these nifty frameworks is capable of mocking the non-mock-friendly modifiers of <code>static</code> and <code>final</code>. Static (or class) methods, while handy for factories, become a nuisance for a framework like <a href="https://code.google.com/p/mockito/">Mockito</a>, however, with the inclusion of <a href="https://code.google.com/p/powermock/">PowerMock</a>, you've got yourself a proverbial hammer.</p>

<p><a href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/">As I wrote about previously</a>, I had to deal with a 3rd party library that is used to integrate with a networked service. This library is essentially hardwired to interact with homebase, which naturally provides some challenges when trying to test ones code that relies on this library. Moreover, the said library contained a <code>static</code> method for creating instances of a specialized class, which, naturally, my code depended on.</p>

<!-- more -->


<p>PowerMock is made to work in concert with either <a href="http://easymock.org/">EasyMock</a> or <a href="https://code.google.com/p/powermock/wiki/MockitoUsage13">Mockito</a>; what's more, it comes with a custom runner for inclusion in <a href="https://github.com/junit-team/junit">JUnit</a>. I'm going to show you how to use PowerMock with Mockito as I happen to find Mockito's syntax much more fluent than EasyMock's.</p>

<p>For starters, you'll need to use two class level annotations -- <code>@RunWith</code> for specifying the <code>PowerMockRunner</code> class (this is a JUnit annotation) and another dubbed <code>@PrepareForTest</code>, which takes the class with <code>static</code> methods you wish to mock. <code>@PrepareForTest</code> is provided by PowerMock.</p>

<p>In my case, the class containing a <code>static</code> method is named <code>QTP</code>, accordingly; my test class looks like this:</p>

<p><code>java JUnit test class with class level annotations
@RunWith(PowerMockRunner.class)
@PrepareForTest(QTP.class)
public class CreateCommandTest {
  @Test
  public void testCreateRequest() throws Exception {}
}
</code></p>

<p>Next, in your test method, you use <code>PowerMokito</code>'s <code>mockStatic</code> method, which takes the class (again) with static methods you wish to mock.</p>

<p><code>java JUnit test case using PowerMock &amp; Mockito
@Test
public void testCreateRequest() throws Exception {
  PowerMockito.mockStatic(QTP.class);
  //....
}
</code></p>

<p>You can then mock a static method on the class you've been passing around to <code>mockStatic</code> and the <code>@PrepareForTest</code> annotation like you would normally do with Mockito. For instance, I can use the <code>when</code> method to specify what I want to happen when this static method is invoked.</p>

<p><code>java Using normal Mockito actions for mocking
@Test
public void testCreateRequest() throws Exception {
  PowerMockito.mockStatic(QTP.class);
  QTP qtpThing = mock(QTP.class); //normal Mockito mocking
  //QTP.create is static
  when(QTP.create("dm2q", "0C4F7501UDC8C1EB43B06C988")).thenReturn(qtpThing);
  //QTP.createRecord isn't static
  when(qtpThing.createRecord(any(Tckt.class))).thenReturn(new Long(1000000L));
  //...
}
</code></p>

<p>Finally, you can use <a href="http://metlos.wordpress.com/2012/09/14/the-dark-powers-of-powermock/">PowerMock</a> to ensure your mocked static method is actually invoked. The requirements here are a bit funky; that is, it requires you <em>first</em> specify how many times with one line of code and then you <em>actually call the static method</em>.</p>

<p><code>java Verifying your mocked static method was invoked
@Test
public void testCreateRequest() throws Exception {  
  //...
  PowerMockito.verifyStatic(Mockito.times(1));
  QTP.create("dm2q", "0C4F7501UDC8C1EB43B06C988");
  //...
}
</code></p>

<p>Yeah, that's sorta confusing, I know.</p>

<p>Nevertheless, as most people in the world of Java figured out long ago, <a href="http://stackoverflow.com/questions/2671496/java-when-to-use-static-methods">static methods</a> are <a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/">somewhat difficult</a> when it <a href="http://blog.codecentric.de/en/2011/11/testing-and-mocking-of-static-methods-in-java/">comes to testing</a>. That is, while a method that conceptually has no state, at first glance, seems straightforward enough to test, the <a href="http://stackoverflow.com/questions/2472690/in-java-is-there-any-disadvantage-to-static-methods-on-a-class">issues arise</a> when that static method does something like hit a database or in my case, call a web service to a networked asset. There is no easy way to override such behavior (unless, of course, you pull out a hammer).</p>

<p>Static methods have a place. But when it comes to testing code, whether it be legacy or some 3rd party library, the <code>static</code> modifier requires a hammer and as I hope I've shown you, <a href="https://code.google.com/p/powermock/">PowerMock</a> is that hammer.</p>
]]></content>
  </entry>
  
</feed>
