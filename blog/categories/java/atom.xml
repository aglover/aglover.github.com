<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2013-09-17T15:30:49-04:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobile for the masses: Sign, seal, and deliver your Android app]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/17/mobile-for-the-masses-sign-seal-and-deliver-your-android-app/"/>
    <updated>2013-09-17T15:20:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/17/mobile-for-the-masses-sign-seal-and-deliver-your-android-app</id>
    <content type="html"><![CDATA[<p>The fifth article in <a href="http://www.ibm.com/developerworks/">IBM developerWorks</a>' series <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=mobile+for+the+masses">Mobile for the Masses</a> has been published! <a href="http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html">This hip article</a> shows you how to add a multiple-choice quiz to your Android mobile app, then sign it with a secure digital certificate.</p>

<!-- more -->


<p>As the article summary states:</p>

<p><blockquote><p>By web logic, content is king; but for mobile users, interaction rules. Static information design is out for mobile apps, and gamification is in. This month Andrew Glover concludes his introduction to Android mobile development by adding a multiple-choice quiz feature to the example app, Overheard Word, introduced in a previous article. Then he shows you how to generate a digital signature and publish and promote your signed app on Google Play or Amazon Appstore for Android.</p><footer><strong>IBM DeveloperWorks</strong> <cite><a href='http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html'>Mobile for the Masses: Sign, Seal, and Deliver Your Android App</a></cite></footer></blockquote></p>

<p>Check out "<a href="http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html">Mobile for the masses: Sign, seal, and deliver your Android app</a>" and learn how to sign your app in preparation for submitting it to an app store! If you missed the first article, check out "<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses1/">Mobile for the masses: A gentle introduction to Android</a>"; what's more, don't forget to read my second article, entitled "<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Mobile for the masses: Take a swipe at it! Programming gestures in Android</a>" and the third article "<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses3/index.html">Mobile for the masses: Activities and icons in your Android application lifecycle</a>". Finally, don't forget to read article number four: "<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html">Mobile for the masses: Mobile for the masses: Words and gestures with Overheard Word</a>" and programmatically integrate third-party code into your Android UI!</p>

<p>Stay tuned for more articles in this series and don't forget to watch for <a href="http://thediscoblog.com/blog/categories/mobile/">mobile focused articles on this blog</a> as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes TDD requires a hammer]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer/"/>
    <updated>2013-08-04T11:08:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/hammerj.jpg">While there are myriad mocking libraries available for the Java platform, only a select few of these nifty frameworks is capable of mocking the non-mock-friendly modifiers of <code>static</code> and <code>final</code>. Static (or class) methods, while handy for factories, become a nuisance for a framework like <a href="https://code.google.com/p/mockito/">Mockito</a>, however, with the inclusion of <a href="https://code.google.com/p/powermock/">PowerMock</a>, you've got yourself a proverbial hammer.</p>

<p><a href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/">As I wrote about previously</a>, I had to deal with a 3rd party library that is used to integrate with a networked service. This library is essentially hardwired to interact with homebase, which naturally provides some challenges when trying to test ones code that relies on this library. Moreover, the said library contained a <code>static</code> method for creating instances of a specialized class, which, naturally, my code depended on.</p>

<!-- more -->


<p>PowerMock is made to work in concert with either <a href="http://easymock.org/">EasyMock</a> or <a href="https://code.google.com/p/powermock/wiki/MockitoUsage13">Mockito</a>; what's more, it comes with a custom runner for inclusion in <a href="https://github.com/junit-team/junit">JUnit</a>. I'm going to show you how to use PowerMock with Mockito as I happen to find Mockito's syntax much more fluent than EasyMock's.</p>

<p>For starters, you'll need to use two class level annotations -- <code>@RunWith</code> for specifying the <code>PowerMockRunner</code> class (this is a JUnit annotation) and another dubbed <code>@PrepareForTest</code>, which takes the class with <code>static</code> methods you wish to mock. <code>@PrepareForTest</code> is provided by PowerMock.</p>

<p>In my case, the class containing a <code>static</code> method is named <code>QTP</code>, accordingly; my test class looks like this:</p>

<p><code>java JUnit test class with class level annotations
@RunWith(PowerMockRunner.class)
@PrepareForTest(QTP.class)
public class CreateCommandTest {
  @Test
  public void testCreateRequest() throws Exception {}
}
</code></p>

<p>Next, in your test method, you use <code>PowerMokito</code>'s <code>mockStatic</code> method, which takes the class (again) with static methods you wish to mock.</p>

<p><code>java JUnit test case using PowerMock &amp; Mockito
@Test
public void testCreateRequest() throws Exception {
  PowerMockito.mockStatic(QTP.class);
  //....
}
</code></p>

<p>You can then mock a static method on the class you've been passing around to <code>mockStatic</code> and the <code>@PrepareForTest</code> annotation like you would normally do with Mockito. For instance, I can use the <code>when</code> method to specify what I want to happen when this static method is invoked.</p>

<p><code>java Using normal Mockito actions for mocking
@Test
public void testCreateRequest() throws Exception {
  PowerMockito.mockStatic(QTP.class);
  QTP qtpThing = mock(QTP.class); //normal Mockito mocking
  //QTP.create is static
  when(QTP.create("dm2q", "0C4F7501UDC8C1EB43B06C988")).thenReturn(qtpThing);
  //QTP.createRecord isn't static
  when(qtpThing.createRecord(any(Tckt.class))).thenReturn(new Long(1000000L));
  //...
}
</code></p>

<p>Finally, you can use <a href="http://metlos.wordpress.com/2012/09/14/the-dark-powers-of-powermock/">PowerMock</a> to ensure your mocked static method is actually invoked. The requirements here are a bit funky; that is, it requires you <em>first</em> specify how many times with one line of code and then you <em>actually call the static method</em>.</p>

<p><code>java Verifying your mocked static method was invoked
@Test
public void testCreateRequest() throws Exception {  
  //...
  PowerMockito.verifyStatic(Mockito.times(1));
  QTP.create("dm2q", "0C4F7501UDC8C1EB43B06C988");
  //...
}
</code></p>

<p>Yeah, that's sorta confusing, I know.</p>

<p>Nevertheless, as most people in the world of Java figured out long ago, <a href="http://stackoverflow.com/questions/2671496/java-when-to-use-static-methods">static methods</a> are <a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/">somewhat difficult</a> when it <a href="http://blog.codecentric.de/en/2011/11/testing-and-mocking-of-static-methods-in-java/">comes to testing</a>. That is, while a method that conceptually has no state, at first glance, seems straightforward enough to test, the <a href="http://stackoverflow.com/questions/2472690/in-java-is-there-any-disadvantage-to-static-methods-on-a-class">issues arise</a> when that static method does something like hit a database or in my case, call a web service to a networked asset. There is no easy way to override such behavior (unless, of course, you pull out a hammer).</p>

<p>Static methods have a place. But when it comes to testing code, whether it be legacy or some 3rd party library, the <code>static</code> modifier requires a hammer and as I hope I've shown you, <a href="https://code.google.com/p/powermock/">PowerMock</a> is that hammer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imbibing the fluency of Mockito]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/"/>
    <updated>2013-08-01T15:37:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/Mockito.jpg">I recently found myself writing some code to integrate two disparate platforms. One of these systems is Java based and the other, while not written in Java, offers a Java API. I'll call these systems Foo and Bar, respectively.</p>

<p>It became obvious before I had written a line of code, however, that testing the eventual adapter would require I explicitly mock the later system's API (i.e. Foo's) as all I had to go with was a jar file whose classes and methods made it clear they communicated with a live instance.</p>

<!-- more -->


<p></p>

<p>I spent a few cycles to see what's new in the world of Java mocking and I was pleased to see that my old friend <a href="https://code.google.com/p/mockito/">Mockito</a> is still active and is indeed, still an <a href="http://www.javaworld.com/community/node/3772">excellent tool</a> for general purpose mocking. For the uninitiated, <a href="http://refcardz.dzone.com/refcardz/mockito">Mockito</a> is Java based mocking framework that:</p>

<p><blockquote><p>...tastes really good. It lets you write beautiful tests with [a] clean &amp; simple API. Mockito doesn't give you hangover because the tests are very readable and they produce clean verification errors.</p><footer><strong>Google code mockito project page</strong> <cite><a href='https://code.google.com/p/mockito/'>Why Drink It?</a></cite></footer></blockquote></p>

<p>Indeed, Mockito offers a <a href="https://code.google.com/p/easyb/wiki/UsingMockito">simple, fluent API</a> that allows you to precisely mock behaviors without a lot of fuss. For instance, the main facade to interface with Bar is via a <code>QTP</code> class that has methods like <code>logIn</code>, <code>logOut</code>, etc. Rather than relying on classes under test to actually invoke these methods, I can easily create mock instances of <code>QTP</code> with Mockito like so:</p>

<p><code>java Mocking an instance of QTP
QTP qtpThing = mock(QTP.class);
</code></p>

<p>Where <code>mock</code> is a statically imported method from <code>org.mockito.Mockito</code>. With a mock instance, I can then dictate how I wish certain methods to behave, <em>provided I pass along this mocked instance to my classes under test</em>.</p>

<p>For example, the method <code>logIn</code> doesn't return anything; in fact, one must invoke that method first and then call another method to generate a ticket (or token), which will be used on subsequent method invocations. Thus, the adapter that I'm writing will receive some input values (from Foo in the form of XML) and the adapter will return a ticket (in the form of an XML document as per Foo's required XML schema).</p>

<p>Accordingly, the test this interaction, I need to do two things:</p>

<ul>
<li>ensure that the <code>logIn</code> method was invoked with specific parameters</li>
<li>mock the response of a valid ticket, via the <code>getTicket</code> method</li>
</ul>


<p>What's more, I'd also like to verify that a <code>logIn</code> failure results in a particular interaction from within my adapter code. Therefore, I'll need to mock out some exceptional behavior as well.</p>

<p>In the case of mocking out a particular method, you simply chain together a few methods; in my case, <code>when</code> and <code>thenReturn</code> do the trick like so:</p>

<p><code>java Mocking the behavior of getTicket
when(qtpThing.getTicket()).thenReturn("test-ticket");
</code></p>

<p>In the code above, when the <code>getTicket</code> method is invoked on my mock instance, the <code>String</code> "test-ticket" will be returned.</p>

<p>Next, to ensure that <code>logIn</code> was invoked with parameters obtained from an incoming XML document, I can use Mockito's <code>verify</code> method.</p>

<p><code>java Using Mockito's verify to ensure proper interaction
verify(qtpThing, times(1)).logIn("some_value", "some_user_name", "password");
</code></p>

<p>In this case, the <code>verify</code> method checks that <code>logIn</code> is invoked one time and that three particular <code>String</code> values are passed in. If these expectations are not met, Mockito will throw an exception (and your corresponding test case will fail).</p>

<p>Thus, my test case for verifying my adapter is quite simple, yet highly readable.</p>

<p><code>java JUnit test case for verifying logIn behavior
@Test
public void testLoginRequest() throws Exception {
  QTP qtpThing = mock(QTP.class);
  when(qtpThing.getTicket()).thenReturn("test-ticket");
  AdapterRequest request = new AdapterRequest(XML.read("etc/test-login-req.xml"));
  QbosAdapter adapter = new QbosAdapter();
  adapter.setQtpInstance(qtpThing);
  AdapterResponse adapterResponse = adapter.performAction(request);
  assertNotNull(adapterResponse);
  verify(qtpThing, times(1)).logIn("some_value", "some_user_name", "password");
  assertEquals("test-ticket", adapterResponse.getData().getText());
}
</code></p>

<p>What if I need to simulate an exception thrown by the <code>QTP</code> object, ostensibly from an invalid parameter or incorrect credentials during a log in? Again, Mockito's fluent API makes this a breeze.</p>

<p>In my case, I'd like the <code>logIn</code> method to throw one of the checked methods in its method signature named <code>UnknownQtpException</code>. You can do this via the <code>doThrow</code> and <code>when</code> methods.</p>

<p><code>java Mocking out exceptions in Mockito
doThrow(new UnknownQtpException()).when(qtpThing).logIn("", "blah", "blah");
</code></p>

<p>In the code above, I'm explicitly declaring that if the first parameter to the <code>logIn</code> command is blank, then my mocked <code>QTP</code> instance should throw <code>UnknownQtpException</code>. Putting everything together yields the following test case:</p>

<p><code>java Testing exceptional circumstances with JUnit &amp; Mockito
@Test
public void testFailureLoginRequest() throws Exception {
  QTP qtpThing = mock(QTP.class);
  doThrow(new UnknownQtpException()).when(qtpThing).logIn("", "blah", "blah");
  XML xml = XML.read("etc/test-login-req-err.xml");
  AdapterRequest request = new AdapterRequest(xml);
  QbosAdapter adapter = new QbosAdapter();
  adapter.setQtpInstance(qtpThing);
  AdapterResponse adapterResponse = adapter.performAction(request);
  assertNotNull(adapterResponse);
  verify(qtpThing, times(1)).logIn("", "blah", "blah");
  assertEquals("FAILURE", adapterResponse.getData().getText());
}
</code></p>

<p>The beauty, of course, is that my test cases effectively test my adapter code without relying on a third party system (in this case, Bar). This is naturally a time honored testing technique employable in any language with a mocking framework worth its salt!</p>

<p>If you find yourself writing some integration code in Java, then I can't recommend Mockito enough. <a href="http://www.javaworld.com/community/node/3772">Mockito's API</a> is quite straightforward and it makes tests easy to comprehend. I mean, it makes tests easy to imbibe.  Dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Android migrations]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations/"/>
    <updated>2013-07-24T09:46:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/android_platform.png">Have you ever worked with <a href="http://guides.rubyonrails.org/migrations.html">Rails' migrations</a>? They make <a href="http://www.tutorialspoint.com/ruby-on-rails/rails-migrations.htm">database changes a breeze</a>, don't they?  While every software release doesn't necessarily involve a migration, when one does happen to make use of one, <a href="http://thediscoblog.com/blog/2013/02/18/testing-rails-migrations/">I'm always pleased</a> on how easily things work out. Whether it's to add new data or alter existing data structures, Rails migrations make evolving a datastore (be it an RDMBS or NoSQL one like MongoDB) painless.</p>

<p>When I recently found myself altering the data structure of a SQLite database for <a href="https://play.google.com/store/apps/details?id=com.b50.hoproll&amp;hl=en">one of my Android apps</a>, I found myself wishing there was some similar migration mechanism for Android as there is in Rails. Alas, I could fine none, so I did what any other developer would do: <a href="https://github.com/aglover/droid-migrate">I wrote one</a>.</p>

<!-- more -->


<p><a href="https://github.com/aglover/droid-migrate">Droid Migrate</a> is a simple command line framework that generates and runs database migrations for your Android apps that use <a href="http://www.sqlite.org/">SQLite</a>. A migration is encapsulated by a <code>DBVersion</code> class that contains an <code>up</code> and <code>down</code> method. The <code>up</code> method is called for an upgrade and <code>down</code> for a rollback. What those methods do is entirely up to you.</p>

<p>In addition, Droid Migrate generates a <code>DatabaseHelper</code> class through which you obtain underlying connections to a SQLite instance -- this is <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html">the canonical way</a> to <a href="http://www.stevenmcmillan.co.uk/blog/2012/java-sqlite-database-helper-class-for-android/">interact with SQLite</a> in <a href="http://www.androidhive.info/2011/11/android-sqlite-database-tutorial/">an Android app</a> anyway, but with Droid Migrate, you get a specially enhanced <code>DatabaseHelper</code> that determines which version of a target database instance is the most current and runs the appropriate migrations to bring the database to that version.</p>

<p>Thus, with your newly minted <code>DatabaseHelper</code> class, you can still interact with your app's database like you would normally, however, by using this class, all migrations are handled for you. Allow me to demonstrate.</p>

<p><a href="https://github.com/aglover/tidbit">I've created a simple app</a> that doesn't interact with any database at this point -- it simply creates a <code>ListView</code> that is intended to hold a list of records for viewing. You can find this app on <a href="https://github.com/aglover/tidbit">Github</a> if you'd like to follow along. Nevertheless, the app's main Activity is shown below.</p>

<p>``` java Simple Android app w/o any SQLite logic
package com.b50.db.ex;</p>

<p>import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;</p>

<p>public class MainActivity extends Activity {</p>

<p>  protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
TextView textView = (TextView) findViewById(R.id.textView1);
textView.setText("This would be a list from a DB if there was a DB");
</code></pre>

<p>  }
}
```</p>

<p>What I'd like to do is add the ability to interact with a SQLite database; plus, I'd like to be able to evolve the data model on subsequent releases. This is where Droid Migrate shines.</p>

<p>After I've installed Droid Migrate (simply clone or download the code, build it, and put it into your <code>PATH</code> and create new environment variable dubbed <code>DROID_MIGRATE_HOME</code>), I can initialize my app to use Droid Migrate by opening up a terminal in the root of my app and typing:</p>

<p><code>bash Initializing Droid Migrate
$&gt; droid-migrate init -d a_catalog
</code></p>

<p>The <code>-d</code> flag specifies the name of my desired database. I can optionally provide a package name via the <code>-p</code> flag if I'd like my newly generated classes in a separate package from my main app.</p>

<p>If you take a look at your app's code, you should notice a number of new things. First, you'll see two new classes and a new jar file. The classes are the aforementioned <code>DatabaseHelper</code> and a class dubbed <code>DBVersion1</code>. The newly added jar file in your app's <code>libs</code> folder contains a few classes that correspond to Droid Migrate's runtime dependencies -- this jar is extremely compact at 4KB.</p>

<p>The <code>DatabaseHelper</code> class is brutally simple:</p>

<p>```java DatabaseHelper couldn't be any easier
package com.b50.db.ex;</p>

<p>import com.b50.db.ex.R;
import android.content.Context;
import com.b50.migrations.MigrationsDatabaseHelper;</p>

<p>public class DatabaseHelper extends MigrationsDatabaseHelper {</p>

<p>  public DatabaseHelper(Context context) {</p>

<pre><code>super(context, context.getString(R.string.database_name), null, 
  context.getResources().getInteger(R.integer.database_version), 
  context.getString(R.string.package_name));
</code></pre>

<p>  }
}
```</p>

<p>This class extends Droid Migrate's <code>MigrationsDatabaseHelper</code>, which ultimately extends Android's <code>SQLiteOpenHelper</code> so as I mentioned earlier, you've got everything you need to interact with SQLite at your fingertips via <code>DatabaseHelper</code>. If you look closely, you'll see that this class makes use of a specialized XML file (that is ultimately generated into your <code>R</code> class).</p>

<p>Take a look in the <code>res/values</code> folder and open up the newly created <code>migrations.xml</code> file. It should look something like this:</p>

<p>```xml migrations.xml contains database version, package name and database name
&lt;?xml version="1.0" encoding="utf-8"?>
<resources></p>

<pre><code>&lt;integer name="database_version"&gt;1&lt;/integer&gt;
&lt;string name="database_name"&gt;a_catalog&lt;/string&gt;
&lt;string name="package_name"&gt;com.b50.db.ex&lt;/string&gt;
</code></pre>

<p></resources>
```</p>

<p>Note the value of <code>database_version</code> -- it's 1. This corresponds to the <code>DBVersion1</code> class that was generated. Take a look at that class:</p>

<p>```java DBVersion1 is your initial migration class
package com.b50.db.ex;</p>

<p>import com.b50.migrations.AbstractMigration;</p>

<p>public class DBVersion1 extends AbstractMigration {</p>

<pre><code>public void up() {
    //execSQL("some sql create stmts");
}

public void down() {
    //execSQL("some delete sql stmts");
}
</code></pre>

<p>}
```</p>

<p>This class is where you implement your initial migration, which would create various tables and populate them. Use the <code>execSQL</code> method to pass in a valid SQL <code>String</code>. For example, I'll create an initial migration like so:</p>

<p>```java DBVersion1 is now implemented
package com.b50.db.ex;</p>

<p>import com.b50.migrations.AbstractMigration;</p>

<p>public class DBVersion1 extends AbstractMigration {</p>

<pre><code>public void up() {
    String create = "CREATE TABLE hops (_id integer  PRIMARY KEY AUTOINCREMENT DEFAULT NULL, name TEXT, description TEXT, substitutions TEXT DEFAULT '', alpha_acid TEXT DEFAULT '', beer_styles TEXT DEFAULT '', type TEXT DEFAULT '', user_notes TEXT DEFAULT '');";
    execSQL(create);
    String oneThing = "INSERT INTO 'hops' VALUES(1,'Amarillo','Spicy hop with mild bitterness and a noble aroma.  Good all around hop.','Cascade, Centennial','7 to 10','Ale, IPA','Aroma', '');";
    execSQL(oneThing);
}

public void down() {
    execSQL("DROP TABLE hops;");
}
</code></pre>

<p>}
```</p>

<p>As you can see, my <code>up</code> method creates a table and inserts one record. My <code>down</code> method rolls things back, which in this case means dropping the created table.</p>

<p>Now all I have to do is make use of my app's <code>DatabaseHelper</code> instance and Droid Migrate will ensure things are properly initialized. Therefore, I'll update the original Activity to display a list of what's in the database, which I know only to be one record based upon my initial migration.</p>

<p>```java Updated Activity to interact with SQLite
package com.b50.db.ex;</p>

<p>import android.app.Activity;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;</p>

<p>public class MainActivity extends Activity {</p>

<p>  protected SQLiteDatabase db;</p>

<p>  protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

this.db = (new DatabaseHelper(this)).getWritableDatabase();
ListView list = (ListView) findViewById(R.id.list);

ListAdapter adapter = getAdaptorForQuery("SELECT _id, name, description FROM hops ORDER BY name ASC", null);
list.setAdapter(adapter);
</code></pre>

<p>  }</p>

<p>  private ListAdapter getAdaptorForQuery(String queryString, String[] parameters) {</p>

<pre><code>Cursor cursor = this.db.rawQuery(queryString, parameters);
return new SimpleCursorAdapter(this, R.layout.list_item, cursor,
            new String[] { "name", "description" }, new int[] { R.id.hopName, R.id.description }, 0);
</code></pre>

<p>  }
}
```</p>

<p>As you can see from the code above, the app now makes a query to the underlying SQLite instance and builds a <code>ListView</code> from the result set of the query.</p>

<p>The key line is how the <code>SQLiteDatabase</code> instance is obtained: <code>this.db = (new DatabaseHelper(this)).getWritableDatabase();</code> -- that is where all the magic takes place. Droid Migrate passes along the version number to the Android platform and if there is a change, the Android platform will call a series of life-cycle methods, which Droid Migrate wires up with your migrations.</p>

<p>For instance, let's imagine that a subsequent release of this app adds more data to the <code>hops</code> table. Therefore, I'll generate a new migration. This is done by typing the following command within the root directory of your project like so:</p>

<p><code>bash Generating a new migration
$&gt; droid-migrate generate up
</code></p>

<p>The <code>up</code> flag signifies an increase in the database version (i.e. version++) and <code>down</code> indicates a rollback (i.e. version--). If you take a look at your app's code, you'll notice a new class: <code>DBVersion2</code> and your <code>migrations.xml</code> file has been updated: the <code>database_version</code> value is now 2.</p>

<p>I'll implement my <code>DBVersion2</code> class like so:</p>

<p>```java Implementing DBVersion2 to add one more row of data
package com.b50.db.ex;</p>

<p>import com.b50.migrations.AbstractMigration;</p>

<p>public class DBVersion2 extends AbstractMigration {</p>

<pre><code>public void up() {
    execSQL("INSERT INTO 'hops' VALUES(100,'Zythos','New IPA style hop blend created to optimize and exceed the aroma characteristics of the traditional, and sometimes hard to get, IPA hops.','Amarillo, Columbus, Cascade','9.5 to 12','IPAs','Bittering and Aroma', '');");
}

public void down() {
    execSQL("DELETE from 'hops' where _id = 100");
}
</code></pre>

<p>}
```</p>

<p>Now if I fire up my app, the <code>ListView</code> will have 2 items in it!</p>

<p><img class="center" src="/images/mine/migrate_2.png"></p>

<p>What about if you need to rollback? That's just as easy. Imagine that the addition of that second row of data was a gigantic mistake and instead I really only want one row (i.e. I only want the data originally created in <code>DBVersion1</code>). All I have to do is type within the root of my project:</p>

<p><code>bash Rollbacks in Droid Migrate are just as easy
$&gt; droid-migrate generate down
</code></p>

<p>After typing the above command, you should see the following output:</p>

<p><code>bash Rollback to version 1!
Generating a rollback migration...
Rolling back your migrations.xml file to indicate database version 1
Done!
</code></p>

<p>The only thing that'll change in your project is the <code>migrations.xml</code> file -- the <code>database_version</code> value will be rolled back to 1 (or what ever 1 minus the current version is).</p>

<p>Fire the app back up, and behold: one value is displayed because <code>DBVersion2</code>'s <code>down</code> method was executed!</p>

<p>Droid Migrate makes upgrades and rollbacks to your underlying SQLite database a breeze; what's more, it can handle upgrades or rollbacks beyond just one version. That is, if an app instance is upgraded from version 2 to version 6, each migration will be run in order (3, 4, 5, and 6). The same is true of a rollback.</p>

<p>If you are working with SQLite in an Android app, I highly recommend you take a look at <a href="https://github.com/aglover/droid-migrate">Droid Migrate</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile for the masses: Words and gestures with Overheard Word]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/01/mobile-for-the-masses-words-and-gestures-with-overheard-word/"/>
    <updated>2013-07-01T12:10:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/01/mobile-for-the-masses-words-and-gestures-with-overheard-word</id>
    <content type="html"><![CDATA[<p>The fourth article in <a href="http://www.ibm.com/developerworks/">IBM developerWorks</a>' series <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=mobile+for+the+masses">Mobile for the Masses</a> has been published! <a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html">This copasetic article</a> shows you how to take the Overheard Word demo app up a level with a JSON-based word engine and some prebaked, swipe-gesture functionality.</p>

<!-- more -->


<p>As the article summary states:</p>

<p><blockquote><p>You might feel like a kid in a candy store grabbing third-party code from GitHub or another repository, but there are still some tricks to integrating it with your Android UI. This month, Andrew Glover shows you how to take the Overheard Word demo app up a level with a JSON-based word engine and some prebaked, swipe-gesture functionality. As it turns out, Android easily accommodates third-party code, but you still have to do some careful logic if you want your app's UI to run it smoothly.</p><footer><strong>IBM DeveloperWorks</strong> <cite><a href='http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html'>Mobile for the Masses: Words and Gestures With Overheard Word</a></cite></footer></blockquote></p>

<p>Check out "<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html">Mobile for the masses: Mobile for the masses: Words and gestures with Overheard Word</a>" and programmatically integrate third-party code into your Android UI! If you missed the first article, check out "<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses1/">Mobile for the masses: A gentle introduction to Android</a>"; what's more, don't forget to read my second article, entitled "<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Mobile for the masses: Take a swipe at it! Programming gestures in Android</a>" and the third article "<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses3/index.html">Mobile for the masses: Activities and icons in your Android application lifecycle</a>".</p>

<p>Stay tuned for more articles in this series and don't forget to watch for <a href="http://thediscoblog.com/blog/categories/mobile/">mobile focused articles on this blog</a> as well.</p>
]]></content>
  </entry>
  
</feed>
