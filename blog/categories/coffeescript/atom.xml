<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CoffeeScript | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2013-09-17T15:30:49-04:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Understanding ElasticSearch analyzers]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/14/understanding-elasticsearch-analyzers/"/>
    <updated>2013-09-14T08:37:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/14/understanding-elasticsearch-analyzers</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/old-beer.jpg">Sadly, lots of early Internet beer recipes aren't necessarily in an easily digestible format; that is, these recipes are <em>unstructured</em> intermixed lists of directions and ingredients often originally composed in an email or forum post.</p>

<p>So while it's hard to easily put these recipes into traditional data stores (ostensibly for easier searching), they're perfect for <a href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/">ElasticSearch</a> in their current form.</p>

<p>Accordingly, imagine an <a href="http://thediscoblog.com/blog/2013/05/17/elasticsearch-on-ec2-in-less-than-60-seconds/">ElasticSearch</a> index full of beer recipes, since...well...I enjoy making beer (and drinking it too).</p>

<!-- more -->


<p>First, I'll add some beer recipes into ElasticSearch using <a href="https://github.com/phillro/node-elasticsearch-client">Node's ElasticSearch Client</a>(note that the code is <a href="http://thediscoblog.com/blog/categories/coffeescript/">CoffeeScript</a> though). I'll be adding these beer recipes into a <code>beer_recipes</code> index like so:</p>

<p>``` javascript Adding a beer recipe
beer_1 = {</p>

<pre><code>name: "Todd Enders' Witbier",
style: "wit, Belgian ale, wheat beer",
ingredients: "4.0 lbs Belgian pils malt, 4.0 lbs raw soft red winter wheat, 0.5 lbs rolled oats, 0.75 oz coriander, freshly ground Zest from two table oranges and two lemons, 1.0 oz 3.1% AA Saaz, 3/4 corn sugar for priming, Hoegaarden strain yeast"
</code></pre>

<p>}</p>

<p>client.index('beer_recipes', 'beer', beer_1).on('data', (data) -></p>

<pre><code>console.log(data)
</code></pre>

<p>).exec()
```</p>

<p>Note how the interesting part of a recipe JSON document, dubbed <code>beer_1</code> is found in the <code>ingredients</code> field. This field is basically a big string of valuable text (you can imagine how this string was essentially the body of an email). So while the <code>ingredients</code> field is unstructured, it's something clearly that people will want to search on.</p>

<p>I will add one more recipe for good measure:</p>

<p>``` javascript Adding a second beer recipe
beer_2 = {</p>

<pre><code>name: "Wit",
style: "wit, Belgian ale, wheat beer",
ingredients: "4 lbs DeWulf-Cosyns 'Pils' malt, 3 lbs brewers' flaked wheat (inauthentic; will try raw wheat nest time), 6 oz rolled oats, 1 oz Saaz hops (3.3% AA), 0.75 oz bitter (Curacao) orange peel quarters (dried), 1 oz sweet orange peel (dried), 0.75 oz coriander (cracked), 0.75 oz anise seed, one small pinch cumin, 0.75 cup corn sugar (priming), 10 ml 88% food-grade lactic acid (at bottling), BrewTek 'Belgian Wheat' yeast"
</code></pre>

<p>}</p>

<p>client.index('beer_recipes', 'beer', beer_2).on('data', (data) -></p>

<pre><code>console.log(data)
</code></pre>

<p>).exec()
```</p>

<p>It's a hot summers day and I'm thinking I'd like to make a beer with <em>lemon</em> as an ingredient (to be clear: I want to use lemon zest, which is obtained from a lemon peel). So naturally, I need to find (i.e. <em>search for</em>) a recipe with lemons in it.</p>

<p>Consequently, I'll search my index for recipes that contain the word "lemon" like so:</p>

<p>``` javascript Searching for lemon
query = { "query" : { "term" : { "ingredients" : "lemon" } } }</p>

<p>client.search('beer_recipes', 'beer', query).on('data', (data) -></p>

<pre><code>data = JSON.parse(data)
for doc in data.hits.hits
    console.log doc._source.style
    console.log doc._source.name
    console.log doc._source.ingredients
</code></pre>

<p>).exec()
```</p>

<p>But nothing shows up -- there are no results! Why is that?</p>

<p>If you look closely in the earlier code example (specifically, the <code>beer_1</code> JSON document), you can see that the word "lemons" is in the text (i.e. "...two table oranges and two lemons..."). It turns out, by default, the way values are indexed by ElasticSearch, <em>lemon</em> doesn't necessarily match -- <em>lemons</em> does though.</p>

<p>``` javascript Searching for lemons
query = { "query" : { "term" : { "ingredients" : "lemons" } } }</p>

<p>client.search('beer_recipes', 'beer', query).on('data', (data) -></p>

<pre><code>data = JSON.parse(data)
for doc in data.hits.hits
    console.log doc._source.style
    console.log doc._source.name
    console.log doc._source.ingredients
</code></pre>

<p>).exec()
```</p>

<p>Lo and behold, this search returns a hit! But that's inconvenient, to say the least. Basically the words in the <code>ingredients</code> field are tokenized <em>as is</em>. Hence, a search for "lemons" works while "lemon" doesn't. Note: there are various mechanisms for searching, and a search on "lemon*" should have returned a result.</p>

<p>When a document is added into an <a href="http://thediscoblog.com/blog/2013/01/02/scalable-searching-with-elasticsearch/">ElasticSearch</a> index, its fields are analyzed and converted into <em>tokens</em>. When you execute a search against an index, you search against those tokens. How ElasticSearch tokenizes a document is configurable.</p>

<p>There are different ElasticSearch analyzers available -- from language analyzers that allow you to support non-English language searches to the <a href="http://snowball.tartarus.org/">snowball</a> analyzer, which converts a word into its root (or stem and that process of creating a stem from a word is called <em><a href="http://snowball.tartarus.org/algorithms/english/stemmer.html">stemming</a></em>), yielding a simpler token. For example, a snowball of "lemons" would be "lemon". Or if the words "knocks" and "knocking" were in a snowball analyzed document, both terms would have "knock" as a stem.</p>

<p>You can change how documents are tokenized via the index mapping API like so:</p>

<p>``` bash Changing the mapping for an index using cURL
curl -XPUT 'http://localhost:9200/beer_recipes' -d '{ "mappings" : {
  "beer" : {</p>

<pre><code>"properties" : {
  "ingredients" : { "type" : "string", "analyzer" : "snowball" }
}
</code></pre>

<p>   }
 }
}'
```</p>

<p>Note how the above mapping specifies that the <code>ingredients</code> field will be analyzed via the snowball analyzer. Also note, you have to change the mapping of an index <em>before</em> you begin to add documents to it! So, in this case, I'll need to drop the index, run the mapping call above, and then re-add those two recipes.</p>

<p>Now I can begin searching recipes for the ingredient "lemon"  or "lemons".</p>

<p>``` javascript Searching for lemon now works!
query = { "query" : { "term" : { "ingredients" : "lemon" } } }</p>

<p>client.search('beer_recipes', 'beer', query).on('data', (data) -></p>

<pre><code>data = JSON.parse(data)
for doc in data.hits.hits
    console.log doc._source.style
    console.log doc._source.name
    console.log doc._source.ingredients
</code></pre>

<p>).exec()
```</p>

<p>Keep in mind that <a href="http://stackoverflow.com/questions/3875382/lucene-standard-analyzer-vs-snowball">snowballing can inadvertently</a> make your search results <em>less relevant</em>. Long words can be stemmed into more common but completely different words. For example, if you snowball a document that contains the word "sextant", the word "sex" will result as a stem. Thus, searches for "sextant" will also return documents that contain the word "sex" (and vice versa).</p>

<p>ElasticSearch puts a powerful search engine into your clutches; plus, with a little forethought into how a document's contents are analyzed, you'll make searches event more relevant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whiskered Node views]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/13/whiskered-node-views/"/>
    <updated>2013-08-13T12:00:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/13/whiskered-node-views</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/mustache_template.png">As we draw closer to the glorious month of <a href="http://us.movember.com/">Movember</a>, I find myself pondering the <a href="http://paularmstrong.github.io/node-templates/">myriad template engines</a> available for Node apps. The most popular is still probably <a href="http://jade-lang.com/">Jade</a> as its syntax is <a href="http://haml.info/">Haml</a>-like and results in quite clean views, lacking in HTMLish clutter.</p>

<p>While Jade is handy, it takes some time to get used to. Plus, if you find yourself working with a UI person who prefers to speak in HTML, you'll find yourself translating between HTML and Jade (which isn't that hard with web apps like <a href="http://html2jade.aaron-powell.com/">HTML2Jade</a>, but nevertheless involves an extra <em>translation</em> step).</p>

<!-- more -->


<p>There are other template engines that map more closely to pure HTML. <a href="http://mustache.github.io/">Mustache</a>, for instance, forgoes reducing HTML entirely and introduces <code>{}</code>'s (i.e. mustaches) as a substitution delimiter. Thus, you can take normal HTML files and add some <code>{}</code>'s to make pages dynamic.</p>

<p>In the world of Node, there are <a href="https://github.com/raycmorgan/Mu">a few</a> Mustache implementations. One of the more interesting ones that I've used is <a href="https://github.com/gsf/whiskers.js/">Whiskers</a>. Whiskers is fairly lightweight and doesn't offer a lot of bells and whistles. As the project's README states</p>

<p><blockquote><p>Whiskers is focused on template readability. By limiting template logic, careful preparation of the context is encouraged, and the processing and formatting of data is kept separate from the design of the display.</p><footer><strong>https://github.com/gsf/whiskers.js/</strong> <cite><a href='https://github.com/gsf/whiskers.js/'>About Whiskers.js</a></cite></footer></blockquote></p>

<p>Accordingly, you can do variable substitution, conditional logic, and looping out-of-the-box easily. But that's about all.</p>

<p>To get started with Whiskers, you'll need to add it as a dependency to your project's NPM file like so:</p>

<p><code>json package.json NPM file
"whiskers" : "latest"
</code></p>

<p>In this case, I'll always be grabbing the latest version.</p>

<p>I prefer <a href="http://localhost:4000/blog/categories/coffeescript/">CoffeeScript</a> when writing Node apps; consequently, the code examples I show you will be in <a href="/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps/">CoffeeScript</a>. Accordingly, in my <code>App.coffee</code> file, I need to then require Whiskers:</p>

<p><code>coffeescript Requiring whiskers in your Node app
whiskers = require 'whiskers'
</code></p>

<p>You'll need to configure Express to leverage Whiskers; luckily, Express makes plugging in alternate template engines quite easy.</p>

<p><code>coffeescript Configuring a template engine with Express
app.set 'view engine', 'html'
app.engine 'html', whiskers.__express
</code></p>

<p>This indicates that your template files will end in <code>.html</code> and that for those file types, use the Whiskers framework.</p>

<p>You can then render a Whiskers template like normal. For example, if I want to pass an <code>allWords</code> collection as the variable <code>words</code> to a template file dubbed <code>index.html</code>, I can do it like so:</p>

<p><code>coffeescript Rending a view
res.render 'index', {words: allWords}
</code></p>

<p>In this case, <code>allWords</code> is an array full of <code>Word</code> classes.</p>

<p>Inside my <code>index.html</code> file, I can access the <code>words</code> variable inside a bracketed <code>for</code> loop like so:</p>

<p>``` html Mustached HTML
<body>
  {for word in words}</p>

<pre><code>&lt;div data-role="page" id="page_{word.id}" data-theme='c'&gt;
  &lt;div data-theme="g" data-role="header"&gt;
    &lt;h3&gt;
        Overheard Word
    &lt;/h3&gt;
  &lt;/div&gt;

  &lt;div data-role="content"&gt;
    &lt;div class="center-wrapper"&gt;
       &lt;h2&gt;{word.spelling} &lt;/h2&gt;
       &lt;p&gt;&lt;em&gt;{word.partOfSpeech}&lt;/em&gt; - {word.definition}&lt;/p&gt;
       &lt;p&gt;"{word.exampleSentence}"&lt;/p&gt;
     &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>  {/for}
</body>
```</p>

<p>Note inside the <code>for</code> loop, I have access to a <code>word</code> instance. I can call properties on it as well. Note, with Whiskers, you can't invoke methods on passed in objects. Only properties (i.e. <code>word.definition</code> isn't a function).</p>

<p>Jade certainly produces more elegant, less verbose view code. But Jade's whitespace delimiting coupled with the fact that basic HTML knowledge is near universal, make template frameworks like Whiskers, which permit normal HTML with <code>{}</code> delimiters appealing from time to time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinatra, CoffeeScript, and Haml: swinging in 4 steps]]></title>
    <link href="http://thediscoblog.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps/"/>
    <updated>2012-12-10T21:49:00-05:00</updated>
    <id>http://thediscoblog.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps</id>
    <content type="html"><![CDATA[<p>I recently decided to ditch plain old JavaScript in a <a href="http://www.sinatrarb.com/">Sinatra</a> based application in favor of <a href="http://coffeescript.org/">CoffeeScript</a>. The existing JavaScript wasn't terribly complex; however, I was looking at having to add some AJAX based long polling and I couldn't bring myself to do it in <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-18/index.html">JavaScript</a>. Accordingly, I decided I'd use <a href="http://www.ibm.com/developerworks/web/library/j-coffeescript/index.html">CoffeeScript</a>, but, as it turns out, there were a few steps I had to put in place before I could enjoy some significant whitespace delimitation.</p>

<p>First, I installed <a href="https://github.com/Sutto/barista">Barista</a>, which is a nifty Ruby gem that adds transparent CoffeeScript support to any Rack app. There were a few other gems available, however, I decided that Barista had the most mature documentation and the project still showed signs of life.</p>

<p>Once I added the Barista gem to my Gemfile and ran <a href="http://gembundler.com/">Bundler</a>, I next had to require Barista in my Sinatra app; moreover, I had to register the Barista extension via <code>Sinatra.register Barista::Integration::Sinatra</code>. Note, that these steps need to be done after <a href="http://haml.info/">Haml</a> is loaded.</p>

<p>In order for Barista to work properly, you'll need to have a JavaScript runtime handy -- there are a number of options here, including <a href="https://github.com/cowboyd/therubyracer">therubyracer</a>; however, after a bit of research, I found some <a href="http://stackoverflow.com/questions/6282307/execjs-and-could-not-find-a-javascript-runtime">concerning notes regarding therubyracer's memory consumption</a>. After a bit of surfing, I happened upon <a href="https://github.com/sstephenson/execjs">ExecJS</a>, which states that Node will work just fine. Yeah!</p>

<p>Accordingly, since this application runs on Ubuntu, I got to use a nifty script that I happened to have written about a year ago: <a href="https://github.com/aglover/ubuntu-equip">Ubuntu Equip</a>. In less than a minute, I had the latest and greatest version of Node running by running the command:</p>

<p><code>bash script for install Node on Ubuntu
wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_node.sh &amp;&amp; bash equip_node.sh
</code></p>

<p>Take note: this script sets a custom <a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool">apt-get</a> repository; otherwise, if you don't add this repository, you'll end up with an ancient version of Node.</p>

<p>Finally, to actually start coding in CoffeeScript, all you have to do is use Haml's handy inline <code>:coffeescript</code> filter:</p>

<p>``` javascript CoffeeScript spinner
:coffeescript
  $(document).ready -></p>

<pre><code>opts = { lines: 13, ...}
spinner = new Spinner(opts).spin(document.getElementById('spinner'))
</code></pre>

<p>```</p>

<p>That's it! The steps required to get Sinatra, CoffeeScript, and Haml playing together are:</p>

<ul>
<li>Install Barista</li>
<li>Configure Sinatra</li>
<li>Install a JavaScript runtime engine</li>
<li>Write some CoffeeScript</li>
</ul>


<p>In short, Barista and <a href="http://www.ibm.com/developerworks/java/library/j-nodejs/">Node</a> make Sinatra swing with CoffeeScript.</p>
]]></content>
  </entry>
  
</feed>
