<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | The Disco Blog]]></title>
  <link href="http://aglover.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://aglover.github.com/"/>
  <updated>2013-04-14T11:42:05+08:00</updated>
  <id>http://aglover.github.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Painless Android swipe detection]]></title>
    <link href="http://aglover.github.com/blog/2013/04/07/painless-android-swipe-detection/"/>
    <updated>2013-04-07T10:37:00+08:00</updated>
    <id>http://aglover.github.com/blog/2013/04/07/painless-android-swipe-detection</id>
    <content type="html"><![CDATA[<p>{% img left /images/mine/gesticulate.png %}Why bother building navigation buttons in an Android app when you can easily capture finger swipes? But, if you've ever implemented gesture section in Android there's the drudgery of implementing listeners and you also need to do some elementary Cartesian math. Save yourself the boilerplate bother mathematics and use a <a href="https://github.com/aglover/gesticulate">library</a>!</p>

<p><a href="https://github.com/aglover/gesticulate">Gesticulate</a> makes it painless to detect straightforward swiping motions like up, down, left, and right. It's a simple jar file you include in your Android <code>libs</code> directory. Throw Gesticulate's <code>SwipeDetector</code> inside an instance of Android's <code>SimpleOnGestureListener</code>, for example, and you're detecting swipes with ease!</p>

<p>Gesticulate is used in Savvy Words, a flash card vocabulary app found on <a href="https://play.google.com/store/apps/details?id=com.b50.savvywords">Google Play</a> and <a href="http://www.amazon.com/Beacon50-Savvy-Words/dp/B00C535D20/ref=sr_1_1?s=mobile-apps&amp;ie=UTF8&amp;qid=1365339189&amp;sr=1-1">Amazon's Appstore for Android</a>. See the <a href="https://github.com/aglover/gesticulate">Github project</a> for more details such as code examples for how to use Gesticulate, how to build it, and to see Gesticulate's tests. Swipe on, baby!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalable searching with ElasticSearch]]></title>
    <link href="http://aglover.github.com/blog/2013/01/02/scalable-searching-with-elasticsearch/"/>
    <updated>2013-01-02T16:02:00+08:00</updated>
    <id>http://aglover.github.com/blog/2013/01/02/scalable-searching-with-elasticsearch</id>
    <content type="html"><![CDATA[<p>{% img right /images/mine/search_flickr.jpg %}Search is no longer an optional feature: it's expected of most any application that consumes, produces, or stores data. And not everyone wants to be a search technology specialist, especially given the range of sophisticated algorithms underlying today's complex searches (i.e. SQL queries are no longer sufficient!). Knowing about existing, open source search platforms could save you a lot of time and money and allow you to spend your time fine-tuning your software's main functionality.</p>

<p>In "<a href="http://www.ibm.com/developerworks/java/library/j-javadev2-24/index.html">Java development 2.0: Scalable searching with ElasticSearch</a>", I introduce <a href="http://www.elasticsearch.org/">ElasticSearch</a>, a distributed search platform that is easy to get started with and vastly extendable. ElasticSearch's sophistication and ease-of-use are impressive, and its support for horizontal scalability offers a world of options should your data requirements need to scale. So what are you waiting for? Give <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-24/index.html">it a read</a>!</p>

<p>Thanks to <a href="http://www.flickr.com/photos/danardvincente/2512148775/">Danard Vincente</a> for the search-engine-magnifying-glass image!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comprehending the mobile development landscape]]></title>
    <link href="http://aglover.github.com/blog/2012/12/02/comprehending-the-mobile-development-landscape/"/>
    <updated>2012-12-02T18:11:00+08:00</updated>
    <id>http://aglover.github.com/blog/2012/12/02/comprehending-the-mobile-development-landscape</id>
    <content type="html"><![CDATA[<p>There's <a href="http://www.forbes.com/sites/parmyolson/2012/12/04/5-eye-opening-stats-that-show-the-world-is-going-mobile/">no shortage</a> of <a href="http://www.forbes.com/sites/connieguglielmo/2012/12/04/mary-meekers-must-read-interent-trends-report-says-android-phone-uptake-bests-apple/">mobile growth</a> statistics, but here's a few specific ones paint an overall picture of mobility:</p>

<ul>
<li><a href="http://www.digitalbuzzblog.com/infographic-2012-mobile-growth-statistics/">Roughly 87% of the worlds population has a mobile device</a></li>
<li>Earlier this year, <a href="http://readwrite.com/2012/07/05/top-trends-of-2012-the-continuing-rapid-growth-of-mobile">Facebook claimed an astounding 488 million</a> mobile <a href="http://thediscoblog.com/blog/2012/11/28/the-essence-of-mobile-app-performance/">monthly active users </a></li>
<li>Android's user base is growing by <a href="http://www.digitalbuzzblog.com/infographic-2012-mobile-growth-statistics/">700,000 subscribers a day</a></li>
</ul>


<p>These three facts clearly point out that mobility is a growing, global phenomenon, and that it's drastically changing how people use the Internet. What's more, from a technology standpoint, mobile is where the growth is!</p>

<p>But the mobile landscape is as varied as it is big. Unlike a few short years ago, when doing mobile work implied J2ME on a Blackberry, mobile development now encompasses <a href="http://www.android.com/">Android</a>, <a href="http://en.wikipedia.org/wiki/IOS">iOS</a>, <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a>, and even <a href="http://dev.windowsphone.com/en-us">Windows Phone</a>. That's 4 distinct platforms with different development platforms and languages -- and I haven't even mentioned the <a href="http://thediscoblog.com/blog/2012/09/01/cost-and-the-great-mobile-app-debate/">myriad hybrid options</a> available!</p>

<p>The key to understanding the mobile landscape is an appreciation for the various developmental platforms -- their strengths &amp; weaknesses, speed of development, distribution, and, if you are looking at the consumer market, their payout.</p>

<h5>Android</h5>

<p>Android device distribution, as I pointed out earlier, is growing faster than other platforms, and the Android ecosystem has more than one app store: <a href="https://play.google.com/store?hl=en">Google Play</a> and <a href="http://www.amazon.com/mobile-apps/b?ie=UTF8&amp;node=2350149011">Amazon's store</a>, just to name the two most popular ones. And by most accounts, <a href="http://www.engadget.com/2012/06/27/google-play-hits-600000-apps/">Google Play has as many</a> or <a href="http://news.cnet.com/8301-1035_3-57521252-94/can-apples-app-store-maintain-its-lead-over-google-play/">more apps</a> than Apple's App Store (careful with this statistic though, see details below regarding <em>payouts</em>).</p>

<p>The massive adoption of Android, however, has lead to <a href="http://opensignal.com/reports/fragmentation.php">fragmentation</a>, which does present some significant challenges with respect to testing. In fact, the reality for most developers is that it is almost impossible to test an app on all combinations of device-OS version profiles in a cost effective manner (this is a growing service industry, by the way).</p>

<p>On a positive note, Java, the native language of Android apps, is a fairly ubiquitous language -- some estimates <a href="http://en.wikipedia.org/wiki/Java_%28programming_language%29">peg as many as 10 million active developers</a> so there's no shortage of able-bodied Java developers and their associated tools out there.</p>

<p>Thus, with Android, you have a wide audience (both people with Android devices and developers to build apps) and multiple distribution channels. Yet, this large distribution of disparate devices does present some testing challenges; what's more, it can be more difficult to make money on the Android platform compared to iOS, as you'll see next.</p>

<h5>iOS</h5>

<p>iOS, the OS for iPhones and iPads, has a <a href="http://mobile.tutsplus.com/tutorials/iphone/understanding-the-ios-ecosystem/">tight ecosystem</a> and an avid user base, <a href="http://www.androidauthority.com/are-iphone-users-richer-better-educated-than-android-users-105032/">willing to spend money</a>, ultimately translating into <a href="http://www.forbes.com/sites/darcytravlos/2012/08/22/five-reasons-why-google-android-versus-apple-ios-market-share-numbers-dont-matter/">more money for developers</a>. That is, even though there are far more Android devices globally than iOS ones, the iTunes App Store generates more money than Google Play, which means more money for developers of popular apps. In many respects, users of iOS devices are also more willing to pay a fee for an app as opposed to Android ones.</p>

<p>The development ecosystem for iOS has a higher barrier to entry when compared to something like Java or JavaScript. OSX is a requirement and the <a href="http://store.apple.com/us/browse/home/shop_mac/family/macbook_pro">cost alone</a> here can be a barrier for a lot of developers; moreover, Objective-C can present some challenges for the faint of heart (manual memory management!). Yet, the tooling provided by Apple is almost universally lauded by the community at large (much like Microsoft's VisualStudio) -- <a href="https://developer.apple.com/xcode/">XCode</a> is a slick development tool.</p>

<p>While there isn't a lot of device <a href="http://bgr.com/2012/06/12/apple-ios-fragmentation-iphone/">fragmentation on iOS</a>, developers do have to deal with OS fragmentation. That is, there are only a handful of Apple devices but quite a lot of different versions living in the field at any given time due to a lagging factor of user upgrades.</p>

<p>The iOS platform certainly offers a direct path to revenue, provided you can build a stellar app; however, compared to Android, this is a closed community, which has the tendency to rub some portion of developmental community wrong. Given you can quickly embrace Objective-C and afford the requisite software, iOS is almost always the first platform app developers target.</p>

<h5>HTML5</h5>

<p>HTML5 is truly universal and its apps are available on all platforms without any need to port them -- JavaScript is as ubiquitous as Java; what's more, HTML itself has almost no barrier to entry, making HTML5 and JavaScript a force to content with when it comes to finding talented developers and mass distribution. Cost isn't even really part of the HTML5 equation too -- tools and frameworks are free.</p>

<p>Yet, HTML5 apps suffer from a <a href="http://thediscoblog.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results/">distribution challenge</a> -- the major app stores do not carry these apps! Thus, in large part, as an HTML5 app developer, you are relying on a user to type in your URL into a browser. I for one, almost never type in a URL on my iPhone (while I will on my iPad). Lastly, <a href="http://thediscoblog.com/blog/2012/09/25/modevtablet-2012-video-mobile-web-realities/">HTML5 is no where near parity with respect to UX</a> compared to native apps (and may <em>never be</em>). This, however, is only a disadvantage if you are building an app that requires a strong UX. There are plenty of great HTML5 apps out there!</p>

<p>HTML5 offers an extremely low developmental barrier to entry and the widest support available -- all smart devices have browsers (note, <a href="http://thediscoblog.com/blog/2012/09/24/a-tale-of-three-browsers/">they aren't all created equal</a>!); however, because there isn't a viable distribution channel, these apps have limited opportunity to make money.</p>

<h5>Windows Phone</h5>

<p>Windows is <a href="http://www.forbes.com/sites/ericsavitz/2012/12/04/microsoft-dec-qtr-surface-sales-below-1m-units-analyst-says/">still unproven</a> but could be an opportunity to get in early -- first movers in Apple's App Store without a doubt made far more money than if they had submitted the same apps today. In this case, you if want a truly native experience you'll build apps on the .NET platform (presumably C#). Windows machines are far cheaper than OSX ones, so there is little financial barrier other than license fees for VisualStudio and a developer fee for the Windows Phone Marketplace.</p>

<p>Indeed, it appears that Microsoft is <a href="http://www.windowsphone.com/en-us/store">modeling their app store</a> and corresponding policies off of Apple's -- thus there is a <a href="http://www.inquisitr.com/423599/windows-phone-8-app-downloads-improve-by-100/">tightly managed distribution channel</a>, presenting an opportunity to reach a wide audience and earn their money. But, at this point, the wide audience has yet to develop.</p>

<h5>That's 4, but there's still more!</h5>

<p>As I alluded to in the beginning of this post, there are 4 <em>primary platforms</em> and myriad hybrid options, such as <a href="http://phonegap.com/">PhoneGap</a> and <a href="http://www.appcelerator.com/">Appcelerator</a>, for example. These hybrid options have various advantages and disadvantages; however, the primary concerns one needs to think through are still speed of development, distribution, and payout.</p>

<p>Before you embark on a mobile development effort, it pays to have the end in mind -- that is, before you code, have tangible answers for app distribution, development effort, and potential payout as these points will help guide you through the mobile landscape.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM fork modes and metaclass wizardry]]></title>
    <link href="http://aglover.github.com/blog/2012/11/02/jvm-fork-modes-and-metaclass-wizardry/"/>
    <updated>2012-11-02T16:30:00+08:00</updated>
    <id>http://aglover.github.com/blog/2012/11/02/jvm-fork-modes-and-metaclass-wizardry</id>
    <content type="html"><![CDATA[<p>Over the past decade of finding myself staring at innumerable Ant build files containing a <a href="http://ant.apache.org/manual/Tasks/junit.html">JUnit task</a>, I've come to realize a subtle, yet powerful flag, that when not set properly, almost always leads to random and confusing test catastrophes. The JUnit task supports a number of attributes, but the most important is the <code>fork</code> one. This flag controls whether or not the tests being run are invoked within the same JVM instance of Ant itself or within a new one. By default, this value is set to <code>off</code> (<code>false</code> seems to do the same thing); however, in doing so, I've, from time to time, seen class loading issues or mysterious versions of jars causing strange code to be executed.</p>

<p>Thus, unless there is some reason <em>not</em> to do so, I usually set the the <code>fork</code> attribute to <code>true</code>. But alas, the story doesn't end there! With the value of <code>true</code>, a test suite will be executed within a new JVM, shielded from Ant and 98.72% of the time, this is good enough. Nevertheless, if your code does something <em>really</em> interesting, like augment normal Java code with <a href="http://groovy.codehaus.org/Per-Instance+MetaClass">MetaClass wizardry</a> you might find yourself scratching your head, especially if you change the behavior of the same classes between tests.</p>

<p>For instance, at <a href="http://www.app47.com/">App47</a> we have a number of different software components, written in various languages, that interact via queues. In one particular case, we have a <a href="https://cirrus.app47.com">Rails</a> instance dropping messages on two queues that are ultimately processed by a Java application. The underlying queue implementation changes based upon where the code is running (i.e. in the cloud or within a data center). The data center queuing implementation was added after an initial cloud implementation was written an deployed. In order for the Java application to interact with the underlying queues and their differing implementations, at runtime, one class is dynamically augmented with some extra code, unique to the particular queue it is set to interact with. This magic is actually quite simple and is achieved via Groovy.</p>

<p>Essentially, a <code>Message</code> class (representing a generic message residing on a queue) is dynamically augmented with a <code>Processor</code> class that knows how to actually handle the message instance. In this case, we only have two types of messages, so at run time, when the actual Java process fires up, it is told which type of <code>Processor</code> to shove into a popped <code>Message</code> instance like so:</p>

<p><code>java Groovy MetaClass wizardry
def iprocessor = manufactureProcessor(processor)
iprocessor.setProperties(properties)
Message.metaClass.static.getMessageProcessor &lt;&lt; { return iprocessor }
</code></p>

<p>Thus, when a particular <code>Message</code> instance is popped off of a queue, it asks itself for an instance of a <code>Processor</code> via the <code>getMessageProcessor</code> method and it proceeded to process itself. Without delving into the particulars of underlying queues or workflow, the relevant details here are that the original message was created via a Ruby process and that ultimately the underlying message is a JSON document; what's more, the dynamic code was added to retro fit a newer queueing technology required for data center deployments.</p>

<p>Now back to JUnit and Ant: this varying and dynamic altering of a Java class caused some subtle test failures when run in a forked mode.  It turns out that in addition to the ability to fork the JVM for a test suite, you can control the granularity of how often you can fork. That is, via the <code>forkmode</code> attribute, you can fork one time for all tests or once for <em>each test</em>.</p>

<p>The <code>forkmode</code> attribute can take the values of <code>perTest</code> (which is the default value), <code>once</code>, and <code>perBatch</code> -- in our particular case, the value was initially set to <code>once</code>, which meant that once a <code>Message</code> class was dynamically set with a <code>Processor</code>, it seemingly always had the <em>same one</em>. That is, even in later tests where the underlying logic was setting different <code>Processor</code> instances, they were subsequently ignored in favor of which ever <code>Processor</code> was initially set.  Switching the <code>forkmode</code> attribute to <code>perTest</code> naturally fixed the test failures. This made total sense: each JVM instance for each test had the correctly modified <code>Message</code> class. This incidentally also models how the underlying Java processes work in a production environment: they each have their own JVM.</p>

<p>Therefore, pay particular attention to the settings in an Ant file's JUnit task. The same is true for Maven's <a href="http://maven.apache.org/plugins/maven-surefire-plugin/">Surefire Plugin</a> -- in both cases, the fork mode and the frequency at which tests fork can mean the difference between a successful test suite run or a cacophony of failures.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala &amp; Typesafe: exciting. Not disruptive]]></title>
    <link href="http://aglover.github.com/blog/2012/08/27/scala-and-typesafe-exciting-not-disruptive/"/>
    <updated>2012-08-27T08:35:00+08:00</updated>
    <id>http://aglover.github.com/blog/2012/08/27/scala-and-typesafe-exciting-not-disruptive</id>
    <content type="html"><![CDATA[<p>I recently read an article on <a href="http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework">TheServerSide.com</a> where the author muses about the possible disruptive nature of Typesafe's <a href="http://typesafe.com/company/news/24499">recent Series B cash infusion of $14M</a>:</p>

<p>{% blockquote Cameron McKenzie http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework Disruptive forces in Java: Is Scala the new Spring framework? %}
It's time for a disruptive event that will change how programs are designed, and how applications target the Java Virtual Machine.
{% endblockquote %}</p>

<p>Indeed, he likens the event to <a href="http://www.springsource.com/">SpringSource</a> and its meteoric rise to prominence in a time when web development was a real pain-in-the-neck. Think <a href="http://struts.apache.org/">Struts</a> (which, impressively, is still putting out releases) along with <a href="http://www.oracle.com/technetwork/java/javaee/ejb/index.html">EJB</a> and you have a perfect storm for a lightweight revolution.</p>

<p>Unfortunately for the author's comparison, the world of web development these days is innovating at a breakneck pace. And this innovation isn't necessarily found in Typesafe's <a href="http://typesafe.com/stack">Typesafe Stack</a>. I don't discount its relevance or applicability -- Typesafe Stack is exciting: witness <a href="http://www.theregister.co.uk/2009/04/01/twitter_on_scala/">Twitter's move to Scala</a> a few years ago.  It is not, however, disruptive.</p>

<p>Disruptive is something that completely changes the game. When Spring was unleashed, building Java apps became easier and consequently, you could produce them quicker. That same disruptiveness is happening now in a different community: <a href="http://nodejs.org/">Node</a>. Specifically, frameworks like <a href="http://www.meteor.com/">Meteor</a> and <a href="http://derbyjs.com/">Derby</a>, which are built using Node along with <a href="http://socket.io/">Socket.io</a>, are on the cusp of <em>revolutionizing</em> the web. These nascent frameworks are blazing new trails with respect to the realtime web -- you can build an extremely interactive application in a fraction of the code compared to something like <a href="http://www.playframework.org/">Play</a>. And you can do it before the download and installation of Play completes.</p>

<p>Indeed, the excitement around these frameworks is attracting serious attention. Meteor's recent announcement that it took <a href="http://gigaom.com/cloud/scoop-meteor-gets-9m-in-funding/">$9M in funding</a> is most likely a harbinger of things to come with smart people making calculated bets in realtime, rapidly built, and rapidly deployed apps.</p>

<p>Combine the ideas of these innovative frameworks with <a href="http://vertx.io/">vert.x</a>, which is an "event driven application framework that runs on the JVM" (Node has made <em>event driven</em> a key phrase) that allows you to write web apps in "Ruby, Java, Groovy, JavaScript and Python" and you have a legitimate shot a disruption that'll "change how programs are designed, and how applications target the Java Virtual Machine."</p>

<p>Typesafe Stack is exciting. It's a safe choice for traditional style web development. But the forces changing web development these days are rapidly converging on the Node community. It's there that you'll find disruption.</p>
]]></content>
  </entry>
  
</feed>
