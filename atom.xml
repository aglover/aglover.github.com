<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Disco Blog]]></title>
  <link href="http://aglover.github.com/atom.xml" rel="self"/>
  <link href="http://aglover.github.com/"/>
  <updated>2012-12-10T22:14:24-05:00</updated>
  <id>http://aglover.github.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sinatra, CoffeeScript, and Haml: swinging in 4 steps]]></title>
    <link href="http://aglover.github.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps/"/>
    <updated>2012-12-10T21:49:00-05:00</updated>
    <id>http://aglover.github.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps</id>
    <content type="html"><![CDATA[<p>I recently decided to ditch plain old JavaScript in a <a href="http://www.sinatrarb.com/">Sinatra</a> based application in favor of <a href="http://coffeescript.org/">CoffeeScript</a>. The existing JavaScript wasn&#8217;t terribly complex; however, I was looking at having to add some AJAX based long polling and I couldn&#8217;t bring myself to do it in <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-18/index.html">JavaScript</a>. Accordingly, I decided I&#8217;d use <a href="http://www.ibm.com/developerworks/web/library/j-coffeescript/index.html">CoffeeScript</a>, but, as it turns out, there were a few steps I had to put in place before I could enjoy some significant whitespace delimitation.</p>

<p>First, I installed <a href="https://github.com/Sutto/barista">Barista</a>, which is a nifty Ruby gem that adds transparent CoffeeScript support to any Rack app. There were a few other gems available, however, I decided that Barista had the most mature documentation and the project still showed signs of life.</p>

<p>Once I added the Barista gem to my Gemfile and ran <a href="http://gembundler.com/">Bundler</a>, I next had to require Barista in my Sinatra app; moreover, I had to register the Barista extension via <code>Sinatra.register Barista::Integration::Sinatra</code>. Note, that these steps need to be done after <a href="http://haml.info/">Haml</a> is loaded.</p>

<p>In order for Barista to work properly, you&#8217;ll need to have a JavaScript runtime handy &#8211; there are a number of options here, including <a href="https://github.com/cowboyd/therubyracer">therubyracer</a>; however, after a bit of research, I found some <a href="http://stackoverflow.com/questions/6282307/execjs-and-could-not-find-a-javascript-runtime">concerning notes regarding therubyracer&#8217;s memory consumption</a>. After a bit of surfing, I happened upon <a href="https://github.com/sstephenson/execjs">ExecJS</a>, which states that Node will work just fine. Yeah!</p>

<p>Accordingly, since this application runs on Ubuntu, I got to use a nifty script that I happened to have written about a year ago: <a href="https://github.com/aglover/ubuntu-equip">Ubuntu Equip</a>. In less than a minute, I had the latest and greatest version of Node running by running the command:</p>

<figure class='code'><figcaption><span>script for install Node on Ubuntu</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_node.sh <span class="o">&amp;&amp;</span> bash equip_node.sh
</span></code></pre></td></tr></table></div></figure>


<p>Take note: this script sets a custom <a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool">apt-get</a> repository; otherwise, if you don&#8217;t add this repository, you&#8217;ll end up with an ancient version of Node.</p>

<p>Finally, to actually start coding in CoffeeScript, all you have to do is use Haml&#8217;s handy inline <code>:coffeescript</code> filter:</p>

<figure class='code'><figcaption><span>CoffeeScript spinner</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">:</span><span class="nx">coffeescript</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">lines</span><span class="o">:</span> <span class="mi">13</span><span class="p">,</span> <span class="p">...}</span>
</span><span class='line'>    <span class="nx">spinner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Spinner</span><span class="p">(</span><span class="nx">opts</span><span class="p">).</span><span class="nx">spin</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;spinner&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>That&#8217;s it! The steps required to get Sinatra, CoffeeScript, and Haml playing together are:</p>

<ul>
<li>Install Barista</li>
<li>Configure Sinatra</li>
<li>Install a JavaScript runtime engine</li>
<li>Write some CoffeeScript</li>
</ul>


<p>In short, Barista and <a href="http://www.ibm.com/developerworks/java/library/j-nodejs/">Node</a> make Sinatra swing with CoffeeScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comprehending the mobile development landscape]]></title>
    <link href="http://aglover.github.com/blog/2012/12/02/comprehending-the-mobile-development-landscape/"/>
    <updated>2012-12-02T18:11:00-05:00</updated>
    <id>http://aglover.github.com/blog/2012/12/02/comprehending-the-mobile-development-landscape</id>
    <content type="html"><![CDATA[<p>There&#8217;s <a href="http://www.forbes.com/sites/parmyolson/2012/12/04/5-eye-opening-stats-that-show-the-world-is-going-mobile/">no shortage</a> of <a href="http://www.forbes.com/sites/connieguglielmo/2012/12/04/mary-meekers-must-read-interent-trends-report-says-android-phone-uptake-bests-apple/">mobile growth</a> statistics, but here&#8217;s a few specific ones paint an overall picture of mobility:</p>

<ul>
<li><a href="http://www.digitalbuzzblog.com/infographic-2012-mobile-growth-statistics/">Roughly 87% of the worlds population has a mobile device</a></li>
<li>Earlier this year, <a href="http://readwrite.com/2012/07/05/top-trends-of-2012-the-continuing-rapid-growth-of-mobile">Facebook claimed an astounding 488 million</a> mobile <a href="http://thediscoblog.com/blog/2012/11/28/the-essence-of-mobile-app-performance/">monthly active users </a></li>
<li>Android&#8217;s user base is growing by <a href="http://www.digitalbuzzblog.com/infographic-2012-mobile-growth-statistics/">700,000 subscribers a day</a></li>
</ul>


<p>These three facts clearly point out that mobility is a growing, global phenomenon, and that it&#8217;s drastically changing how people use the Internet. What&#8217;s more, from a technology standpoint, mobile is where the growth is!</p>

<p>But the mobile landscape is as varied as it is big. Unlike a few short years ago, when doing mobile work implied J2ME on a Blackberry, mobile development now encompasses <a href="http://www.android.com/">Android</a>, <a href="http://en.wikipedia.org/wiki/IOS">iOS</a>, <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a>, and even <a href="http://dev.windowsphone.com/en-us">Windows Phone</a>. That&#8217;s 4 distinct platforms with different development platforms and languages &#8211; and I haven&#8217;t even mentioned the <a href="http://thediscoblog.com/blog/2012/09/01/cost-and-the-great-mobile-app-debate/">myriad hybrid options</a> available!</p>

<p>The key to understanding the mobile landscape is an appreciation for the various developmental platforms &#8211; their strengths &amp; weaknesses, speed of development, distribution, and, if you are looking at the consumer market, their payout.</p>

<h5>Android</h5>

<p>Android device distribution, as I pointed out earlier, is growing faster than other platforms, and the Android ecosystem has more than one app store: <a href="https://play.google.com/store?hl=en">Google Play</a> and <a href="http://www.amazon.com/mobile-apps/b?ie=UTF8&amp;node=2350149011">Amazon&#8217;s store</a>, just to name the two most popular ones. And by most accounts, <a href="http://www.engadget.com/2012/06/27/google-play-hits-600000-apps/">Google Play has as many</a> or <a href="http://news.cnet.com/8301-1035_3-57521252-94/can-apples-app-store-maintain-its-lead-over-google-play/">more apps</a> than Apple&#8217;s App Store (careful with this statistic though, see details below regarding <em>payouts</em>).</p>

<p>The massive adoption of Android, however, has lead to <a href="http://opensignal.com/reports/fragmentation.php">fragmentation</a>, which does present some significant challenges with respect to testing. In fact, the reality for most developers is that it is almost impossible to test an app on all combinations of device-OS version profiles in a cost effective manner (this is a growing service industry, by the way).</p>

<p>On a positive note, Java, the native language of Android apps, is a fairly ubiquitous language &#8211; some estimates <a href="http://en.wikipedia.org/wiki/Java_%28programming_language%29">peg as many as 10 million active developers</a> so there&#8217;s no shortage of able-bodied Java developers and their associated tools out there.</p>

<p>Thus, with Android, you have a wide audience (both people with Android devices and developers to build apps) and multiple distribution channels. Yet, this large distribution of disparate devices does present some testing challenges; what&#8217;s more, it can be more difficult to make money on the Android platform compared to iOS, as you&#8217;ll see next.</p>

<h5>iOS</h5>

<p>iOS, the OS for iPhones and iPads, has a <a href="http://mobile.tutsplus.com/tutorials/iphone/understanding-the-ios-ecosystem/">tight ecosystem</a> and an avid user base, <a href="http://www.androidauthority.com/are-iphone-users-richer-better-educated-than-android-users-105032/">willing to spend money</a>, ultimately translating into <a href="http://www.forbes.com/sites/darcytravlos/2012/08/22/five-reasons-why-google-android-versus-apple-ios-market-share-numbers-dont-matter/">more money for developers</a>. That is, even though there are far more Android devices globally than iOS ones, the iTunes App Store generates more money than Google Play, which means more money for developers of popular apps. In many respects, users of iOS devices are also more willing to pay a fee for an app as opposed to Android ones.</p>

<p>The development ecosystem for iOS has a higher barrier to entry when compared to something like Java or JavaScript. OSX is a requirement and the <a href="http://store.apple.com/us/browse/home/shop_mac/family/macbook_pro">cost alone</a> here can be a barrier for a lot of developers; moreover, Objective-C can present some challenges for the faint of heart (manual memory management!). Yet, the tooling provided by Apple is almost universally lauded by the community at large (much like Microsoft&#8217;s VisualStudio) &#8211; <a href="https://developer.apple.com/xcode/">XCode</a> is a slick development tool.</p>

<p>While there isn&#8217;t a lot of device <a href="http://bgr.com/2012/06/12/apple-ios-fragmentation-iphone/">fragmentation on iOS</a>, developers do have to deal with OS fragmentation. That is, there are only a handful of Apple devices but quite a lot of different versions living in the field at any given time due to a lagging factor of user upgrades.</p>

<p>The iOS platform certainly offers a direct path to revenue, provided you can build a stellar app; however, compared to Android, this is a closed community, which has the tendency to rub some portion of developmental community wrong. Given you can quickly embrace Objective-C and afford the requisite software, iOS is almost always the first platform app developers target.</p>

<h5>HTML5</h5>

<p>HTML5 is truly universal and its apps are available on all platforms without any need to port them &#8211; JavaScript is as ubiquitous as Java; what&#8217;s more, HTML itself has almost no barrier to entry, making HTML5 and JavaScript a force to content with when it comes to finding talented developers and mass distribution. Cost isn&#8217;t even really part of the HTML5 equation too &#8211; tools and frameworks are free.</p>

<p>Yet, HTML5 apps suffer from a <a href="http://thediscoblog.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results/">distribution challenge</a> &#8211; the major app stores do not carry these apps! Thus, in large part, as an HTML5 app developer, you are relying on a user to type in your URL into a browser. I for one, almost never type in a URL on my iPhone (while I will on my iPad). Lastly, <a href="http://thediscoblog.com/blog/2012/09/25/modevtablet-2012-video-mobile-web-realities/">HTML5 is no where near parity with respect to UX</a> compared to native apps (and may <em>never be</em>). This, however, is only a disadvantage if you are building an app that requires a strong UX. There are plenty of great HTML5 apps out there!</p>

<p>HTML5 offers an extremely low developmental barrier to entry and the widest support available &#8211; all smart devices have browsers (note, <a href="http://thediscoblog.com/blog/2012/09/24/a-tale-of-three-browsers/">they aren&#8217;t all created equal</a>!); however, because there isn&#8217;t a viable distribution channel, these apps have limited opportunity to make money.</p>

<h5>Windows Phone</h5>

<p>Windows is <a href="http://www.forbes.com/sites/ericsavitz/2012/12/04/microsoft-dec-qtr-surface-sales-below-1m-units-analyst-says/">still unproven</a> but could be an opportunity to get in early &#8211; first movers in Apple&#8217;s App Store without a doubt made far more money than if they had submitted the same apps today. In this case, you if want a truly native experience you&#8217;ll build apps on the .NET platform (presumably C#). Windows machines are far cheaper than OSX ones, so there is little financial barrier other than license fees for VisualStudio and a developer fee for the Windows Phone Marketplace.</p>

<p>Indeed, it appears that Microsoft is <a href="http://www.windowsphone.com/en-us/store">modeling their app store</a> and corresponding policies off of Apple&#8217;s &#8211; thus there is a <a href="http://www.inquisitr.com/423599/windows-phone-8-app-downloads-improve-by-100/">tightly managed distribution channel</a>, presenting an opportunity to reach a wide audience and earn their money. But, at this point, the wide audience has yet to develop.</p>

<h5>That&#8217;s 4, but there&#8217;s still more!</h5>

<p>As I alluded to in the beginning of this post, there are 4 <em>primary platforms</em> and myriad hybrid options, such as <a href="http://phonegap.com/">PhoneGap</a> and <a href="http://www.appcelerator.com/">Appcelerator</a>, for example. These hybrid options have various advantages and disadvantages; however, the primary concerns one needs to think through are still speed of development, distribution, and payout.</p>

<p>Before you embark on a mobile development effort, it pays to have the end in mind &#8211; that is, before you code, have tangible answers for app distribution, development effort, and potential payout as these points will help guide you through the mobile landscape.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The essence of mobile app performance]]></title>
    <link href="http://aglover.github.com/blog/2012/11/28/the-essence-of-mobile-app-performance/"/>
    <updated>2012-11-28T16:59:00-05:00</updated>
    <id>http://aglover.github.com/blog/2012/11/28/the-essence-of-mobile-app-performance</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://aglover.github.com/images/mine/binoculars.png">Are you pumped that you just published an app? Yep, me too. But guess what? Once you&#8217;ve built, tested, and deployed a mobile app, you&#8217;ll find yourself concerned with two factors:</p>

<ul>
<li>visibility</li>
<li>engagement</li>
</ul>


<p>The view app stores like <a href="http://www.apple.com/itunes/">iTunes</a> and <a href="https://play.google.com/store?hl=en">Google Play</a> provide for you regarding app usage is fairly blurry. Downloads, the metric you get for free, doesn&#8217;t really tell you anything about how your app is being used.</p>

<p>While, at this point, there are essentially two platforms (<a href="http://en.wikipedia.org/wiki/IOS">iOS</a> &amp; <a href="http://en.wikipedia.org/wiki/Android_(operating_system">Android</a>)), it&#8217;s a big big world out there with a <a href="http://www.androidpit.com/mobile-world-congress">ton of different devices</a>! What&#8217;s more, these devices, whether <a href="http://bgr.com/2012/05/16/android-fragmentation-visualized-opensignalmaps/">Android</a> <em>or <a href="http://bgr.com/2012/06/12/apple-ios-fragmentation-iphone/">iOS</a></em> are fragmented, which means your app will behave in some manner you haven&#8217;t tested. Plus, the spectrum of varied users almost guarantees they are going to do something with your app that you&#8217;ve never even considered.  In an app world, you can&#8217;t assume who will use your app!</p>

<p>When&#8217;s the last time you downloaded an app that has a measly one or two star rating? Me, neither. Once your app is live, you&#8217;ll want to know what&#8217;s happening. You&#8217;ll want to know how your app is behaving and you&#8217;ll want to know as quickly as possible before a landslide of negative feedback.</p>

<p>Behavior can be ascertained in two ways:</p>

<ul>
<li>logging</li>
<li>events</li>
</ul>


<p>Logging is a no-brainer &#8211; but remember, crash logs are not enough sometimes! While you can get these in some form or another from app stores, oftentimes monitoring error and/or warning logs can bring to light that future crash. On that same note, don&#8217;t over log either &#8211; the loquacious logger usually ends up being a nuisance by flooding you with too much information. Think <a href="http://en.wikipedia.org/wiki/Signal-to-noise_ratio">signal-to-noise</a> ratio here.</p>

<p>Events are like log messages, but they&#8217;re more typed &#8211; rather than describing geek-speak information like a JSON parsing warning at line 43, they capture succinct actions like a button click, a picture taken, a video download. The sky&#8217;s the limit when it comes to what behavior you wish to capture with an event!</p>

<p>Events come in a lot of flavors &#8211; they can have a timer associated with them and, in some respects, they can also be categorized as a session. Either which way you spin it though, events tell you <em>how your app is being used</em>. Combine these tools with dimension data like device information and geo-location and you start to see what&#8217;s happening with your app in real time &#8211; your view is certainly less cloudy!</p>

<p>Another question: are you giving your app away for free <em>without any monetization strategy</em>?  I didn&#8217;t think so. You wouldn&#8217;t have read this far otherwise. <a href="http://www.insidefacebook.com/2009/01/12/application-insights-how-exactly-is-mau-calculated/">Engagement</a> is about understanding the lifetime value of a user. You want some sort of return on your investment (and if it isn&#8217;t money, then it is certainly engaged eyeballs), otherwise you wasted your time building the app.</p>

<p>When&#8217;s the last time you downloaded an app, launched it, decided it was terrible and uninstalled it immediately? Yeah, me too (it happened while I was writing this post). I recently spoke with a government agency that disclosed to me that they had over 500,000 downloads of their app. That&#8217;s great news! Unfortunately, they had no idea if the app was being used. I bet the app I just deleted is happy they had another download too.</p>

<p>What everyone wants to know, in addition to <em>how</em> their app is being used, is <em>whether it is being used at all</em>. Are people engaged in actively using your app or do they <a href="http://www.nuance.com/ucmprod/groups/enterprise/@web-enus/documents/collateral/nc_020218.pdf">abandon</a> it? A telling metric here is <em>active users</em> &#8211; this accurately discloses how often someone uses your app. And if your monetization strategy relies on ads, for example, this metric means everything to you.</p>

<p>Just like with visibility, if you add dimension data like device information, geo-location, and even duration, a fairly vivid picture of user engagement is painted for you. You can ascertain if your app is actually delivering value.</p>

<p>Building, testing, and deploying your app is no easy feat. Congrats on getting that far! But don&#8217;t forget about what happens after that effort finishes. Putting an app out into the wild without some sort of monitoring is like driving your car from the back seat while sitting backwards. All you see is outdated and you have no view as to where you&#8217;re headed.  Visibility and engagement. If they don&#8217;t matter to you now, they will.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM fork modes and metaclass wizardry]]></title>
    <link href="http://aglover.github.com/blog/2012/11/02/jvm-fork-modes-and-metaclass-wizardry/"/>
    <updated>2012-11-02T16:30:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/11/02/jvm-fork-modes-and-metaclass-wizardry</id>
    <content type="html"><![CDATA[<p>Over the past decade of finding myself staring at innumerable Ant build files containing a <a href="http://ant.apache.org/manual/Tasks/junit.html">JUnit task</a>, I&#8217;ve come to realize a subtle, yet powerful flag, that when not set properly, almost always leads to random and confusing test catastrophes. The JUnit task supports a number of attributes, but the most important is the <code>fork</code> one. This flag controls whether or not the tests being run are invoked within the same JVM instance of Ant itself or within a new one. By default, this value is set to <code>off</code> (<code>false</code> seems to do the same thing); however, in doing so, I&#8217;ve, from time to time, seen class loading issues or mysterious versions of jars causing strange code to be executed.</p>

<p>Thus, unless there is some reason <em>not</em> to do so, I usually set the the <code>fork</code> attribute to <code>true</code>. But alas, the story doesn&#8217;t end there! With the value of <code>true</code>, a test suite will be executed within a new JVM, shielded from Ant and 98.72% of the time, this is good enough. Nevertheless, if your code does something <em>really</em> interesting, like augment normal Java code with <a href="http://groovy.codehaus.org/Per-Instance+MetaClass">MetaClass wizardry</a> you might find yourself scratching your head, especially if you change the behavior of the same classes between tests.</p>

<p>For instance, at <a href="http://www.app47.com/">App47</a> we have a number of different software components, written in various languages, that interact via queues. In one particular case, we have a <a href="https://cirrus.app47.com">Rails</a> instance dropping messages on two queues that are ultimately processed by a Java application. The underlying queue implementation changes based upon where the code is running (i.e. in the cloud or within a data center). The data center queuing implementation was added after an initial cloud implementation was written an deployed. In order for the Java application to interact with the underlying queues and their differing implementations, at runtime, one class is dynamically augmented with some extra code, unique to the particular queue it is set to interact with. This magic is actually quite simple and is achieved via Groovy.</p>

<p>Essentially, a <code>Message</code> class (representing a generic message residing on a queue) is dynamically augmented with a <code>Processor</code> class that knows how to actually handle the message instance. In this case, we only have two types of messages, so at run time, when the actual Java process fires up, it is told which type of <code>Processor</code> to shove into a popped <code>Message</code> instance like so:</p>

<figure class='code'><figcaption><span>Groovy MetaClass wizardry</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">def</span> <span class="n">iprocessor</span> <span class="o">=</span> <span class="n">manufactureProcessor</span><span class="o">(</span><span class="n">processor</span><span class="o">)</span>
</span><span class='line'><span class="n">iprocessor</span><span class="o">.</span><span class="na">setProperties</span><span class="o">(</span><span class="n">properties</span><span class="o">)</span>
</span><span class='line'><span class="n">Message</span><span class="o">.</span><span class="na">metaClass</span><span class="o">.</span><span class="na">static</span><span class="o">.</span><span class="na">getMessageProcessor</span> <span class="o">&lt;&lt;</span> <span class="o">{</span> <span class="k">return</span> <span class="n">iprocessor</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, when a particular <code>Message</code> instance is popped off of a queue, it asks itself for an instance of a <code>Processor</code> via the <code>getMessageProcessor</code> method and it proceeded to process itself. Without delving into the particulars of underlying queues or workflow, the relevant details here are that the original message was created via a Ruby process and that ultimately the underlying message is a JSON document; what&#8217;s more, the dynamic code was added to retro fit a newer queueing technology required for data center deployments.</p>

<p>Now back to JUnit and Ant: this varying and dynamic altering of a Java class caused some subtle test failures when run in a forked mode.  It turns out that in addition to the ability to fork the JVM for a test suite, you can control the granularity of how often you can fork. That is, via the <code>forkmode</code> attribute, you can fork one time for all tests or once for <em>each test</em>.</p>

<p>The <code>forkmode</code> attribute can take the values of <code>perTest</code> (which is the default value), <code>once</code>, and <code>perBatch</code> &#8211; in our particular case, the value was initially set to <code>once</code>, which meant that once a <code>Message</code> class was dynamically set with a <code>Processor</code>, it seemingly always had the <em>same one</em>. That is, even in later tests where the underlying logic was setting different <code>Processor</code> instances, they were subsequently ignored in favor of which ever <code>Processor</code> was initially set.  Switching the <code>forkmode</code> attribute to <code>perTest</code> naturally fixed the test failures. This made total sense: each JVM instance for each test had the correctly modified <code>Message</code> class. This incidentally also models how the underlying Java processes work in a production environment: they each have their own JVM.</p>

<p>Therefore, pay particular attention to the settings in an Ant file&#8217;s JUnit task. The same is true for Maven&#8217;s <a href="http://maven.apache.org/plugins/maven-surefire-plugin/">Surefire Plugin</a> &#8211; in both cases, the fork mode and the frequency at which tests fork can mean the difference between a successful test suite run or a cacophony of failures.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MoDevTablet 2012 video: Mobile Web Realities]]></title>
    <link href="http://aglover.github.com/blog/2012/09/25/modevtablet-2012-video-mobile-web-realities/"/>
    <updated>2012-09-25T12:51:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/25/modevtablet-2012-video-mobile-web-realities</id>
    <content type="html"><![CDATA[<p>Recently, I had the distinct pleasure of speaking at <a href="http://modevtablet.com/">MoDevTablet</a> where I gave a presentation entitled &#8220;Mobile Web Realities&#8221; and the <a href="http://www.meetup.com/modevdc/">good folks who put on the conference</a> recorded it.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/rqfJS3F_YYk "></iframe></div>




<p></p>


<p>In summary: a year ago, hybrid development frameworks like <a href="http://phonegap.com/">PhoneGap</a> that leverage HTML5 were poised to radically alter mobile app development, but the potential has failed to live up to the promise: Faster/Easier/Cheaper <em>doesn&#8217;t always mean</em> Better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A tale of three browsers]]></title>
    <link href="http://aglover.github.com/blog/2012/09/24/a-tale-of-three-browsers/"/>
    <updated>2012-09-24T15:39:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/24/a-tale-of-three-browsers</id>
    <content type="html"><![CDATA[<p>I recently spent time evaluating various mobile browsers&#8217; HTML5 compatibility in an effort to understand the state of the mobile web. Along the way, I discovered that the good folks at Facebook, <a href="http://www.zdnet.com/facebooks-mark-zuckerberg-knocks-html5-in-favor-of-native-apps-7000004082/">who happen to have quite a lot of experience with HTML5</a> and <a href="http://gantdaily.com/2012/09/12/facebook-ceo-mark-zuckerberg-promises-better-mobile-strategy/">mobility</a> put together a handy website called <a href="http://www.rng.io/">Ringmark</a>.</p>

<p>As the Facebook development team puts it, Ringmark</p>

<blockquote><p>helps you understand which mobile browsers support the functionality your app needs.</p><footer><strong>Facebook HTML5 Blog</strong> <cite><a href='http://developers.facebook.com/html5/blog/post/2012/02/27/announcing-ringmark--a-mobile-browser-test-suite/'>developers.facebook.com/html5/&hellip;</a></cite></footer></blockquote>


<p>Thus, with Ringmark you can ascertain a particular browser&#8217;s compatibility with HTML5 by simply going to <a href="http://www.rng.io/">rng.io</a>.</p>

<p>Needless to say, I had some fun comparing Mobile Safari on my iPad to my Android 2.3.2 device. Interestingly enough, the fun really started when I decided to see what the feature functionality gap was between three browsers <em>on my desktop</em>.</p>

<p><img class="center" src="http://aglover.github.com/images/mine/rng_io_3_browsers.png">For the test, I used Chrome, Safari, and Firefox &#8211; all three browsers are up to date as of the writing of this entry as well. The center browser is Chrome, left is Safari and right is Firefox.</p>

<p>As you can see, all 3 browsers score <em>differently</em> &#8211; Chrome scoring best with only 29 failures in Ring 1 and Safari, the worst with over 40 failures. None even made it to Ring 2.</p>

<p>If you think HTML5 poses some compatibility issues for mobile devices, you need to widen your scope: HTML5 support varies across <em>everything</em>. Indeed, the <a href="http://en.wikipedia.org/wiki/Browser_wars">Browser Wars</a> are still being fought. The big difference now is that the wars are on multiple fronts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB from the trenches: prudent production planning]]></title>
    <link href="http://aglover.github.com/blog/2012/09/11/mongodb-from-the-trenches-prudent-production-planning/"/>
    <updated>2012-09-11T11:34:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/11/mongodb-from-the-trenches-prudent-production-planning</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://aglover.github.com/images/mine/mongodb_icon.png">While starting out with <a href="http://http://www.Mongodb.org/">MongoDB</a> is super easy, there are few things you should keep in mind as you move from a development environment into a production one. No one wants to get paged at 3am because a customer can’t complete an order on your awesome e-commerce site because your database isn’t responding fast enough or worse, is down.</p>

<p>Planning for a production deployment with MongoDB <a href="http://www.mongodb.org/display/DOCS/Production+Notes">isn&#8217;t rocket science</a>, but I must warn you, it&#8217;ll cost money, especially if your application actually gets used <em>a lot</em>, which is every developer&#8217;s dream. Therefore, like all databases, you need to plan for high availability and you’ll want the maximum performance benefits you can get for your money in a production environment.</p>

<p>First and foremost, <a href="http://www.mongodb.org/display/DOCS/Caching">Mongo likes memory</a>; that is, frequently accessed data is stored directly in memory; moreover, writes are also stored in memory until being flushed to disk. It’s imperative that you provide enough memory for Mongo to store a valid working dataset; otherwise, Mongo will have to go to the disk to retrieve, what should be, fast lookups via indexed data. This is sloooooow. Therefore, a good rule of thumb is to plan to run your Mongo instances with <em>as much memory as you can afford</em>.</p>

<p>You can get an idea for your working data set by running <code>Mongostat</code> &#8211; this is a handy command line utility that’ll give you a second-by-second view into what Mongo is up to &#8211; one particular metric you’ll see is resident memory (labeled as <code>res</code>) &#8211; this will give you a good idea of how much memory Mongo’s using at any given moment. If this number exceeds what you have available on a given machine, then Mongo is having to go to disk, which is going to be a lot slower.</p>

<p>Not all data can be stored in memory; every document in Mongo is eventually written to disk. And like always, I/O is always a slow operation compared to working with memory. This is why, for example, writes in Mongo can be so fast &#8211; drivers allow you to, essentially, fire and forget and the actual write to disk is done later, asynchronously. Reads can also incur an I/O penalty when something requested isn’t in working memory.</p>

<p>Thus, for high performance reads and writes, <em>pay attention to the underlying disks</em>. A key metric here is IOPS or input/output operations per second. Mongo will be extremely happy, for example, <a href="http://www.mongodb.org/display/DOCS/SSD">in an SSD environment</a>, provided you can afford it. <a href="http://en.wikipedia.org/wiki/IOPS">Just take a look at various IOPS comparisons between SSDs and traditional spinning disks</a> &#8211; super fast RPM disks can achieve IOPS in the 200 range. Typical SSD drives are attaining wild numbers, orders of magnitude higher (like in the 100’s of thousands of IOPS). It’s crazy how fast SSDs are compared to traditional hard drives.</p>

<p>RAM is still faster than SSDs, so you’ll still want to understand your working set of data and ensure you have plenty of memory to contain it.</p>

<p>Finally, for maximum availably, <em>you really should be using Mongo’s <a href="http://www.mongodb.org/display/DOCS/Replica+Sets">replica sets</a></em>. Setting up a cluster of Mongo instances is so incredibility easy that there really isn’t a good reason not to do it. The benefits of doing so are manifold, including:</p>

<ul>
<li>data redundancy</li>
<li>high availability via automated failover</li>
<li>disaster recovery</li>
</ul>


<p>Plus, running a replica set makes maintenance so much easier as you can bring nodes off line and on line w/out an interruption of service. And you can run nodes in a replica set on commodity hardware (don’t forget about my points regarding memory and I/O though).</p>

<p>Accordingly, when looking to move Mongo into a production environment, you need to consider memory, I/O performance, and replica sets. Running a high performant, high availability replica set&#8217;ed Mongo, not surprisingly, will cost you. If you&#8217;re looking for options for running Mongo in a production environment, I can&#8217;t recommend enough the team at <a href="https://mongohq.com/">MongoHQ</a>.</p>

<p>I&#8217;m a huge fan of Mongo. Check out some of the articles, videos, and podcasts that I&#8217;ve done, which focus on Mongo, including:</p>

<ul>
<li><a href="http://www.ibm.com/developerworks/java/library/j-javadev2-12/">Java development 2.0: MongoDB: A NoSQL datastore with (all the right) RDBMS moves</a></li>
<li><a href="http://public.dhe.ibm.com/software/dw/demos/jmongodb/index.html">Video demo: An introduction to MongoDB</a></li>
<li><a href="http://www.ibm.com/developerworks/java/library/j-gloverpodcast/#Horowitz">Eliot Horowitz on MongoDB</a></li>
<li><a href="http://www.ibm.com/developerworks/java/library/j-gloverpodcast4/index.html#francia">10gen&#8217;s Steve Francia talks MongoDB</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Past performance is no guarantee of future results]]></title>
    <link href="http://aglover.github.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results/"/>
    <updated>2012-09-07T11:25:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results</id>
    <content type="html"><![CDATA[<p>In the early days of the desktop computing, software delivery was a matter of going to a store <em>and buying a box</em>. Subsequently, you then went home and manually inserted install disks into a computer. It was, in retrospect, a real pain in the neck. Accordingly, for most people, the software that was loaded on the PC they bought was basically what they only used for the life of the machine. Adding new software to your home PC was an event.</p>

<p><img class="right" src="http://aglover.github.com/images/mine/4047547668_f46315f196_m.jpg">What&#8217;s more, finding out what to buy and where to buy it was tedious &#8211; if you were lucky and knew someone really into computers, you&#8217;d get the scoop on some super useful software worth the effort to jump in a car, drive to the store, purchase, jump back into your car, get home and install it. A few hours later (assuming the store had the box you were looking for), you&#8217;d be up and running.</p>

<p>The Web changed this state of software stagnancy for the typical computer user &#8211; now interesting and useful things could be rapidly done on a computer in an on-demand fashion <em>without</em> the need to go somewhere and pick up a box! Need to look up the definition of a word? No problem, go to <a href="http://dictionary.reference.com/">dictionary.com</a>. Need to write a document and share it with various people? <a href="http://www.google.com/enterprise/apps/business">Google Apps</a> to the rescue! Need to a way to manage your complex sales process? Look no further than <a href="http://www.salesforce.com/">Salesforce.com</a>. In essence, in the last decade, the web has become an <em>effective software delivery channel for consumers</em>. And in the process that channel has virtually wiped out desktop applications. I can&#8217;t remember the last time I bought a software product box from a store. Can you?</p>

<p>Finding out what to use on the web can be daunting though. We all discover something useful on a daily basis; in many respects, the means for learning about new and useful websites is facilitated via social media, but finding web apps is like wading through a jungle for the average consumer. Google, for the most part, is the web&#8217;s product catalog, yet, you the consumer are left to determine a particular product&#8217;s efficacy if someone in your social network hasn&#8217;t already vouched for it.  Consequently, the breadth of web applications the average consumer uses regularly is probably as narrow as it was before the advent of the web.</p>

<p>It&#8217;s easy then to look at the rapidly evolving mobile landscape and the ever growing popularity of HTML5 and predict a similar result: native mobile apps will go the route of the web because <em>that&#8217;s what has happened already</em>. Web apps will destroy native apps just like they destroyed desktop ones! Yet, there is one thing missing in this equation: <em>software delivery via curated app stores</em>. You see, what was absent in the early days of the desktop was an accessible online app store.</p>

<p><img class="left" src="http://aglover.github.com/images/mine/AppStore_icon.png">All major mobile platforms offer app stores: Apple has its <a href="http://www.apple.com/apps">App Store</a>, Google as <a href="https://play.google.com/store">Play</a>, Amazon has its <a href="http://www.amazon.com/mobile-apps/b?ie=UTF8&amp;node=2350149011">Appstore for Android</a>, and the list goes on. These app stores make it extremely easy to distribute software and, what&#8217;s more, make it straightforward for consumers to find relevant apps. Need an app to calculate tips? No problem, search it out in your app store of device, read the reviews, download the most highly reviewed one, and within minutes you&#8217;re calculating the appropriate tip before you finish your dinner. That&#8217;s revolutionary!</p>

<p>This app store trend, by the way, is starting to appear on desktops and the web because of their success on mobile devices. It should come as no surprise that my most recent desktop software purchases were from the <a href="http://www.apple.com/osx/apps/app-store.html">Mac App Store</a>; what&#8217;s more, you can browse the <a href="https://chrome.google.com/webstore">Chrome web store</a> from your desktop as easily as you can browse the iOS App Store on your iPad.</p>

<p>Thus, software delivery on the mobile platform is, at least for the foreseeable future, firmly established via app stores. And app stores cater to native apps (100% native and/or hybrid) only. The average person will not look for useful apps via their device&#8217;s browser: that route is still a jungle. And, at this point, there is no viable pure play mobile web app delivery channel.</p>

<p>If you are betting against native apps, you had better consider how consumers find and consume apps. Just because the web made it easier for consumers to use apps (and thus crushed desktop applications in the process) before the mobile revolution, it doesn&#8217;t necessarily mean native apps on mobile devices will be crushed by web apps <em>again</em>. The software delivery channel is firmly established on mobile devices and until those app stores support icon-ifying URLs, native is the only means for mass consumer discovery.</p>

<p><em>Thanks to <a href="http://www.vectorportal.com/stockvectors">Software Box Vector Blue</a> for the image of a software box.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB from the trenches: masochistic embedded collections]]></title>
    <link href="http://aglover.github.com/blog/2012/09/03/mongodb-from-the-trenches-masochistic-embedded-collections/"/>
    <updated>2012-09-03T21:47:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/03/mongodb-from-the-trenches-masochistic-embedded-collections</id>
    <content type="html"><![CDATA[<p><a href="http://www.mongodb.org/">MongoDB</a> supports rich documents that can include, among other things, embedded documents. This feature embodies a <em>has-a</em> relationship quite nicely and can, if modeled properly, reduce the number of finds required to ascertain certain data as there are no joins in Mongo.</p>

<p>As classic example of embedding a collection of documents inside a parent document is contact addresses (i.e. mailing, email, twitter, etc) associated with a person. Think business cards. You can, of course, model this in any number of ways &#8211; in the traditional relational world, this would be a one-to-many relationship between at least two tables. Nevertheless, with a document-oriented database, you can model a parent <code>person</code> document with an embedded collection of <code>contacts</code> that are each themselves documents containing, say, <em>type</em> (i.e. phone, twitter, email) and <em>value</em> (which could be 555-555-555, @jon_doe, etc).</p>

<p>This relationship with Mongo works nicely <em>if the child embedded document never needs to exist outside of its parent</em>. In the case of a business card, the contact document representing a phone number, for example, doesn&#8217;t necessarily make sense outside the context of the person who it belongs to. With this relationship, you can easily find a particular person via his/her phone number (that is, via Mongo&#8217;s query language, you can reach inside arrays via its <a href="http://www.mongodb.org/display/DOCS/Dot+Notation+(Reaching+into+Objects">dot notion</a>) effortlessly). And, once you have a handle to a person, you don&#8217;t need to execute a series of finds to ascertain contact information &#8211; it&#8217;s all right there.</p>

<p>Nevertheless, things start to get painful quickly if you&#8217;d like to operate solely on a singular embedded document. That is, if you execute finds that are intended to deal with the expected resultant embedded document, you&#8217;re in for some work: as of Mongo 2.2, you can&#8217;t select a singular document from within a collection residing in a parent via a query. A find in this case will pull <em>everything</em> &#8211; it&#8217;s up to you (i.e your application) to filter things.</p>

<p>An example will probably help: imagine the business card example from earlier &#8211; a <code>person</code> document containing an embedded collection of <code>contacts</code>:</p>

<figure class='code'><figcaption><span>person document</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">first_name</span><span class="o">:</span> <span class="s1">&#39;Andrew&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">last_name</span><span class="o">:</span> <span class="s1">&#39;Glover&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">contacts</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span>  <span class="s1">&#39;cell&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;555-555-5555&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">last_updated</span><span class="o">:</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mi">01</span> <span class="mi">23</span><span class="o">:</span><span class="mi">41</span><span class="o">:</span><span class="mi">51</span> <span class="nx">UTC</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span>  <span class="s1">&#39;home&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;555-555-5551&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">last_updated</span><span class="o">:</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">11</span> <span class="mi">12</span><span class="o">:</span><span class="mi">21</span><span class="o">:</span><span class="mi">11</span> <span class="nx">UTC</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To find this document by a phone number is easy:</p>

<figure class='code'><figcaption><span>finding a person by phone number</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="nx">db</span><span class="p">.</span><span class="nx">persons</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="s1">&#39;contacts.value&#39;</span><span class="o">:</span><span class="s1">&#39;555-555-5555&#39;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what if you wanted to find the <code>contact</code> that was recently updated, say since the beginning of the month, and change its value or add some additional meta-data? The query <em>you&#8217;d like</em> would look something like:</p>

<figure class='code'><figcaption><span>finding via last_updated</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">persons</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="s1">&#39;contacts.last_updated&#39;</span><span class="o">:</span> <span class="p">{</span><span class="nx">$gte</span><span class="o">:</span> <span class="nx">datetime</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">)}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This query works and will match the person &#8216;Andrew Glover&#8217; &#8211; but the catch here is that what is returned is the entire document. You can add query limiters if you&#8217;d like (i.e. <code>{contacts:1}</code>), however, that will merely return a <code>person</code> document with only a collection of <code>contacts</code>. Thus, you are left to iterate over the resultant collection of <code>contacts</code> and work your magic that way. That is, you still have to find the contact document that was edited this month! In your code!</p>

<p>No big deal, you say? This particular example is, indeed, a bit contrived; however, imagine if the overall document is quite large (maybe it&#8217;s not a <code>person</code> but an <code>organization</code>!) and that the embedded collection is also lengthly (how many employees does Google have?). Now this simple update is pulling a lot of bytes across the wire (and taxing Mongo in the process) and then your app is working with a lot of bytes in memory (now the document is taxing your app!). Did you want this operation to happen quickly, under load too?</p>

<p>Thus, with embedded document collections, if you envision having to work with a particular embedded document <em>in isolation</em>, it is better, at this point, to model has-a relationships with distinct collections (i.e. in this example, life would be much easier if there is a <code>person</code> collection and a <code>contacts</code> one). Indeed, the flexibility of document-oriented, schema-less data stores is a boon to rapid evolutionary development. But you still have to do some thinking up front. Unless, of course, you&#8217;re a masochist.</p>

<p>I&#8217;m a huge fan of Mongo. Check out some of the articles, videos, and podcasts that I&#8217;ve done, which focus on Mongo, including:</p>

<ul>
<li><a href="http://www.ibm.com/developerworks/java/library/j-javadev2-12/">Java development 2.0: MongoDB: A NoSQL datastore with (all the right) RDBMS moves</a></li>
<li><a href="http://public.dhe.ibm.com/software/dw/demos/jmongodb/index.html">Video demo: An introduction to MongoDB</a></li>
<li><a href="http://www.ibm.com/developerworks/java/library/j-gloverpodcast/#Horowitz">Eliot Horowitz on MongoDB</a></li>
<li><a href="http://www.ibm.com/developerworks/java/library/j-gloverpodcast4/index.html#francia">10gen&#8217;s Steve Francia talks MongoDB</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cost and the Great Mobile App Debate]]></title>
    <link href="http://aglover.github.com/blog/2012/09/01/cost-and-the-great-mobile-app-debate/"/>
    <updated>2012-09-01T11:07:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/01/cost-and-the-great-mobile-app-debate</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/HTML5-logo.svg/200px-HTML5-logo.svg.png"> The Great Mobile App Debate rages on; in fact, it seems of late, the debate has been heating up <em>dramatically</em>. And interestingly enough, some intriguing people are joining this lively discussion including <a href="http://martinfowler.com/">Martin Fowler</a>. In his presentation dubbed &#8217;<a href="http://martinfowler.com/articles/multiMobile/">Developing Software for Multiple Devices</a>&#8217;, Martin makes the case for <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a> citing the reduced cost of building a single platform app as opposed to building an app for each platform. What&#8217;s more, he notes that the option to build an app via some cross-platform framework (presumably he&#8217;s talking about <a href="http://thinkmobile.appcelerator.com/blog/bid/211263/The-Great-Mobile-App-Debate-Native-vs-HTML5">Appcelerator</a> or the <a href="http://xamarin.com/">Xamarin</a>&#8217;s of the world) isn&#8217;t viable. He invokes memories from the early days of desktop apps:</p>

<blockquote><p>By applying the lessons of history we can infer that cross-platform toolkits will not be a viable solution to the multitude of mobile platforms.</p><footer><strong>Martin Fowler</strong> <cite><a href='http://martinfowler.com/articles/multiMobile/#desktop-history'>Developing Software for Multiple Devices</a></cite></footer></blockquote>


<p>And he thus <a href="http://martinfowler.com/articles/multiMobile/#uncanny">ties this direction</a> into a potential result of building apps that suffer from &#8221;<a href="http://en.wikipedia.org/wiki/Uncanny_valley">The Uncanny Valley</a>&#8221; (i.e. &#8220;slight imperfections of an almost-native user interface cause a disproportionate negative response for the user&#8221;).</p>

<p>This analogy, however, isn&#8217;t necessarily correct. If you invoke memories of, say, Java and think back to AWT or Swing and the resulting, almost always, underwhelming UI/UX, then you&#8217;ve got a point. But the UIs of say, Xamarin are 100% native (which is the polar opposite of Swing!)&#8211; there is no <a href="http://martinfowler.com/articles/multiMobile/#frankenstein">Frankenstein-ness</a> here. There is no mimicking going on &#8211; a single code base is compiled <em>natively</em> into the underlying platform&#8217;s UI. All you have to do is take a look at a sample application built using <a href="http://www.coronalabs.com/products/corona-sdk/">Corona</a> and you&#8217;ll realize that at this point, the Uncanny Valley argument for cross-platform frameworks is <a href="http://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt">FUD</a>.</p>

<p>Which leads full circle back to the underlying argument for HTML5: cost. A cross-platform framework that produces a stellar app with exceptional UX <em>is cost effective</em>! You potentially build one app for multiple devices and it meets the terrifically high standards that consumers demand of a mobile app. And this is one thing that is often not met with pure play mobile web apps: they are not yet at parity with native-ness. More often than not, I find myself looking at <a href="http://wtfmobileweb.com/">Frankenstein mobile web apps</a>.</p>

<p>This isn&#8217;t to say HTML5 isn&#8217;t worth consideration. There are certainly apps that have been built as pure play web apps and they are terrific. The point of the discussion shouldn&#8217;t focus on HTML5 versus Native versus Hybrid. It should instead focus on what you&#8217;re trying to build. If you want to build a fantastic interactive app that wows users (think something like <a href="http://flipboard.com/">Flipboard</a>) then you have a different line of thinking to pursue. If your goal is to build an information app that conveys data then UI/UX could be secondary and thus, an HTML5 option might just meet your needs.</p>

<p>The Great Mobile App Debate shows no sign of abating anytime soon. HTML5 offers a plethora of promises for awesomeness. Someday this might be the case; however, HTML5 isn&#8217;t an app development silver bullet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling Mongo documents with Mongoose]]></title>
    <link href="http://aglover.github.com/blog/2012/08/29/modeling-mongo-documents-with-mongoose/"/>
    <updated>2012-08-29T21:45:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/29/modeling-mongo-documents-with-mongoose</id>
    <content type="html"><![CDATA[<p>Without a doubt, one of the quickest ways to build an application that leverages <a href="http://www.mongodb.org/">MongoDB</a> is with Node. It&#8217;s as if the two platforms were made for each other; the sheer number of Node libraries available for dealing with Mongo is testimony to a vibrant, innovative community. Indeed, one of my favorite Mongo focused libraries these days is <a href="http://mongoosejs.com/">Mongoose</a>.</p>

<p>Briefly, Mongoose is an object modeling framework that makes it incredibly easy to model collections and ultimately work with intuitive objects that support a rich feature set. Like most things in Node, it couldn&#8217;t be any easier to get set up. Essentially, to use Mongoose, you&#8217;ll need to define <code>Schema</code> objects &#8211; these are your documents &#8211; either top level or even embedded.</p>

<p>For example, I&#8217;ve defined a <code>words</code> collection that contains documents (representing&#8230;words) that each contain an embedded collection of <code>definition</code> documents. A sample document looks like this:</p>

<figure class='code'><figcaption><span>Word Document</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">_id</span><span class="o">:</span> <span class="s2">&quot;4fd7c7ac8b5b27f21b000001&quot;</span><span class="p">,</span>    
</span><span class='line'>  <span class="nx">spelling</span><span class="o">:</span> <span class="s2">&quot;drivel&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">synonyms</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;garbage&quot;</span><span class="p">,</span> <span class="s2">&quot;dribble&quot;</span><span class="p">,</span> <span class="s2">&quot;drool&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">definitions</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">part_of_speech</span><span class="o">:</span> <span class="s2">&quot;noun&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">definition</span><span class="o">:</span><span class="s2">&quot;saliva flowing from the mouth, or mucus from the nose; slaver.&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">part_of_speech</span><span class="o">:</span> <span class="s2">&quot;noun&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">definition</span><span class="o">:</span><span class="s2">&quot;childish, silly, or meaningless talk or thinking; nonsense; twaddle.&quot;</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From an document modeling standpoint, I&#8217;d like to work with a <code>Word</code> object that contains a list of <code>Definition</code> objects and a number of related attributes (i.e. synonyms, parts of speech, etc). To model this relationship with Mongoose, I&#8217;ll need to define two <code>Schema</code> types and I&#8217;ll start with the simplest:</p>

<figure class='code'><figcaption><span>Definition Schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Definition</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span> <span class="s1">&#39;definition&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">part_of_speech</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="kr">enum</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;adjective&#39;</span><span class="p">,</span> <span class="s1">&#39;noun&#39;</span><span class="p">,</span> <span class="s1">&#39;verb&#39;</span><span class="p">,</span> <span class="s1">&#39;adverb&#39;</span><span class="p">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">definition</span> <span class="o">:</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, a <code>Definition</code> is simple &#8211; the <code>part_of_speech</code> attribute is an enumerated <code>String</code> that&#8217;s required; what&#8217;s more, the <code>definition</code> attribute is also a required <code>String</code>.</p>

<p>Next, I&#8217;ll define a <code>Word</code>:</p>

<figure class='code'><figcaption><span>Word Schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Word</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span> <span class="s1">&#39;word&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">spelling</span> <span class="o">:</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">lowercase</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>  <span class="nx">definitions</span> <span class="o">:</span> <span class="p">[</span><span class="nx">Definition</span><span class="p">.</span><span class="nx">schema</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">synonyms</span> <span class="o">:</span> <span class="p">[{</span> <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">lowercase</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}]</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As you can see, a <code>Word</code> instance embeds a collection of <code>Definition</code>s. Here I&#8217;m also demonstrating the usage of <code>lowercase</code> and the index <code>unique</code> placed on the <code>spelling</code> attribute.</p>

<p>To create a <code>Word</code> instance and save the corresponding document couldn&#8217;t be easier. Mongo array&#8217;s leverage the <code>push</code> command and Mongoose follows this pattern to the tee.</p>

<figure class='code'><figcaption><span>saving with Mongoose</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">word</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Word</span><span class="p">({</span><span class="nx">spelling</span> <span class="o">:</span> <span class="s1">&#39;loquacious&#39;</span><span class="p">})</span>
</span><span class='line'><span class="nx">word</span><span class="p">.</span><span class="nx">synonyms</span><span class="p">.</span><span class="nx">push</span> <span class="s1">&#39;verbose&#39;</span>
</span><span class='line'><span class="nx">word</span><span class="p">.</span><span class="nx">definitions</span><span class="p">.</span><span class="nx">push</span> <span class="p">{</span><span class="nx">definition</span><span class="o">:</span> <span class="s1">&#39;talking or tending to talk much or freely; talkative; \</span>
</span><span class='line'><span class="s1">  chattering; babbling; garrulous.&#39;</span><span class="p">,</span> <span class="nx">part_of_speech</span><span class="o">:</span> <span class="s1">&#39;adjective&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="nx">word</span><span class="p">.</span><span class="nx">save</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finding a word is easy too:</p>

<figure class='code'><figcaption><span>findOne in action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span> <span class="s1">&#39;findOne should return one&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">models</span><span class="p">.</span><span class="nx">Word</span><span class="p">.</span><span class="nx">findOne</span> <span class="nx">spelling</span><span class="o">:</span><span class="s1">&#39;nefarious&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nb">document</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">spelling</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="s1">&#39;nefarious&#39;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">definitions</span><span class="p">.</span><span class="nx">length</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">synonyms</span><span class="p">.</span><span class="nx">length</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="mi">2</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">definitions</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;part_of_speech&#39;</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="s1">&#39;adjective&#39;</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the above code is a <a href="http://visionmedia.github.com/mocha/">Mocha</a> test case (which uses <a href="https://github.com/visionmedia/should.js">should</a> for assertions) that demonstrates Mongoose&#8217;s <code>findOne</code>.</p>

<p>You can find the code for these examples and more at my Github repo dubbed <a href="https://github.com/aglover/exegesis">Exegesis</a> and while you&#8217;re at it, check out the <a href="http://www.ibm.com/developerworks/training/kp/j-kp-node/index.html">developerWorks videos I did for Node</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis replication: couldn't be any easier]]></title>
    <link href="http://aglover.github.com/blog/2012/08/29/redis-replication-couldnt-be-any-easier/"/>
    <updated>2012-08-29T13:23:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/29/redis-replication-couldnt-be-any-easier</id>
    <content type="html"><![CDATA[<p><a href="http://redis.io">Redis</a> supports <a href="http://redis.io/topics/replication">master-slave replication</a> and it&#8217;s extremely easy to setup.  And the beauty of setting up replication is that all you have to do is fire up a slave instance and have it point to some other Redis instance (which then becomes the master node).</p>

<p>Accordingly, open up the <code>redis.conf</code> file for an intended secondary (or slave node) and find the section containing a <code>slaveof</code> phrase. Uncomment it and add the IP address &amp; port of the master node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>slaveof ec2-23-21-a8-21.compute-1.amazonaws.com 6379</span></code></pre></td></tr></table></div></figure>


<p>Then cycle the secondary node (so the <code>redis.conf</code> file is re-read). That&#8217;s it.</p>

<p>When you fire up the slave node and run the <code>INFO</code> command, you&#8217;ll see a few new items, namely:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role:slave
</span><span class='line'>master_host:ec2-23-21-a8-21.compute-1.amazonaws.com
</span><span class='line'>master_port:6379
</span><span class='line'>master_link_status:down
</span><span class='line'>master_last_io_seconds_ago:-1
</span><span class='line'>master_sync_in_progress:1
</span><span class='line'>master_sync_left_bytes:-1
</span><span class='line'>master_sync_last_io_seconds_ago:0
</span><span class='line'>master_link_down_since_seconds:14</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll note that it takes a few moments for a data sync to occur, thus, after a few seconds, rerun the <code>INFO</code> command to see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role:slave
</span><span class='line'>master_host:ec2-23-21-a8-21.compute-1.amazonaws.com
</span><span class='line'>master_port:6379
</span><span class='line'>master_link_status:up
</span><span class='line'>master_last_io_seconds_ago:6
</span><span class='line'>master_sync_in_progress:0</span></code></pre></td></tr></table></div></figure>


<p>Running the same <code>INFO</code> command on the master node will yield a new field as well:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role:master
</span><span class='line'>slave0:10.255.3.143,34647,online</span></code></pre></td></tr></table></div></figure>


<p>A master node can have 0..N slaves (hence the naming scheme of <code>slaveN</code>); what&#8217;s more, slaves can become a master by commenting out or unsetting the <code>SLAVEOF</code> command in their corresponding configuration.</p>

<p>It should be noted that Redis does support configuration changes <em>at runtime</em> via the <code>CONFIG SET</code> <a href="http://redis.io/commands/config-set">command</a>, which means you don&#8217;t even need to cycle a particular node to synchronize it with a master.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leaner JQuery with Zepto]]></title>
    <link href="http://aglover.github.com/blog/2012/08/28/leaner-jquery-with-zepto/"/>
    <updated>2012-08-28T13:04:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/28/leaner-jquery-with-zepto</id>
    <content type="html"><![CDATA[<p>In a recent conversation with my friend <a href="http://jonathanstark.com/">Jonathan Stark</a> we talked about how much has changed in mobile web development since <a href="http://www.ibm.com/developerworks/podcast/glover-stark-112911/index.html">he and I chatted about cross-platform mobile development</a> in November of 2011. Of particular interest was how much adoption mobile web sites have achieved in less than a year &#8211; yet, the adoption hasn&#8217;t always been smooth. In fact, he pointed out a decidedly humorous site dubbed <a href="http://wtfmobileweb.com/">WTF Mobile Web</a>, which aims to educate the mobile web community via examples.</p>

<p>One of the entries you can find on wtfmobileweb.com is an interesting Tweet, which I happened to see on <a href="https://twitter.com/jonathanstark">Jonthan</a>&#8217;s timeline. <a href="https://twitter.com/@philhawksworth">@philhawksworth</a> notes that <a href="http://grolsch.com/">grolsch.com</a> isn&#8217;t particularly mobile-savvy:</p>

<blockquote><p>Dear web developers of the world. Can we stop this silliness before somebody gets hurt?!</p><footer><strong>@philhawksworth</strong> <cite><a href='https://twitter.com/philhawksworth/status/223805766161797121'>twitter.com/philhawksworth/&hellip;</a></cite></footer></blockquote>


<p>If you look closely in the image referenced by the tweet (or on wtfmobileweb.com), you&#8217;ll see that slightly over 24MB of content is downloaded over the course of 388 requests. And that, presumably, a lot of that content is coming from everyone&#8217;s friend <a href="http://jquery.com/">JQuery</a>.</p>

<p>JQuery is an excellent library; however, it just <em>might</em> contain a lot of unneeded code. And in the case of the mobile web, that translates into longer download times, which ultimately might yield a subpar user experience. Accordingly, if you still need a majority of JQuery&#8217;s features but not its weight, you might want to give <a href="http://zeptojs.com/">Zepto</a> a look.</p>

<p>As Zepto&#8217;s website puts it:</p>

<blockquote><p>Zepto is a minimalist JavaScript library for modern browsers with a largely jQuery-compatible API. If you use jQuery, you already know how to use Zepto.</p></blockquote>


<p>Indeed, JQuery&#8217;s <code>$</code> is there in all its glory &#8211; only just <em>slimmer</em>. I was able to substitute in Zepto for JQuery in a <a href="https://github.com/aglover/caprice">PhoneGap</a> project without any issues. Give it a shot &#8211; unless you like having your website end up on wtfmobileweb.com!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala &amp; Typesafe: exciting. Not disruptive]]></title>
    <link href="http://aglover.github.com/blog/2012/08/27/scala-and-typesafe-exciting-not-disruptive/"/>
    <updated>2012-08-27T08:35:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/27/scala-and-typesafe-exciting-not-disruptive</id>
    <content type="html"><![CDATA[<p>I recently read an article on <a href="http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework">TheServerSide.com</a> where the author muses about the possible disruptive nature of Typesafe&#8217;s <a href="http://typesafe.com/company/news/24499">recent Series B cash infusion of $14M</a>:</p>

<blockquote><p>It&#8217;s time for a disruptive event that will change how programs are designed, and how applications target the Java Virtual Machine.</p><footer><strong>Cameron McKenzie</strong> <cite><a href='http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework'>Disruptive Forces in Java: Is Scala the New Spring Framework?</a></cite></footer></blockquote>


<p>Indeed, he likens the event to <a href="http://www.springsource.com/">SpringSource</a> and its meteoric rise to prominence in a time when web development was a real pain-in-the-neck. Think <a href="http://struts.apache.org/">Struts</a> (which, impressively, is still putting out releases) along with <a href="http://www.oracle.com/technetwork/java/javaee/ejb/index.html">EJB</a> and you have a perfect storm for a lightweight revolution.</p>

<p>Unfortunately for the author&#8217;s comparison, the world of web development these days is innovating at a breakneck pace. And this innovation isn&#8217;t necessarily found in Typesafe&#8217;s <a href="http://typesafe.com/stack">Typesafe Stack</a>. I don&#8217;t discount its relevance or applicability &#8211; Typesafe Stack is exciting: witness <a href="http://www.theregister.co.uk/2009/04/01/twitter_on_scala/">Twitter&#8217;s move to Scala</a> a few years ago.  It is not, however, disruptive.</p>

<p>Disruptive is something that completely changes the game. When Spring was unleashed, building Java apps became easier and consequently, you could produce them quicker. That same disruptiveness is happening now in a different community: <a href="http://nodejs.org/">Node</a>. Specifically, frameworks like <a href="http://www.meteor.com/">Meteor</a> and <a href="http://derbyjs.com/">Derby</a>, which are built using Node along with <a href="http://socket.io/">Socket.io</a>, are on the cusp of <em>revolutionizing</em> the web. These nascent frameworks are blazing new trails with respect to the realtime web &#8211; you can build an extremely interactive application in a fraction of the code compared to something like <a href="http://www.playframework.org/">Play</a>. And you can do it before the download and installation of Play completes.</p>

<p>Indeed, the excitement around these frameworks is attracting serious attention. Meteor&#8217;s recent announcement that it took <a href="http://gigaom.com/cloud/scoop-meteor-gets-9m-in-funding/">$9M in funding</a> is most likely a harbinger of things to come with smart people making calculated bets in realtime, rapidly built, and rapidly deployed apps.</p>

<p>Combine the ideas of these innovative frameworks with <a href="http://vertx.io/">vert.x</a>, which is an &#8220;event driven application framework that runs on the JVM&#8221; (Node has made <em>event driven</em> a key phrase) that allows you to write web apps in &#8220;Ruby, Java, Groovy, JavaScript and Python&#8221; and you have a legitimate shot a disruption that&#8217;ll &#8220;change how programs are designed, and how applications target the Java Virtual Machine.&#8221;</p>

<p>Typesafe Stack is exciting. It&#8217;s a safe choice for traditional style web development. But the forces changing web development these days are rapidly converging on the Node community. It&#8217;s there that you&#8217;ll find disruption.</p>
]]></content>
  </entry>
  
</feed>
