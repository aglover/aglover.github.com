<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2015-01-21T17:26:24-08:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Batten down those Node dependency hatches]]></title>
    <link href="http://thediscoblog.com/blog/2014/12/20/batten-down-those-npm-dependency-hatches/"/>
    <updated>2014-12-20T19:18:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2014/12/20/batten-down-those-npm-dependency-hatches</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Dependency_%28project_management%29">Dependency management</a> is oftentimes a mundane subject. And it's not much of a subject at all if you don't depend on rapidly changing libraries. Of course, you might not always <em>realize</em> you're depending on a rapidly changing library -- especially, if you happen to take a rather liberal approach of depending on snapshots or latest versions, as I often do.</p>

<p>I recently found a nifty <a href="https://www.npmjs.com/">npm</a> utility for <a href="http://thediscoblog.com/blog/categories/node/">Node</a> applications that helped me avoid some rather annoying dependency related issues. It's quite similar to Ruby <a href="http://bundler.io/">Bundler</a>'s <code>Gemfile.lock</code> files, but in the case of npm, you'll need to actually run an additional command.</p>

<!-- more -->


<p></p>

<p>Take, for example, the following snippet from a <a href="https://github.com/hubot-scripts/hubot-heroku-dynos">Hubot</a> npm <code>pacakge.json</code> file, which specifies the project's dependencies.</p>

<p>``` json package.json NPM file
"dependencies": {</p>

<pre><code>"hubot": "&gt;= 2.6.0 &lt; 3.0.0",
"hubot-scripts": "&gt;= 2.5.0 &lt; 3.0.0",
"hubot-hipchat": "^2.6.4-2",
"underscore": "1.3.3",
"underscore.string": "2.1.1",
"githubot": "0.4.x",
"moment": "latest",
"cheerio":"latest",
"date-utils": "&gt;=1.2.5"
</code></pre>

<p>  }
```</p>

<p>As you can see, npm has a powerful version syntax (like almost all other dependency management packages) that allows you to target a particular version (like <a href="http://underscorejs.org/">underscore</a> version 1.3.3) or range of versions (like <a href="https://hubot.github.com/">hubot</a> which can be anything greater than or equal to version 2.6.0, but less than 3.0.0).</p>

<p>Take special note though on the versions targeted for cheerio and moment: they're both pointing to <em>latest</em>, which means the tip. And as you've probably guessed, latest today could be a different version from latest tomorrow.</p>

<p>Accordingly, if someone else runs <code>npm install</code> later, they could get a different version of moment or cheerio. And this could lead to unexpected behavior and/or failures. You could, naturally, update your <code>package.json</code> file to point to a <em>particular version</em> but that's painful, as it forces you to figure out which ones you want. And of course, when a new version is released, you'll then have to manually update your <code>package.json</code> file.</p>

<p>Explicitly pointing to a particular version is prudent  -- it frequently makes a lot of sense to rely on known, stable versions of frameworks. In the case of Hubot, for example, that dependency shouldn't change much, nor do I plan to keep up to date with the tip. But the moment dependency, that's another story -- I want the tip and I am totally willing to get a new version at some point in the future.</p>

<p>Nevertheless, I want everyone who collaborates on my project to have the exact same version -- and that version should be one I decide on.</p>

<p>Enter npm's <code>shrinkwrap</code> command.  This creates a <em>lock file</em> dubbed <code>npm-shrinkwrap.json</code>. This lock file points to exact versions and it becomes the source of truth for all versions of required dependencies (even those pulled in by your dependencies' dependencies).</p>

<p>All you have to do is run, via the command line, <code>npm shrinkwrap</code> and check this file into your SCM. The next time someone runs an <code>npm install</code> (or update) the shrinkwrap file is consulted by npm and <em>only</em> those precise versions are incorporated into your project.</p>

<p>Now anyone who runs <code>npm install</code> will get the exact versions you intend. In fact, if you or anyone else changes the <code>package.json</code> file, nothing will happen unless you delete the shrinkwrap file and then run <code>npm install</code>.</p>

<p>Much like Bundler's <code>Gemfile.lock</code> files, <a href="http://blog.nodejs.org/2012/02/27/managing-node-js-dependencies-with-shrinkwrap/">npm's shrinkwrap</a> files provide a safety net for dependencies by allowing you to lock to particular versions even when you explicitly rely on the latest and greatest. Now you can keep the pace of a particular library's releases without a lot of hassle.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ahoy there callbacks!]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/29/ahoy-there-callbacks/"/>
    <updated>2013-09-29T16:30:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/29/ahoy-there-callbacks</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/callback.jpg">Because it's my bag, I like <a href="http://thediscoblog.com/blog/categories/javascript/">JavaScript</a>. In fact, I've grown to love JavaScritp's asynchronous <a href="http://en.wikipedia.org/wiki/Callback_(computer_programming">callback oriented style of programming</a>. Consequently, when I find myself in a non-JavaScript environment, say, like <a href="http://thediscoblog.com/blog/categories/java/">Java</a>, I tend to miss using callbacks.</p>

<p>The good news is that you can <em>emulate</em> asynchronous callbacks in Java. In fact, I did just that recently with a library I've dubbed <a href="https://github.com/aglover/ahoy">Ahoy!</a>, which is an asynchronous <a href="http://www.ibm.com/developerworks/library/j-javadev2-17/">SQS adapter</a> for AWS's Java <a href="http://aws.amazon.com/sqs/">SQS</a> library.</p>

<!-- more -->


<p>For the uninitiated, <a href="http://www.ibm.com/developerworks/library/j-javadev2-17/">SQS is a cloud based messaging platform</a> -- with SQS you can create queues and put messages onto those queues, which can then be read -- later or immediately by some other process or the same exact process. All of this leverages Amazonâ€™s massively redundant architecture to offer extremely high availability in the face of concurrent access.</p>

<p>Asynchronous callbacks in Java can be achieved with two features: anonymous classes (containing one method) and Java's <code>java.util.concurrent</code> package.</p>

<p>Because Java doesn't allow you to pass functions (or methods) <em>easily</em> as a parameter, to simulate a callback, you can create an interface that contains one method, which basically mimics a function. In the case of Ahoy, there are two interfaces: <code>MessageSendCallback</code> and <code>MessageReceivedCallback</code> -- both have one method: <code>onSend</code> and <code>onReceive</code> respectively. Accordingly, Ahoy!''s primary class, dubbed <code>SQSAdapter</code> exposes two simple methods: <code>send</code> and <code>receive</code> and both take their related callback interface.</p>

<p>The most straightforward callback to understand is the <code>receive</code> method. As you can imagine, <code>receive</code> is intended to handle behavior when a message is received off of a particular queue. Thus, the <code>receive</code> method is defined as follows:</p>

<p><code>java SQSAdapter's receive method
public void receive(final MessageReceivedCallback callback) {}
</code></p>

<p>The <code>MessageReceivedCallback</code> interface looks like this:</p>

<p>``` java The MessageReceivedCallback interface
public interface MessageReceivedCallback {</p>

<pre><code>public void onReceive(String messageId, String message);
</code></pre>

<p>}
```</p>

<p>Note, the <code>onReceive</code> method takes a message id (which is particular to SQS) and the message itself -- which in the case of SQS is always a <code>String</code> (that <code>String</code> can hold anything you want, keep in mind: JSON, XML, byte sequence, etc).</p>

<p>Thus, clients of Ahoy! provide the intended behavior for a message when it is received. This behavior could be to write something to a database, generate another message and send it on another queue, you name it.</p>

<p>Now the interesting part is the implementation of Ahoy!'s <code>receive</code> method. To achieve asynchronocity, I employed Java's <code>java.util.concurrent</code> package, which sadly, seems to be under appreciated.</p>

<p>``` java The receive method's implementation with callback being invoked
private void receive(final AmazonSQS sqs, final String queueURL, final MessageReceivedCallback callback) {
  pool.execute(new Runnable() {</p>

<pre><code>public void run() {
  final List&lt;Message&gt; messages = sqs.receiveMessage(
          new ReceiveMessageRequest(queueURL).withMaxNumberOfMessages(10).withWaitTimeSeconds(20)).getMessages();
  if (messages.size() &gt; 0) {
      for (final Message message : messages) {
        callback.onReceive(message.getMessageId(), message.getBody());
        sqs.deleteMessage(new DeleteMessageRequest(queueURL, message.getReceiptHandle()));
      }
  }
}
</code></pre>

<p>  });
}
```</p>

<p>With a fixed Thread pool, a thread is created, which waits for messages to arrive on a particular queue; when one shows up, the passed in <code>MessageReceivedCalledback</code> is invoked for each message.</p>

<p>For an example of how this works for clients of Ahoy!, here's a test case that verifies the execution of the callback:</p>

<p>``` java The receive method implemented
final boolean[] wasReceived = {false};
ahoy.receive(new MessageReceivedCallback() {
  public void onReceive(String messageId, String message) {</p>

<pre><code>wasReceived[0] = true;
assertNotNull("message id was null", messageId);
assertEquals("message wasn't " + origMessage, origMessage, message);
</code></pre>

<p>  }
});
```</p>

<p>Likewise, sending a message is similar -- a new <code>Runnable</code> instance is created, which sends a particular message and invokes the passed in <code>MessageSentCallback</code>'s <code>onSend</code> method, passing in the newly sent messages's id.</p>

<p>``` java The send method is also asynchronous
private void send(final AmazonSQS sqs, final String queueURL, final String message, final MessageSentCallback callback) {
  pool.execute(new Runnable() {</p>

<pre><code>  public void run() {
  SendMessageResult res = sqs.sendMessage(new SendMessageRequest(queueURL, message));
  if (callback != null) {
    callback.onSend(res.getMessageId());
  }
  }
</code></pre>

<p>  });
}
```</p>

<p>Incidentally, the AWS Java SDK <em>does provide an asynchronous client</em>; however, this client's implementation leverages Java's <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html">Futures</a>. While <a href="http://nurkiewicz.blogspot.com/2013/02/javautilconcurrentfuture-basics.html">Futures are a neat concept</a>, Ahoy!'s implementation is more convenient (<em>at least for me and in the patterns of how I employ SQS</em>) than Futures as there isn't any polling involved once a message is sent or received.</p>

<p>While callbacks aren't <a href="http://en.wikipedia.org/wiki/Function_object#In_Java">necessarily supported</a> natively in Java, you can emulate them quite nicely and achieve the same level of code conciseness as what's common in JavaScript. And if you need a handy way to interface with AWS SQS, <a href="https://github.com/aglover/ahoy">then give Ahoy! a try</a>! Can you dig it, man?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding ElasticSearch analyzers]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/14/understanding-elasticsearch-analyzers/"/>
    <updated>2013-09-14T08:37:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/14/understanding-elasticsearch-analyzers</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/old-beer.jpg">Sadly, lots of early Internet beer recipes aren't necessarily in an easily digestible format; that is, these recipes are <em>unstructured</em> intermixed lists of directions and ingredients often originally composed in an email or forum post.</p>

<p>So while it's hard to easily put these recipes into traditional data stores (ostensibly for easier searching), they're perfect for <a href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/">ElasticSearch</a> in their current form.</p>

<p>Accordingly, imagine an <a href="http://thediscoblog.com/blog/2013/05/17/elasticsearch-on-ec2-in-less-than-60-seconds/">ElasticSearch</a> index full of beer recipes, since...well...I enjoy making beer (and drinking it too).</p>

<!-- more -->


<p>First, I'll add some beer recipes into ElasticSearch using <a href="https://github.com/phillro/node-elasticsearch-client">Node's ElasticSearch Client</a>(note that the code is <a href="http://thediscoblog.com/blog/categories/coffeescript/">CoffeeScript</a> though). I'll be adding these beer recipes into a <code>beer_recipes</code> index like so:</p>

<p>``` javascript Adding a beer recipe
beer_1 = {</p>

<pre><code>name: "Todd Enders' Witbier",
style: "wit, Belgian ale, wheat beer",
ingredients: "4.0 lbs Belgian pils malt, 4.0 lbs raw soft red winter wheat, 0.5 lbs rolled oats, 0.75 oz coriander, freshly ground Zest from two table oranges and two lemons, 1.0 oz 3.1% AA Saaz, 3/4 corn sugar for priming, Hoegaarden strain yeast"
</code></pre>

<p>}</p>

<p>client.index('beer_recipes', 'beer', beer_1).on('data', (data) -></p>

<pre><code>console.log(data)
</code></pre>

<p>).exec()
```</p>

<p>Note how the interesting part of a recipe JSON document, dubbed <code>beer_1</code> is found in the <code>ingredients</code> field. This field is basically a big string of valuable text (you can imagine how this string was essentially the body of an email). So while the <code>ingredients</code> field is unstructured, it's something clearly that people will want to search on.</p>

<p>I will add one more recipe for good measure:</p>

<p>``` javascript Adding a second beer recipe
beer_2 = {</p>

<pre><code>name: "Wit",
style: "wit, Belgian ale, wheat beer",
ingredients: "4 lbs DeWulf-Cosyns 'Pils' malt, 3 lbs brewers' flaked wheat (inauthentic; will try raw wheat nest time), 6 oz rolled oats, 1 oz Saaz hops (3.3% AA), 0.75 oz bitter (Curacao) orange peel quarters (dried), 1 oz sweet orange peel (dried), 0.75 oz coriander (cracked), 0.75 oz anise seed, one small pinch cumin, 0.75 cup corn sugar (priming), 10 ml 88% food-grade lactic acid (at bottling), BrewTek 'Belgian Wheat' yeast"
</code></pre>

<p>}</p>

<p>client.index('beer_recipes', 'beer', beer_2).on('data', (data) -></p>

<pre><code>console.log(data)
</code></pre>

<p>).exec()
```</p>

<p>It's a hot summers day and I'm thinking I'd like to make a beer with <em>lemon</em> as an ingredient (to be clear: I want to use lemon zest, which is obtained from a lemon peel). So naturally, I need to find (i.e. <em>search for</em>) a recipe with lemons in it.</p>

<p>Consequently, I'll search my index for recipes that contain the word "lemon" like so:</p>

<p>``` javascript Searching for lemon
query = { "query" : { "term" : { "ingredients" : "lemon" } } }</p>

<p>client.search('beer_recipes', 'beer', query).on('data', (data) -></p>

<pre><code>data = JSON.parse(data)
for doc in data.hits.hits
    console.log doc._source.style
    console.log doc._source.name
    console.log doc._source.ingredients
</code></pre>

<p>).exec()
```</p>

<p>But nothing shows up -- there are no results! Why is that?</p>

<p>If you look closely in the earlier code example (specifically, the <code>beer_1</code> JSON document), you can see that the word "lemons" is in the text (i.e. "...two table oranges and two lemons..."). It turns out, by default, the way values are indexed by ElasticSearch, <em>lemon</em> doesn't necessarily match -- <em>lemons</em> does though.</p>

<p>``` javascript Searching for lemons
query = { "query" : { "term" : { "ingredients" : "lemons" } } }</p>

<p>client.search('beer_recipes', 'beer', query).on('data', (data) -></p>

<pre><code>data = JSON.parse(data)
for doc in data.hits.hits
    console.log doc._source.style
    console.log doc._source.name
    console.log doc._source.ingredients
</code></pre>

<p>).exec()
```</p>

<p>Lo and behold, this search returns a hit! But that's inconvenient, to say the least. Basically the words in the <code>ingredients</code> field are tokenized <em>as is</em>. Hence, a search for "lemons" works while "lemon" doesn't. Note: there are various mechanisms for searching, and a search on "lemon*" should have returned a result.</p>

<p>When a document is added into an <a href="http://thediscoblog.com/blog/2013/01/02/scalable-searching-with-elasticsearch/">ElasticSearch</a> index, its fields are analyzed and converted into <em>tokens</em>. When you execute a search against an index, you search against those tokens. How ElasticSearch tokenizes a document is configurable.</p>

<p>There are different ElasticSearch analyzers available -- from language analyzers that allow you to support non-English language searches to the <a href="http://snowball.tartarus.org/">snowball</a> analyzer, which converts a word into its root (or stem and that process of creating a stem from a word is called <em><a href="http://snowball.tartarus.org/algorithms/english/stemmer.html">stemming</a></em>), yielding a simpler token. For example, a snowball of "lemons" would be "lemon". Or if the words "knocks" and "knocking" were in a snowball analyzed document, both terms would have "knock" as a stem.</p>

<p>You can change how documents are tokenized via the index mapping API like so:</p>

<p>``` bash Changing the mapping for an index using cURL
curl -XPUT 'http://localhost:9200/beer_recipes' -d '{ "mappings" : {
  "beer" : {</p>

<pre><code>"properties" : {
  "ingredients" : { "type" : "string", "analyzer" : "snowball" }
}
</code></pre>

<p>   }
 }
}'
```</p>

<p>Note how the above mapping specifies that the <code>ingredients</code> field will be analyzed via the snowball analyzer. Also note, you have to change the mapping of an index <em>before</em> you begin to add documents to it! So, in this case, I'll need to drop the index, run the mapping call above, and then re-add those two recipes.</p>

<p>Now I can begin searching recipes for the ingredient "lemon"  or "lemons".</p>

<p>``` javascript Searching for lemon now works!
query = { "query" : { "term" : { "ingredients" : "lemon" } } }</p>

<p>client.search('beer_recipes', 'beer', query).on('data', (data) -></p>

<pre><code>data = JSON.parse(data)
for doc in data.hits.hits
    console.log doc._source.style
    console.log doc._source.name
    console.log doc._source.ingredients
</code></pre>

<p>).exec()
```</p>

<p>Keep in mind that <a href="http://stackoverflow.com/questions/3875382/lucene-standard-analyzer-vs-snowball">snowballing can inadvertently</a> make your search results <em>less relevant</em>. Long words can be stemmed into more common but completely different words. For example, if you snowball a document that contains the word "sextant", the word "sex" will result as a stem. Thus, searches for "sextant" will also return documents that contain the word "sex" (and vice versa).</p>

<p>ElasticSearch puts a powerful search engine into your clutches; plus, with a little forethought into how a document's contents are analyzed, you'll make searches event more relevant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whiskered Node views]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/13/whiskered-node-views/"/>
    <updated>2013-08-13T12:00:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/13/whiskered-node-views</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/mustache_template.png">As we draw closer to the glorious month of <a href="http://us.movember.com/">Movember</a>, I find myself pondering the <a href="http://paularmstrong.github.io/node-templates/">myriad template engines</a> available for Node apps. The most popular is still probably <a href="http://jade-lang.com/">Jade</a> as its syntax is <a href="http://haml.info/">Haml</a>-like and results in quite clean views, lacking in HTMLish clutter.</p>

<p>While Jade is handy, it takes some time to get used to. Plus, if you find yourself working with a UI person who prefers to speak in HTML, you'll find yourself translating between HTML and Jade (which isn't that hard with web apps like <a href="http://html2jade.aaron-powell.com/">HTML2Jade</a>, but nevertheless involves an extra <em>translation</em> step).</p>

<!-- more -->


<p>There are other template engines that map more closely to pure HTML. <a href="http://mustache.github.io/">Mustache</a>, for instance, forgoes reducing HTML entirely and introduces <code>{}</code>'s (i.e. mustaches) as a substitution delimiter. Thus, you can take normal HTML files and add some <code>{}</code>'s to make pages dynamic.</p>

<p>In the world of Node, there are <a href="https://github.com/raycmorgan/Mu">a few</a> Mustache implementations. One of the more interesting ones that I've used is <a href="https://github.com/gsf/whiskers.js/">Whiskers</a>. Whiskers is fairly lightweight and doesn't offer a lot of bells and whistles. As the project's README states</p>

<p><blockquote><p>Whiskers is focused on template readability. By limiting template logic, careful preparation of the context is encouraged, and the processing and formatting of data is kept separate from the design of the display.</p><footer><strong>https://github.com/gsf/whiskers.js/</strong> <cite><a href='https://github.com/gsf/whiskers.js/'>About Whiskers.js</a></cite></footer></blockquote></p>

<p>Accordingly, you can do variable substitution, conditional logic, and looping out-of-the-box easily. But that's about all.</p>

<p>To get started with Whiskers, you'll need to add it as a dependency to your project's NPM file like so:</p>

<p><code>json package.json NPM file
"whiskers" : "latest"
</code></p>

<p>In this case, I'll always be grabbing the latest version.</p>

<p>I prefer <a href="http://localhost:4000/blog/categories/coffeescript/">CoffeeScript</a> when writing Node apps; consequently, the code examples I show you will be in <a href="/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps/">CoffeeScript</a>. Accordingly, in my <code>App.coffee</code> file, I need to then require Whiskers:</p>

<p><code>coffeescript Requiring whiskers in your Node app
whiskers = require 'whiskers'
</code></p>

<p>You'll need to configure Express to leverage Whiskers; luckily, Express makes plugging in alternate template engines quite easy.</p>

<p><code>coffeescript Configuring a template engine with Express
app.set 'view engine', 'html'
app.engine 'html', whiskers.__express
</code></p>

<p>This indicates that your template files will end in <code>.html</code> and that for those file types, use the Whiskers framework.</p>

<p>You can then render a Whiskers template like normal. For example, if I want to pass an <code>allWords</code> collection as the variable <code>words</code> to a template file dubbed <code>index.html</code>, I can do it like so:</p>

<p><code>coffeescript Rending a view
res.render 'index', {words: allWords}
</code></p>

<p>In this case, <code>allWords</code> is an array full of <code>Word</code> classes.</p>

<p>Inside my <code>index.html</code> file, I can access the <code>words</code> variable inside a bracketed <code>for</code> loop like so:</p>

<p>``` html Mustached HTML
<body>
  {for word in words}</p>

<pre><code>&lt;div data-role="page" id="page_{word.id}" data-theme='c'&gt;
  &lt;div data-theme="g" data-role="header"&gt;
    &lt;h3&gt;
        Overheard Word
    &lt;/h3&gt;
  &lt;/div&gt;

  &lt;div data-role="content"&gt;
    &lt;div class="center-wrapper"&gt;
       &lt;h2&gt;{word.spelling} &lt;/h2&gt;
       &lt;p&gt;&lt;em&gt;{word.partOfSpeech}&lt;/em&gt; - {word.definition}&lt;/p&gt;
       &lt;p&gt;"{word.exampleSentence}"&lt;/p&gt;
     &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>  {/for}
</body>
```</p>

<p>Note inside the <code>for</code> loop, I have access to a <code>word</code> instance. I can call properties on it as well. Note, with Whiskers, you can't invoke methods on passed in objects. Only properties (i.e. <code>word.definition</code> isn't a function).</p>

<p>Jade certainly produces more elegant, less verbose view code. But Jade's whitespace delimiting coupled with the fact that basic HTML knowledge is near universal, make template frameworks like Whiskers, which permit normal HTML with <code>{}</code> delimiters appealing from time to time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Amazon Appstore's support of HTML5 matters]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters/"/>
    <updated>2013-08-07T21:09:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters</id>
    <content type="html"><![CDATA[<p><img class="right" src="https://images-na.ssl-images-amazon.com/images/G/01/mobile-apps/devportal2/content/sdk/images/webapps_icon-final-114.<em>V379662584</em>.png">Today, Amazon announced that their <a href="http://www.amazon.com/mobile-apps/b?ie=UTF8&amp;node=2350149011">Appstore for Android</a> <a href="https://developer.amazon.com/post/Tx2HGWRGOW5YG8/Amazon-is-Now-Accepting-HTML5-Web-Apps-Making-it-Easy-for-You-to-Reach-Millions.html">now supports the submission of HTML5 apps</a>. This is a game changer for <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a> because now there is a direct channel to consumers.</p>

<p>As I wrote almost a year ago:</p>

<p><blockquote><p>software delivery on the mobile platform is, at least for the foreseeable future, firmly established via app stores. And app stores cater to native apps (100% native and/or hybrid) only. The average person will not look for useful apps via their deviceâ€™s browser: that route is still a jungle. And, at this point, there is no viable pure play mobile web app delivery channel.</p><footer><strong>thediscoblog.com</strong> <cite><a href='http://thediscoblog.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results/'>Past Performance Is No Guarantee of Future Results</a></cite></footer></blockquote></p>

<p>Today, it's still true that the most convenient mechanism  for app delivery on mobile devices (and increasingly desktops) is via various app stores. And until today, HTML5 apps were not included in these app stores (unless they were wrapped by some hybrid-web container like <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">PhoneGap</a>).</p>

<!-- more -->


<p>But now with Amazon's announcement, <a href="http://thediscoblog.com/blog/categories/html5/">HTML5</a> apps <em>without any native container</em> can be submitted into their Appstore. What's more, these apps can take advantage of monetization features like <a href="https://developer.amazon.com/sdk/webapps/iap/understanding.html">In-App purchasing</a> using Amazon's API.</p>

<p>Now HTML5 apps have a direct channel to consumers along with an API to make HTML5 app developers money. HTML5 apps are now icon-ized and people don't have to use a search engine to find them!</p>

<p>As <a href="https://developer.amazon.com/blog/author/Mike+Hines.html">Mike Hines</a> of Amazon puts it:</p>

<p><blockquote><p>Starting today, you can submit your web apps and mobile optimized web sites and have them merchandised alongside native apps on Amazon and Kindle Fire in nearly 200 countries worldwide, without any third-party software or doing any native app development.</p><footer><strong>https://developer.amazon.com/blog/</strong> <cite><a href='https://developer.amazon.com/post/Tx2HGWRGOW5YG8/Amazon-is-Now-Accepting-HTML5-Web-Apps-Making-it-Easy-for-You-to-Reach-Millions.html'>Amazon Is Now Accepting HTML5 Web Appsâ€”Making It Easy for You to Reach Millions of Kindle Fire and Android Customers Worldwide</a></cite></footer></blockquote></p>

<p>This is big news for HTML5 developers. A direct channel to the masses and monetization APIs to boot -- what more could you ask for? Standby folks because it's about to get even more interesting, as I'm willing to bet that Google and Apple will follow suit in the near future.</p>
]]></content>
  </entry>
  
</feed>
