<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Disco Blog]]></title>
  <link href="http://thediscoblog.com/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2014-12-20T19:54:13-08:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Batten down those Node dependency hatches]]></title>
    <link href="http://thediscoblog.com/blog/2014/12/20/batten-down-those-npm-dependency-hatches/"/>
    <updated>2014-12-20T19:18:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2014/12/20/batten-down-those-npm-dependency-hatches</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Dependency_%28project_management%29">Dependency management</a> is oftentimes a mundane subject. And it&#8217;s not much of a subject at all if you don&#8217;t depend on rapidly changing libraries. Of course, you might not always <em>realize</em> you&#8217;re depending on a rapidly changing library &#8211; especially, if you happen to take a rather liberal approach of depending on snapshots or latest versions, as I often do.</p>

<p>I recently found a nifty <a href="https://www.npmjs.com/">npm</a> utility for <a href="http://thediscoblog.com/blog/categories/node/">Node</a> applications that helped me avoid some rather annoying dependency related issues. It&#8217;s quite similar to Ruby <a href="http://bundler.io/">Bundler</a>&#8217;s <code>Gemfile.lock</code> files, but in the case of npm, you&#8217;ll need to actually run an additional command.</p>

<!-- more -->


<p></p>

<p>Take, for example, the following snippet from a <a href="https://github.com/hubot-scripts/hubot-heroku-dynos">Hubot</a> npm <code>pacakge.json</code> file, which specifies the project&#8217;s dependencies.</p>

<figure class='code'><figcaption><span>package.json NPM file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;hubot&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;= 2.6.0 &lt; 3.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;hubot-scripts&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;= 2.5.0 &lt; 3.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;hubot-hipchat&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.6.4-2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;underscore&quot;</span><span class="p">:</span> <span class="s2">&quot;1.3.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;underscore.string&quot;</span><span class="p">:</span> <span class="s2">&quot;2.1.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;githubot&quot;</span><span class="p">:</span> <span class="s2">&quot;0.4.x&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;moment&quot;</span><span class="p">:</span> <span class="s2">&quot;latest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;cheerio&quot;</span><span class="p">:</span><span class="s2">&quot;latest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;date-utils&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=1.2.5&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, npm has a powerful version syntax (like almost all other dependency management packages) that allows you to target a particular version (like <a href="http://underscorejs.org/">underscore</a> version 1.3.3) or range of versions (like <a href="https://hubot.github.com/">hubot</a> which can be anything greater than or equal to version 2.6.0, but less than 3.0.0).</p>

<p>Take special note though on the versions targeted for cheerio and moment: they&#8217;re both pointing to <em>latest</em>, which means the tip. And as you&#8217;ve probably guessed, latest today could be a different version from latest tomorrow.</p>

<p>Accordingly, if someone else runs <code>npm install</code> later, they could get a different version of moment or cheerio. And this could lead to unexpected behavior and/or failures. You could, naturally, update your <code>package.json</code> file to point to a <em>particular version</em> but that&#8217;s painful, as it forces you to figure out which ones you want. And of course, when a new version is released, you&#8217;ll then have to manually update your <code>package.json</code> file.</p>

<p>Explicitly pointing to a particular version is prudent  &#8211; it frequently makes a lot of sense to rely on known, stable versions of frameworks. In the case of Hubot, for example, that dependency shouldn&#8217;t change much, nor do I plan to keep up to date with the tip. But the moment dependency, that&#8217;s another story &#8211; I want the tip and I am totally willing to get a new version at some point in the future.</p>

<p>Nevertheless, I want everyone who collaborates on my project to have the exact same version &#8211; and that version should be one I decide on.</p>

<p>Enter npm&#8217;s <code>shrinkwrap</code> command.  This creates a <em>lock file</em> dubbed <code>npm-shrinkwrap.json</code>. This lock file points to exact versions and it becomes the source of truth for all versions of required dependencies (even those pulled in by your dependencies&#8217; dependencies).</p>

<p>All you have to do is run, via the command line, <code>npm shrinkwrap</code> and check this file into your SCM. The next time someone runs an <code>npm install</code> (or update) the shrinkwrap file is consulted by npm and <em>only</em> those precise versions are incorporated into your project.</p>

<p>Now anyone who runs <code>npm install</code> will get the exact versions you intend. In fact, if you or anyone else changes the <code>package.json</code> file, nothing will happen unless you delete the shrinkwrap file and then run <code>npm install</code>.</p>

<p>Much like Bundler&#8217;s <code>Gemfile.lock</code> files, <a href="http://blog.nodejs.org/2012/02/27/managing-node-js-dependencies-with-shrinkwrap/">npm&#8217;s shrinkwrap</a> files provide a safety net for dependencies by allowing you to lock to particular versions even when you explicitly rely on the latest and greatest. Now you can keep the pace of a particular library&#8217;s releases without a lot of hassle.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker containers with Gradle in 4 steps]]></title>
    <link href="http://thediscoblog.com/blog/2014/06/13/docker-containers-with-gradle-in-4-steps/"/>
    <updated>2014-06-13T11:52:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2014/06/13/docker-containers-with-gradle-in-4-steps</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/fourdoor.jpg"> Do you need to create a <a href="http://www.docker.com/">Docker</a> image from your Java web app? Are you using <a href="http://www.gradle.org/">Gradle</a>? If so, then you are only 4 steps away from Docker nivana.</p>

<p>For this example, I&#8217;m going to use a simple <a href="http://projects.spring.io/spring-boot/">Spring Boot</a> application. You can find all the source code in my <a href="https://github.com/aglover/galoshe">Github repository dubbed galoshe</a>.</p>

<p>If you haven&#8217;t had a chance to see Spring Boot in action, then you&#8217;re in for a treat, <em>especially</em> if the words <em>simple</em> and <em>Java web app</em> in the same sentence make you flinch. That was certainly my long standing reaction until I took a serious look at Boot.</p>

<!-- more -->


<p></p>

<p>For instance, a quick and dirty &#8220;hello world&#8221; Boot app is essentially more imports &amp; annotations than actual code. Check it out:</p>

<figure class='code'><figcaption><span>A simple Spring Boot application</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">aglover</span><span class="o">.</span><span class="na">galoshe</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableAutoConfiguration</span>
</span><span class='line'><span class="nd">@ComponentScan</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello to you, world&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this application is as easy as typing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>java -jar build/libs/galoshe-0.1.0.jar
</span></code></pre></td></tr></table></div></figure>


<p>That command will fire up an embedded web container with the request path <code>/</code> mapped to return the simple <code>String</code> &#8220;Hello to you, world&#8221;. You can define what port this application will run on via an <code>application.properties</code> file like so:</p>

<figure class='code'><figcaption><span>application.properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">port</span><span class="o">:</span> <span class="mi">8080</span>
</span></code></pre></td></tr></table></div></figure>


<p>Consequently, if I take my browser and point it to localhost:8080, I see the pedestrian, but oh-so-gratifying-when-you-see-it salutation.</p>

<p>Now that you&#8217;ve been introduced to the application I&#8217;d like to distribute as a Docker container, let me show you how to do it in 4 easy steps.</p>

<p>Keep in mind, however, that in order to use the gradle-docker plugin I use in this example, you&#8217;ll need to have Docker installed as the plugin shells out to the <code>docker</code> command.</p>

<h4>Step 1: Apply some plugins</h4>

<p>First and foremost, to Docker-ize your application, you&#8217;ll need to use two Gradle plugins: <code>docker</code> and <code>application</code>.</p>

<p>The <a href="https://github.com/Transmode/gradle-docker">gradle-docker plugin</a> by <a href="https://github.com/Transmode">Transmode</a> is actually 1 of 2 available plugins for Dockering with Gradle. The <a href="https://github.com/bmuschko/gradle-docker-plugin">other plugin</a> by <a href="https://github.com/bmuschko">Ben Muschko</a> of <a href="http://www.gradleware.com/">Gradleware</a> is a bit more advanced with additional features, however, I find the Transmode plugin the easiest and quickest to get going.</p>

<p>The <code>application</code> plugin is actually included <em>automatically</em> via the <code>spring-boot</code> plugin in my particular example, however, if you aren&#8217;t using Boot, then you&#8217;ll need to add the following two plugins to your <code>build.gradle</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">application</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="err">&#39;</span><span class="n">docker</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the <code>docker</code> plugin is a 3rd party plugin, you&#8217;ll need to tell Gradle how to find it via a <code>dependencies</code> clause.</p>

<figure class='code'><figcaption><span>Specifying the classpath for the docker plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span> <span class="n">mavenCentral</span><span class="o">()</span> <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="err">&#39;</span><span class="n">se</span><span class="o">.</span><span class="na">transmode</span><span class="o">.</span><span class="na">gradle</span><span class="o">:</span><span class="n">gradle</span><span class="o">-</span><span class="nl">docker:</span><span class="mf">1.1</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now your Gradle script is ready to start Docker-ing. Next up, you&#8217;ll need to provide some clues so the plugin can create a valid <a href="http://thediscoblog.com/blog/2014/05/05/dockerfiles-in-a-jiffy/"><code>Dockerfile</code></a>.</p>

<h4>Step 2: Provide some properties</h4>

<p>The gradle-docker plugin doesn&#8217;t directly create a Docker container &#8211; it merely creates a <code>Dockerfile</code> and then shells out to the <code>docker</code> command to build an image. Consequently, you need to specify a few properties in your <code>build.gradle</code> file so that the corresponding <code>Dockerfile</code> builds a valid container that automatically runs your application.</p>

<p>You need to provide:</p>

<ul>
<li>The class to run i.e. the class in your application that contains a <code>main</code> method</li>
<li>The target JVM version (default is Java 7)</li>
<li><a href="http://thediscoblog.com/blog/2014/03/25/java-8-s-functional-fomentation/">Optionally</a>, a group id, which feeds into the corresponding Docker tag.</li>
</ul>


<p>Accordingly, my <code>build.gradle</code> defines all three properties like so:</p>

<figure class='code'><figcaption><span>Defining properties for the docker plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">group</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">aglover</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="mf">1.7</span>
</span><span class='line'><span class="n">mainClassName</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">aglover</span><span class="o">.</span><span class="na">galoshe</span><span class="o">.</span><span class="na">Application</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few notes about these properties. Firstly, <a href="http://thediscoblog.com/blog/2014/03/25/java-8-s-functional-fomentation/">Java 8</a> isn&#8217;t <em><a href="https://github.com/Transmode/gradle-docker/pull/9">currently</a></em> available for this plugin. If you don&#8217;t specify a <code>sourceCompatibility</code>, you&#8217;ll get Java 7. Next, the <code>group</code> property isn&#8217;t required; however, it helps in Docker tagging. For example, my project&#8217;s <code>baseName</code> is dubbed <code>galoshe</code>; consequently, when the plugin creates a Docker image, it&#8217;ll tag that image with the pattern <code>group/name</code>. So in my case, the corresponding image is tagged <code>aglover/galoshe</code>.</p>

<p>Finally, the <code>mainClassName</code> shouldn&#8217;t be too surprising - it&#8217;s the hook into your application. In truth, the plugin will create a script that your resultant Docker image will invoke on startup. That script will essentially call the command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -classpath your_class_path your_main_class
</span></code></pre></td></tr></table></div></figure>


<p>At this point, you are almost done. Next up, you&#8217;ll need to specify any <code>Dockerfile</code> instructions.</p>

<h4>Step 3: Specify any required Dockerfile instructions</h4>

<p><code>Dockerfile</code>s contain specialized instructions for the corresponding image they create. There <a href="http://thediscoblog.com/blog/2014/05/05/dockerfiles-in-a-jiffy/">are a few important ones</a>; nevertheless, my Boot app only requires one: <code>port</code>, which is set via the <code>exposePort</code> method of the plugin.</p>

<p>Consequently, to ensure my Docker container exposes port 8080 as defined in my <code>application.properites</code> file, I&#8217;ll add the following clause to my <code>build.gradle</code> file:</p>

<figure class='code'><figcaption><span>Specifying port 8080</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">distDocker</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">exposePort</span> <span class="mi">8080</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few other aspects you can muddle with via the plugin are <code>addFile</code> which results in an <code>ADD</code> instruction, <code>runCommand</code>, which results in a <code>RUN</code> instruction, and finally <code>setEnvironment</code>, which creates an <code>ENV</code> instruction.</p>

<p>Now you&#8217;re done with your Gradle build. All that&#8217;s left to do is run your build and fire the image up!</p>

<h4>Step 4: Build and run it</h4>

<p>Provided you&#8217;ve configured the gradle-plugin properly, all that&#8217;s left to do is run your build. In this case, the command is simply <code>distDocker</code>.</p>

<figure class='code'><figcaption><span>Running my build </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./gradlew distDocker
</span></code></pre></td></tr></table></div></figure>


<p>The first time you run this command it&#8217;ll take a bit as various images will be downloaded. Subsequent runs will be lightning quick though.</p>

<p>After your build completes, your image will be created with the tag I noted earlier. In my case, the tag will be <code>aglover/galoshe</code>, which I can quickly see by running the <code>images</code> command:</p>

<figure class='code'><figcaption><span>Listing available local Docker images</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker images
</span><span class='line'>REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>aglover/galoshe     latest              332e163221bc        20 hours ago        1.042 GB
</span><span class='line'>dockerfile/java     latest              f9793c257930        3 weeks ago         1.026 GB
</span></code></pre></td></tr></table></div></figure>


<p>I can subsequently run my image like so:</p>

<figure class='code'><figcaption><span>Running my container</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>docker run 332e163221bc
</span></code></pre></td></tr></table></div></figure>


<p>I can naturally go to my browser, hit localhost:8080 and find myself quite satisfied that my image runs a nifty greeting.</p>

<p>Of course, I would need to <a href="https://hub.docker.com/u/aglover/">publish this image</a> for others to use it; nevertheless, as you can see, the gradle-plugin allows me to quickly create Docker containers for Java apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerfiles in a jiffy]]></title>
    <link href="http://thediscoblog.com/blog/2014/05/05/dockerfiles-in-a-jiffy/"/>
    <updated>2014-05-05T10:19:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2014/05/05/dockerfiles-in-a-jiffy</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/docker.png"><a href="https://www.docker.io/">Docker</a> is a lightweight container for applications &#8211; think of a Docker as an app in a box, except that the box in this case isn&#8217;t an entire VM, but the bare necessities required to run a process. Consequently, you can run many Dockers in a VM. In essence, Docker replaces installation steps for a particular app. Rather than having to execute a series of steps to get, say, <a href="http://thediscoblog.com/blog/categories/mongodb/">MongoDB</a> running, you can simply fire up a Mongo Docker image.</p>

<p>Docker images can be created from a <code>Dockerfile</code>, which is similar to a <code>Vagrantfile</code> or even a build script &#8211; it&#8217;s a prescription for how to assemble an image. You don&#8217;t need to have a <code>Dockerfile</code> to create a Docker image, however, creating one makes image creation <em>repeatable</em>. It also provides a means for others to verify an image.</p>

<!-- more -->


<p>There are a few key instructions you should be aware of when creating <code>Dockerfiles</code> &#8211; mainly,  <code>FROM</code>, <code>RUN</code>, <code>EXPOSE</code>, and <code>CMD</code>. To demonstrate how easy this process is, I&#8217;m going to create a <code>Dockerfile</code> that runs Amazon&#8217;s DynamoDB Local.</p>

<h4>DynamoDB Local</h4>

<p><a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html">DynamoDB Local</a> is a simple Java application that emulates <a href="http://aws.amazon.com/dynamodb/">AWS DynamoDB</a>. The benefit of using DynamoDB Local is that you can iterate quickly without using bandwidth against the real DynamoDB and you&#8217;ll save a few coins in the process.</p>

<p>Running DynamoDB Local isn&#8217;t terribly difficult; in fact, provided you have <a href="http://thediscoblog.com/blog/categories/java/">Java</a> installed, it&#8217;s as easy as:</p>

<figure class='code'><figcaption><span>Firing up DynamoDB Local</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>java -Djava.library.path<span class="o">=</span>./DynamoDBLocal_lib -jar DynamoDBLocal.jar
</span></code></pre></td></tr></table></div></figure>


<p>Of course, if you aren&#8217;t developing a Java application and don&#8217;t have Java installed, you would need to, of course, install Java. Then you&#8217;d need to download the DynamoDB Local package and install it. And then you&#8217;d need to run it.</p>

<p>Alternatively, you could just <code>pull</code> a Docker image, <code>run</code> it, and get back to work.</p>

<h4>Creating a Dockerfile</h4>

<p>Creating a <code>Dockerfile</code> is simple. Fire up your favorite editor and follow along.</p>

<p>The first required element, <code>FROM</code>, indicates the base image or parent from which a docker image is built upon. In many cases, this&#8217;ll be something like <code>ubuntu</code> or <code>centos</code>, for example.  In the case of an image for DynamoDB Local, I&#8217;m going to base it off <em>another image</em> that already has Oracle&#8217;s <a href="http://thediscoblog.com/blog/2014/03/25/java-8-s-functional-fomentation/">Java 8</a> installed. That image is based upon <a href="http://thediscoblog.com/blog/categories/ubuntu/">Ubuntu</a>. Note, basing your <code>FROM</code> off of another image implies the image is available in an accessible Docker index. You can run your own local or remote indexes or use <a href="https://index.docker.io/">Docker&#8217;s public index</a>.</p>

<p>Consequently, the first two lines of my <code>Dockerfile</code> are:</p>

<figure class='code'><figcaption><span>FROM and MAINTAINER elements of a Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FROM aglover/java8-pier
</span><span class='line'>MAINTAINER Andy Glover <span class="s2">&quot;ajglover@gmail.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have a look at my <a href="https://index.docker.io/u/aglover/java8-pier/">java8-pier project</a> and you&#8217;ll see its <code>Dockerfile</code> has the line <code>FROM ubuntu</code>. The <code>MAINTAINER</code> line is self evident.</p>

<p>The 2nd most important instruction of a <code>Dockerfile</code> is <code>RUN</code>. Think of <code>RUN</code> as <code>bash</code> commands required to set up your Docker image. In the case of setting up DynamoDB Local, there are a few things I would like done on the image. First and foremost, I&#8217;d like to update base aspects of the underlying <a href="http://thediscoblog.com/blog/categories/ubuntu/">Ubuntu</a> OS via an <code>apt-get update</code>. Then I&#8217;d like to download the DynamoDB Local archive, however, I&#8217;d like to use <code>wget</code>, which isn&#8217;t available on base Ubuntu installs, however. Consequently, I&#8217;ll install <code>wget</code> while I&#8217;m at it.</p>

<figure class='code'><figcaption><span>apt-get update and wget install</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RUN apt-get update -y
</span><span class='line'>RUN apt-get install wget -y
</span></code></pre></td></tr></table></div></figure>


<p>Next, I&#8217;m going to <code>wget</code> the latest version of DynamoDB Local via an AWS URL that points to the latest version (which obviously changes); thus, the <code>-O</code> flag forces the downloaded file to the generic name of <code>dynamo.tar.gz</code> (rather than something like <code>dynamodb_local_2014-04-24.tar.gz</code> where the date can change depending on when AWS releases an update). Finally, after the download completes, the file is moved into a directory dubbed <code>dynamodb_local</code>.</p>

<figure class='code'><figcaption><span>Downloading the archive</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>RUN wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest -O dynamo.tar.gz
</span><span class='line'>RUN tar xvzf dynamo.tar.gz <span class="o">&amp;&amp;</span> mv dynamodb_local_* dynamodb_local
</span></code></pre></td></tr></table></div></figure>


<p>Docker images, by default, don&#8217;t expose any ports through the host on which they are running. You must expose desired ports via the <code>EXPOSE</code> command. In my case, DynamoDB Local defaults to port 8000; accordingly, I&#8217;ll specify in my <code>Dockerfile</code> that I wish this port to be open:</p>

<figure class='code'><figcaption><span>Exposing port 8000</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>EXPOSE 8000
</span></code></pre></td></tr></table></div></figure>


<p>Finally, as I wish to run a service via my Docker image, I need to fire it up! DynamoDB Local is simply a Java process that requires, at a minimum, two parameters. If I were to run DynamoDB Local manually, the corresponding command would be:</p>

<figure class='code'><figcaption><span>The command to run DynamoDB Local</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>java -Djava.library.path<span class="o">=</span>./dynamodb_local/DynamoDBLocal_lib -jar ./dynamodb_local/DynamoDBLocal.jar
</span></code></pre></td></tr></table></div></figure>


<p>Consequently, to execute this command in a <code>Dockerfile</code> I&#8217;ll need to use the <code>CMD</code> instruction (which is probably the most important instruction for creating Dockers!). This instruction takes an array of values &#8211; logically, just take the corresponding manual command and tokenize it by a space and you&#8217;ve got your <code>CMD</code>:</p>

<figure class='code'><figcaption><span>The CMD instruction is important if your Docker image runs a service</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>CMD <span class="o">[</span><span class="s2">&quot;java&quot;</span>, <span class="s2">&quot;-Djava.library.path=./dynamodb_local/DynamoDBLocal_lib&quot;</span>, <span class="s2">&quot;-jar&quot;</span>, <span class="s2">&quot;./dynamodb_local/DynamoDBLocal.jar&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it &#8211; 8 lines and you&#8217;ve got a <code>Dockerfile</code> that&#8217;ll yield Docker image running DynamoDB Local as a service.</p>

<h4>Creating images from Dockerfiles</h4>

<p>With a <code>Dockerfile</code> I can now create an image via the <code>build</code> command. Thus, in a terminal window, I&#8217;ll change directories to where I&#8217;ve saved my <code>Dockerfile</code> and run the following:</p>

<figure class='code'><figcaption><span>Building a Docker image</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker build -t aglover/dynamodb-pier .
</span></code></pre></td></tr></table></div></figure>


<p><code>aglover/dynamodb-pier</code> is the desired name of my image. After you run this command, you will see a whole lot of commands executed, including the ones specified in your <code>Dockerfile</code>. Once things finish successfully, you should be able to see the resultant image via the <code>images</code> command.</p>

<figure class='code'><figcaption><span>Listing Docker images</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker images
</span><span class='line'>REPOSITORY              TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'>aglover/dynamodb-pier   latest              aa51ccc5dc3f        14 seconds ago      1.089 GB
</span><span class='line'>aglover/java8-pier      latest              cb8436bb816a        4 weeks ago         1.026 GB
</span><span class='line'>base                    latest              b750fe79269d        13 months ago       175.3 MB
</span><span class='line'>base                    ubuntu-12.10        b750fe79269d        13 months ago       175.3 MB
</span><span class='line'>base                    ubuntu-quantal      b750fe79269d        13 months ago       175.3 MB
</span><span class='line'>base                    ubuntu-quantl       b750fe79269d        13 months ago       175.3 MB
</span></code></pre></td></tr></table></div></figure>


<p>I can run my newly minted Docker image via its ID, which, if you look closely in the listing above, is <code>aa51ccc5dc3f</code>.</p>

<figure class='code'><figcaption><span>Running a Docker image</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run aa51ccc5dc3f
</span><span class='line'>2014-05-05 17:04:14.037:INFO:oejs.Server:jetty-8.1.12.v20130726
</span><span class='line'>2014-05-05 17:04:14.119:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8000
</span></code></pre></td></tr></table></div></figure>


<p>Note, by default, Docker will run the image in the foreground; accordingly, you can see things are working via the output coming from the DynamoDB Local instance running.</p>

<p>You can run a Docker image as a daemon via the <code>-d</code> flag:</p>

<figure class='code'><figcaption><span>Running a Docker image as daemon</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker run -d aa51ccc5dc3f
</span><span class='line'>7be2708d94eedaa82432d239659ddb696d66004516174a6e2f79f4ec465eb9fc
</span></code></pre></td></tr></table></div></figure>


<p>You can now see what Docker images are running via the <code>ps</code> command.</p>

<figure class='code'><figcaption><span>Docker ps lists running images</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker ps
</span><span class='line'>CONTAINER ID        IMAGE                          COMMAND                CREATED             STATUS              PORTS               NAMES
</span><span class='line'>7be2708d94ee        aglover/dynamodb-pier:latest   java -Djava.library.   17 seconds ago      Up 16 seconds       8000/tcp            compassionate_bardeen
</span></code></pre></td></tr></table></div></figure>


<p>Finally, you can stop an image via the <code>stop</code> command. You must provide the ID of the image, which you can see via a <code>ps</code>.</p>

<figure class='code'><figcaption><span>Stopping a Docker image</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker stop 7be2708d94ee
</span></code></pre></td></tr></table></div></figure>


<p>Docker has a <a href="http://docs.docker.io/use/workingwithrepository/">public repository</a> can you publish to, provided you have an account. Ultimately, publishing is done via the <code>push</code> command. For example, I&#8217;ve published my DynamoDB Local image via:</p>

<figure class='code'><figcaption><span>Docker pushing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker push aglover/dynamodb-pier
</span></code></pre></td></tr></table></div></figure>


<p>Once an image has been published, it can correspondingly be downloaded via the <code>pull</code> command:</p>

<figure class='code'><figcaption><span>Using a Docker image</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker pull aglover/dynamodb-pier
</span></code></pre></td></tr></table></div></figure>


<p>Think of <code>pull</code>ing as simply downloading and registering a Docker. To use a &#8216;pull&#8217;ed Docker, you must still execute the <code>run</code> command.</p>

<p>Docker makes it super easy to distribute pre-packaged applications &#8211; rather than installing various binaries on different operating systems (like MongoDB on OSX for development and <em>a different</em> MongoDB binary on Ubuntu for production), you can use the <em>same</em> package across environments. <code>Dockerfile</code>s make creating Dockers repeatable. And hopefully I&#8217;ve shown you that crafting a <code>Dockerfile</code> isn&#8217;t terribly difficult.  Go forth and Docker.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schooled in ping pong]]></title>
    <link href="http://thediscoblog.com/blog/2014/04/01/schooled-in-ping-pong/"/>
    <updated>2014-04-01T20:53:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2014/04/01/schooled-in-ping-pong</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/pingpong.jpg">Years ago, a <a href="http://www.pauljulius.com/">good friend of mine</a> taught me an effective pair programming technique that results in universally covered code. What&#8217;s more, this manner of pairing ultimately made me a better developer as I learned myriad different coding skills from my coding partner, ranging from testing techniques, defensive coding, and encapsulation, just to name a few.</p>

<p>A lot of my coding practices today can be traced to tactics I learned from playing what&#8217;s known as <em>ping pong</em>.</p>

<!-- more -->


<p>What&#8217;s <a href="http://c2.com/cgi/wiki?PairProgrammingPingPongPattern">ping pong</a> you ask? It&#8217;s a pair programming approach that&#8217;s absurdly simple:</p>

<ol>
<li>You write a failing test.</li>
<li>Your crony writes just enough code to make that test pass.</li>
<li>Your crony writes an additional failing test.</li>
<li>You write just enough code to make that new failing test pass.</li>
<li>Repeat (and refactor as needed).</li>
</ol>


<p>It&#8217;s that easy. The beauty of this process is that by limiting your coding to <em>just enough logic</em> to make a test pass, followed up with an additional test that <em>must fail</em> (which is thereby testing something new) you end up with 100% code coverage. What&#8217;s more, you don&#8217;t end up writing a lot of superfluous code.</p>

<h4>Show me the money</h4>

<p>Let me show you how it works. My fictitious ping pong pairing, with Frank and Glenn, will focus on creating a calculator that can add 2 numbers in <a href="http://thediscoblog.com/blog/categories/coffeescript/">CoffeeScript</a>.</p>

<p>Step 1 is to write a failing test. Accordingly, Frank crafts a test in <a href="http://visionmedia.github.io/mocha/">Mocha</a> with the expectation that 1 and 4 make 5.</p>

<figure class='code'><figcaption><span>Step 1: a failing test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span> <span class="s1">&#39;should&#39;</span>
</span><span class='line'><span class="nx">require</span> <span class="s1">&#39;mocha&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span> <span class="s1">&#39;a calculator&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s1">&#39;the addition function&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nx">it</span> <span class="s1">&#39;should support adding 2 positive numbers&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Calculator</span>
</span><span class='line'>          <span class="nx">value</span> <span class="o">=</span> <span class="nx">calculator</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">value</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Glenn runs the test and is immediately presented with an error:</p>

<figure class='code'><figcaption><span>Oh no! </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>1<span class="o">)</span> a calculator the addition <span class="k">function </span>should support adding 2 positive numbers:
</span><span class='line'>   ReferenceError: Calculator is not defined
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>&#8220;No problem&#8221; thinks Glenn and he adds the following line of code to the top of the test:</p>

<figure class='code'><figcaption><span>Import it, baby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Calculator</span> <span class="o">=</span> <span class="nx">require</span> <span class="s1">&#39;Calculator&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Glenn knew this wouldn&#8217;t make the test pass, but he recognized that the error he saw was related to the fact that <code>Calculator</code> wasn&#8217;t defined in the test. One problem has been licked, but he knows another one exists. Nevertheless, he runs the test again.</p>

<figure class='code'><figcaption><span>Still erroring out?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Error: Cannot find module <span class="s1">&#39;Calculator&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Glenn&#8217;s one step closer to making the test pass &#8211; he must define a <code>Calculator</code> class. Here, Glenn decides to write the <em>absolute minimum amount of code</em> to make the test pass:</p>

<figure class='code'><figcaption><span>As easy as it gets</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Calculator</span>
</span><span class='line'>  <span class="nx">add</span><span class="o">:</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Calculator</span>
</span></code></pre></td></tr></table></div></figure>


<p>Glenn now proceeds to run the test.</p>

<figure class='code'><figcaption><span>And it passes!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>a calculator
</span><span class='line'>    the addition <span class="k">function</span>
</span><span class='line'>      ✓
</span></code></pre></td></tr></table></div></figure>


<p>Step 2 is now complete: Glenn has written the minimum amount of code to make Frank&#8217;s test pass. Now Glenn must write a new test that fails.</p>

<p>Accordingly, for step 3, Glenn decides to do a bit of refactoring of the test and adds the following logic:</p>

<figure class='code'><figcaption><span>Step 3: A newly failing test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span> <span class="s1">&#39;should&#39;</span>
</span><span class='line'><span class="nx">require</span> <span class="s1">&#39;mocha&#39;</span>
</span><span class='line'><span class="nx">Calculator</span> <span class="o">=</span> <span class="nx">require</span> <span class="s1">&#39;Calculator&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span> <span class="s1">&#39;a calculator&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s1">&#39;the addition function&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nx">it</span> <span class="s1">&#39;should support adding 2 positive numbers&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="nx">inputs</span> <span class="o">=</span> <span class="p">[{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">5</span><span class="p">}]</span>
</span><span class='line'>          <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Calculator</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">input</span> <span class="k">in</span> <span class="nx">inputs</span>
</span><span class='line'>            <span class="nx">calculator</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">input</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="nx">input</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]).</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span> <span class="nx">input</span><span class="p">[</span><span class="s1">&#39;ans&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Frank runs the test and, indeed, the two intrepid developers are presented with a new error:</p>

<figure class='code'><figcaption><span>Without a surprise, it fails</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>a calculator
</span><span class='line'>    the addition <span class="k">function</span>
</span><span class='line'><span class="k">      </span>1<span class="o">)</span> should support adding 2 positive numbers
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  0 passing <span class="o">(</span>5ms<span class="o">)</span>
</span><span class='line'>  1 failing
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> a calculator the addition <span class="k">function </span>should support adding 2 positive numbers:
</span><span class='line'>     AssertionError: expected 5 to equal 3
</span></code></pre></td></tr></table></div></figure>


<p>But Frank&#8217;s no fink. He quickly corrects the state of failing code with a simple change to the <code>Calculator</code>.</p>

<figure class='code'><figcaption><span>Addition at its finest</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Calculator</span>
</span><span class='line'>  <span class="nx">add</span><span class="o">:</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Calculator</span>
</span></code></pre></td></tr></table></div></figure>


<p>He reruns the test and, not surprisingly, everything is kosher. Now it&#8217;s Frank&#8217;s turn for a bit of sadism, so he refactors the test slightly but throwing in a random <code>String</code>.</p>

<figure class='code'><figcaption><span>Tricky, Frank. Tricky.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span> <span class="s1">&#39;should&#39;</span>
</span><span class='line'><span class="nx">require</span> <span class="s1">&#39;mocha&#39;</span>
</span><span class='line'><span class="nx">Calculator</span> <span class="o">=</span> <span class="nx">require</span> <span class="s1">&#39;Calculator&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span> <span class="s1">&#39;a calculator&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s1">&#39;the addition function&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nx">it</span> <span class="s1">&#39;should support adding 2 positive numbers&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="nx">inputs</span> <span class="o">=</span> <span class="p">[{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">5</span><span class="p">}]</span>
</span><span class='line'>          <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Calculator</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">input</span> <span class="k">in</span> <span class="nx">inputs</span>
</span><span class='line'>            <span class="nx">calculator</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">input</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="nx">input</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]).</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span> <span class="nx">input</span><span class="p">[</span><span class="s1">&#39;ans&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Naturally, the test fails with the not too strange result of <code>AssertionError: expected '14' to equal 5</code>.</p>

<p>Glenn, feeling fiendish, goes to work by enhancing the <code>Calculator</code> <em>ever so slightly</em>.</p>

<figure class='code'><figcaption><span>Why just x?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Calculator</span>
</span><span class='line'>  <span class="nx">add</span><span class="o">:</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">+</span> <span class="nx">y</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Calculator</span>
</span></code></pre></td></tr></table></div></figure>


<p>The addition of the <code>Number</code> type for <em>x only</em> fixes Frank&#8217;s tricky test. Time to write a failing test. In what should be no big surprise, Glenn simply adds an additional associative array which contains <em>two</em> <code>String</code>s.</p>

<p>This step might seem pedestrian, but it&#8217;s deliberate: by only writing the minimum amount of code required to make a test pass and following that step up with an additional test, Glenn&#8217;s villainous coding behavior is ensuring every logical path through the evolving code is covered by a test.</p>

<p>Naturally, once Glenn&#8217;s new associative array is forcing a failure, Frank updates the <code>add</code> method to make the <code>y</code> input parameter a <code>Number</code> as well. Frank then proceeds to add a few more values to the <code>inputs</code> array.</p>

<figure class='code'><figcaption><span>Let&#8217;s see if you can make it fail now!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span> <span class="s1">&#39;should&#39;</span>
</span><span class='line'><span class="nx">require</span> <span class="s1">&#39;mocha&#39;</span>
</span><span class='line'><span class="nx">Calculator</span> <span class="o">=</span> <span class="nx">require</span> <span class="s1">&#39;Calculator&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span> <span class="s1">&#39;a calculator&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">describe</span> <span class="s1">&#39;the addition function&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nx">it</span> <span class="s1">&#39;should support adding 2 positive numbers&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="nx">inputs</span> <span class="o">=</span> <span class="p">[{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>             <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">5</span><span class="p">},</span>
</span><span class='line'>             <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">5</span><span class="p">},</span>
</span><span class='line'>             <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">5</span><span class="p">},</span>
</span><span class='line'>             <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>             <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mf">1.5</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="nx">ans</span><span class="o">:</span> <span class="mf">5.5</span><span class="p">}]</span>
</span><span class='line'>          <span class="nx">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Calculator</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">input</span> <span class="k">in</span> <span class="nx">inputs</span>
</span><span class='line'>            <span class="nx">calculator</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">input</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="nx">input</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]).</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span> <span class="nx">input</span><span class="p">[</span><span class="s1">&#39;ans&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>He runs the test hoping for a failure, but to no avail. Time to think a bit harder. Time to embrace one&#8217;s inner sadistic troll. He then adds the following associative array to the <code>inputs</code> array: <code>{x: 1.5, y: null, ans: 1.5}</code>. Yet, the test still passes.</p>

<p>It&#8217;s at this point that both Frank and Glenn feel they&#8217;re done: <code>add</code> works to their expectations. If they wanted to go on, Frank could proceed to write a failing test for a <code>subtract</code> function and so on.</p>

<h4>It&#8217;s a learning experience</h4>

<p>Interestingly, Frank learned a new way to approach testing from Glenn. When Glenn introduced the array of associative arrays, Frank was initially surprised. He figured it would be easier to write an additional test case. He even pointed that out to Glenn.  But Glenn countered that more <code>it</code> phrases don&#8217;t necessarily mean better tests; and besides, using his method of iterating over a series of values provided them with a lot of flexibility <em>without</em> a lot of boiler plate code &#8211; something Frank agreed with. Accordingly, Frank learned a new way of thinking about testing &#8211; make a single test a bit more powerful by using a series of values rather than making a lot of similar tests.</p>

<p>Frank also learned a bit of coding patience. He was initially annoyed when Glenn only updated <code>x</code> to use a <code>Number</code> type and completely ignored <code>y</code>. He accosted Glenn: &#8220;Update <code>y</code> too?!&#8221; to which Glenn countered that the only amount of code he needed to write to make Frank&#8217;s test pass. Frank then saw that his tricky test case with only 1 <code>String</code> input was essentially inadequate.</p>

<h4>Benefits and costs</h4>

<p>Ping pong pairing is a methodically deliberate manner of programming that forces you to be extremely patient, because you are limited to write the least amount of code to make a test pass <em>and no more</em>. And while it might seem like this process is a slow way to get things done, the benefits far outweigh the costs.</p>

<p>For one thing, two chums practicing ping pong will produce well tested functionality. Second, they&#8217;ll produce this functionality in a lot fewer lines of code than if they had done it otherwise. That&#8217;s a good thing and I&#8217;ve seen this result consistently. There&#8217;s one thing that I&#8217;ve come to learn: less working code is better than more. And pay attention here: producing fewer lines of working code usually means you have more tests than the code those tests are validating.</p>

<p>Additionally, this technique forces developers to learn from each other. Every developer has a great coding facility up their sleeves and every developer can learn something <em>new</em>.</p>

<p>Finally, ping pong results in two parties having an intimate knowledge of code. Two is better than one, in my book.</p>

<h4>Ping pong style</h4>

<p>I&#8217;ve found that ping pong is best practiced <a href="http://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro style</a> &#8211; ping pong isn&#8217;t something you can do all day, nor would I recommend you do so. Do it for 20 to 25 minutes then take a break and figure out if it was valuable or not. Chances are you&#8217;ll find it was a worthwhile investment in time and you&#8217;ll elect to do it again later in the day or another time.</p>

<p>Make no mistake: holding back the urge to loquaciously code away takes a lot of discipline and practice. But ping pong <em>will make you a better programmer</em> even if you only do it once in a while.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Git commands in 3 steps]]></title>
    <link href="http://thediscoblog.com/blog/2014/03/29/custom-git-commands-in-3-steps/"/>
    <updated>2014-03-29T18:12:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2014/03/29/custom-git-commands-in-3-steps</id>
    <content type="html"><![CDATA[<p>I&#8217;m lazy and so I seek ways to <a href="http://threevirtues.com/">reduce repetitious activities</a>. For instance, I&#8217;ve spent a lot of time in a terminal typing Git commands. A few of the more common commands, I&#8217;ve <a href="http://tldp.org/LDP/abs/html/aliases.html">aliased</a>. If I want to see a list of branches, I used to type:</p>

<figure class='code'><figcaption><span>Listing Git branches</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> git branch -v -a
</span></code></pre></td></tr></table></div></figure>


<p>But after adding an alias to my bash profile, I simply type <code>gb</code>. I&#8217;ve done this for a few commands like <code>git commit</code>, which is <code>gc</code> and <code>gca</code> for the <code>-a</code> flag.</p>

<!-- more -->


<p>Occasionally, aliases aren&#8217;t enough and when it comes to Git, you can create custom commands that can be referenced like so:</p>

<figure class='code'><figcaption><span>Your custom Git command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> git my-command
</span></code></pre></td></tr></table></div></figure>


<p>To create a custom command, you first need to create a file named <code>git-my-command</code>; second, you must place the resultant file on your path. Finally, you need to make the file executable. You can write this file in <a href="http://thediscoblog.com/blog/categories/linux/">Bash</a>, <a href="http://thediscoblog.com/blog/categories/ruby/">Ruby</a>, or Python &#8211; it doesn&#8217;t matter.</p>

<p>For example, I tend to find myself <a href="http://git-scm.com/book/en/Git-Tools-Stashing">stashing</a> some uncommitted changes and then later popping those stashed changes onto a new branch. I end up executing the following steps:</p>

<figure class='code'><figcaption><span>A simple Git flow</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> git stash
</span><span class='line'><span class="nv">$&gt;</span> git stash branch some_branch
</span></code></pre></td></tr></table></div></figure>


<p>The key step I want to simplify is the last one &#8211; I&#8217;m lazy and I&#8217;d rather not type 4 words. I&#8217;d rather type <code>git unstash some_branch</code> because it saves me one word.</p>

<p>Following the three simple steps I mentioned above, I&#8217;ll first create a file in my <code>~/bin</code> directory called <code>git-unstash</code>. The <code>~/bin</code> directory is in my path because my <code>.bashrc</code> has this line: <code>PATH=$PATH:$HOME/bin</code>.</p>

<p>My <code>git-unstash</code> script will be simple &#8211; it takes an argument (the branch name, i.e. <code>$1</code>); therefore, the script does a simple check to ensure the branch name is provided.</p>

<figure class='code'><figcaption><span>Custom Git command: unstash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="o">((</span>!<span class="nv">$#)</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nb">echo </span>No branch name, <span class="nb">command </span>ignored! <span class="o">&amp;&amp;</span> <span class="nb">exit </span>1
</span><span class='line'>
</span><span class='line'>git stash branch <span class="nv">$1</span>
</span></code></pre></td></tr></table></div></figure>


<p>After I&#8217;m done writing it, I&#8217;ll do a quick <code>chomd +x</code> and all three steps are accomplished.</p>

<p>Now my new flow is this:</p>

<figure class='code'><figcaption><span>A simple Git flow</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> git stash
</span><span class='line'><span class="nv">$&gt;</span> git unstash some_branch
</span></code></pre></td></tr></table></div></figure>


<p>Custom Git commands are that simple to invent &#8211; first, create a file named <code>git-my-command</code>. Next, place it on your path; and, finally, make it executable. Be lazy and carry on, baby!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8's functional fomentation]]></title>
    <link href="http://thediscoblog.com/blog/2014/03/25/java-8-s-functional-fomentation/"/>
    <updated>2014-03-25T20:39:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2014/03/25/java-8-s-functional-fomentation</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/revolution_small.png">Java 8 has revolutionized Java. It&#8217;s easily the most significant release of Java in the last <a href="http://en.wikipedia.org/wiki/Java_version_history#J2SE_5.0_.28September_30.2C_2004.29">10 years</a>. There are a ton of new features including default methods, method and constructor references, and lambdas, <a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">just to name a few</a>.</p>

<p>One of the more interesting features is the new <a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"><code>java.util.stream</code></a> API, which as the Javadoc states, enables</p>

<blockquote><p>functional-style operations on streams of elements, such as map-reduce transformations on collections</p></blockquote>


<p>Combine this new API with lambda expressions and you end up with a terse, yet, powerful syntax that significantly simplifies code through the application of projections.</p>

<!-- more -->


<p></p>

<p>Take, for example, the ostensibly simple task of filtering a collection. In this case, a simple <code>Collection</code> of <code>Message</code> types, created like so:</p>

<figure class='code'><figcaption><span>Creating a Collection of Messages</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">messages</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Message</span><span class="o">(</span><span class="s">&quot;aglover&quot;</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mi">56854</span><span class="o">));</span>
</span><span class='line'><span class="n">messages</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Message</span><span class="o">(</span><span class="s">&quot;aglover&quot;</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mi">85</span><span class="o">));</span>
</span><span class='line'><span class="n">messages</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Message</span><span class="o">(</span><span class="s">&quot;aglover&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="mi">9999</span><span class="o">));</span>
</span><span class='line'><span class="n">messages</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Message</span><span class="o">(</span><span class="s">&quot;rsmith&quot;</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="mi">4564</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this collection, I&#8217;d like to filter out <code>Message</code>s with a <code>delay</code> (3rd constructor parameter) greater than 3,000 seconds.</p>

<p><a href="http://stackoverflow.com/questions/122105/java-what-is-the-best-way-to-filter-a-collection">Previous to Java 8</a>, you could hand jam this sort of logic like so:</p>

<figure class='code'><figcaption><span>Filtering old school style</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">Message</span> <span class="n">message</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">delay</span> <span class="o">&gt;</span> <span class="mi">3000</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Java 8, however, this job becomes a lot more concise. Collections now support the <code>stream</code> method, which converts the underlying data structure into a iterate-able steam of objects and thereby permits a new breed of functional operations that leverage lambda expressions. Most of these operations can be chained as well. These chain-able methods are dubbed <em>intermediate</em>, methods that cannot be chained are denoted as <em>terminal</em>.</p>

<p>Briefly, lambda expressions are a lot like anonymous classes except with <em>a lot less</em> syntax. For example, if you look at the Javadocs for the parameter to a <code>Stream</code>&#8217;s <code>filter</code> method, you&#8217;ll see that it takes a <a href="http://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"><code>Predicate</code></a> type. Yet, you don&#8217;t have to implement this interface as you would, say, before Java 8 with an anonymous class. Consequently, the <code>Predicate</code> lambda expression for filtering all values of <code>delay</code> greater than 3000 would be:</p>

<figure class='code'><figcaption><span>Lambda expression</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">delay</span> <span class="o">&gt;</span> <span class="mi">3000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>x</code> is the parameter passed in for <em>each value</em> in the stream and everything to the right of the <code>-&gt;</code> being the expression evaluated.</p>

<p>Putting this all together in Java 8 yields:</p>

<figure class='code'><figcaption><span>Streaming lambdas!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">messages</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="n">m</span><span class="o">.</span><span class="na">delay</span> <span class="o">&gt;</span> <span class="mi">3000</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">item</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">item</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, due to some other new features of Java 8, the <code>forEach</code>&#8217;s lambda can be simplified further to:</p>

<figure class='code'><figcaption><span>Streaming lambdas are even shorter!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">messages</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="n">m</span><span class="o">.</span><span class="na">delay</span> <span class="o">&gt;</span> <span class="mi">3000</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because the parameter of the <code>forEach</code> lambda is simply consumed by the <code>println</code>, Java 8 now permits you to drop the parameter entirely.</p>

<p>Earlier, I mentioned that streams permit you to chain lambdas &#8211; in the case above, the <code>filter</code> method is an intermediate method, while the <code>forEach</code> is a terminal method. Other intermediate methods, that are immediately recognizable to functional programmers, are:  <code>map</code>, <code>flatMap</code>, and <code>reduce</code>, to name a few.</p>

<p>To elaborate, I&#8217;d like to find all <code>Message</code>s that are delayed more than 3,000 seconds and sum up the total delay time. Without functional magic, I could write:</p>

<figure class='code'><figcaption><span>Prosaic Java  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="n">totalWaitTime</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">Message</span> <span class="n">message</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">delay</span> <span class="o">&gt;</span> <span class="mi">3000</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">totalWaitTime</span> <span class="o">+=</span> <span class="n">message</span><span class="o">.</span><span class="na">delay</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nevertheless, with Java 8 and a bit of functional-foo, you can achieve a more elegant code construct like so:</p>

<figure class='code'><figcaption><span>Java 8 elegance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="n">totWaitTime</span> <span class="o">=</span> <span class="n">messages</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="n">m</span><span class="o">.</span><span class="na">delay</span> <span class="o">&gt;</span> <span class="mi">3000</span><span class="o">).</span><span class="na">mapToLong</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="n">m</span><span class="o">.</span><span class="na">delay</span><span class="o">).</span><span class="na">sum</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how I am able to chain the <code>filter</code> and <code>mapToLong</code> methods, along with a terminal <code>sum</code>. Incidentally, the <code>sum</code> method requires a specific map style method that yields a collection of primitive types, such as <code>mapToLong</code>, <code>mapToInt</code>, etc.</p>

<p>Functional style programming as a core language feature is an  astoundingly powerful construct. And while a lot of these techniques have been available in various 3rd party libraries like Guava and JVM languages like Scala and Groovy, having these features core to the language will surely reach a wider audience of developers and have the biggest impact to the developmental landscape.</p>

<p>Java 8, without a doubt, drastically changes the <a href="http://thediscoblog.com/blog/categories/java/">Java language</a> for the better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ahoy there Maven Central]]></title>
    <link href="http://thediscoblog.com/blog/2014/02/12/ahoy-there-maven-central/"/>
    <updated>2014-02-12T20:54:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2014/02/12/ahoy-there-maven-central</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/aglover/ahoy">Ahoy!</a>, which is an asynchronous <a href="http://thediscoblog.com/blog/categories/sqs/">SQS</a> adapter for <a href="http://thediscoblog.com/blog/categories/aws/">AWS&#8217;s Java SQS library</a>, is now syncing with Maven Central. This means you can easily use Ahoy! in your Maven or Gradle builds.</p>

<p>For example, if you want to <a href="http://thediscoblog.com/blog/2013/09/29/ahoy-there-callbacks/">spice up your SQS</a> and you use Maven, just add the following dependency for your <code>pom.xml</code> file and you&#8217;ll be rockin&#8217; it in no time, baby!</p>

<figure class='code'><figcaption><span>Including Ahoy! into your Maven pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.github.aglover<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>ahoy<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You don&#8217;t use Maven? But rather use Gradle? I&#8217;ve got you covered!</p>

<figure class='code'><figcaption><span>Adding Ahoy! into your Gradle build.gradle file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">compile</span> <span class="s1">&#39;com.github.aglover:ahoy:1.0.1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out <a href="http://mvnrepository.com/artifact/com.github.aglover/ahoy">mvnrepository.com</a> for how to include Ahoy! into your SBT build or other dependency management tool like Ivy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Delivery for Heroku with Jenkins]]></title>
    <link href="http://thediscoblog.com/blog/2014/01/24/continuous-delivery-for-heroku-with-jenkins/"/>
    <updated>2014-01-24T20:43:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2014/01/24/continuous-delivery-for-heroku-with-jenkins</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/jenkins.png">A <a href="http://thediscoblog.com/blog/categories/devops/">continuous delivery pipeline</a> that leverages <a href="http://jenkins-ci.org/">Jenkins</a> and targets <a href="http://heroku.com/">Heroku</a> is fairly simple to set up, provided you install the Jenkins Git plugin. With this pipeline, changes to a specific Git branch will result in a Heroku deployment.</p>

<p>For this deployment process to work nicely, you should use at least two Git branches, as you&#8217;ll want to have one branch targeted for auto-deploys and another that doesn&#8217;t (as it represents active development).  For example, following the <a href="http://nvie.com/posts/a-successful-git-branching-model/">git-flow</a> convention, those two branches could be named <code>development</code> and <code>master</code>, where changes to <code>master</code> are deployed to Heroku and changes to <code>development</code> aren&#8217;t. Thus, you will have at least two Jenkins jobs that monitor <em>each</em> of these branches.</p>

<!-- more -->


<p>Naturally, this pipeline process is language agnostic &#8211; <a href="http://thediscoblog.com/blog/categories/node/">Node</a>, <a href="http://thediscoblog.com/blog/categories/ruby/">Ruby</a>, <a href="http://thediscoblog.com/blog/categories/java/">Java</a> &#8211; it doesn&#8217;t matter what you do during your build as this entire process is choreographed via Git.</p>

<p>When approaching Heroku auto-deployment from Jenkins, <em>don&#8217;t bother with Heroku&#8217;s API</em> because it&#8217;s much easier to use the Git publisher feature of Jenkins to push a branch from your repository to Heroku (which uses Git anyway).</p>

<p>At a high level, you&#8217;ll need to define a Jenkins job that monitors your <code>master</code> Git branch; if there are changes, this job will run whatever your build needs to do and as a post-build step you can publish that branch to Heroku. It&#8217;s that easy.</p>

<p>To configure this pipeline, you will need the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin">Git plugin</a>. With the Git plugin installed, create a job and in the Source Code management section, add your source Git repository and then add another repository which is the Heroku remote repository.</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/scm-jenkins1.png"></p>

<p>Be sure to give the Heroku repository a name like <code>heroku</code>. This is done by clicking the Advanced button under the Credentials section.</p>

<p>Second, in the Post-build Actions section, you&#8217;ll configure a Git Publisher.</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/git-pub.png"></p>

<p>In this case, the Git repository you are going to publish to will be the Heroku one defined earlier.  Hit the Add Branch button and be sure to indicate the <code>master</code> branch as the Branch to push and the Target remote name should be the name your gave to the remote Heroku repository in the Source Code Management section (i.e. <code>heroku</code>).</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/scm-jenkins2.png"></p>

<p>Depending on how you&#8217;ve set up your Build Trigger on your job, when a build completes, Jenkins will push the resultant snapshot to the Heroku repository, <a href="http://stackoverflow.com/questions/16840196/tutorial-on-pushing-to-heroku-via-jenkins/20828183#20828183">resulting in a deployment</a>! Now wasn&#8217;t that easy, man?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HipChat's 1 billion messages served]]></title>
    <link href="http://thediscoblog.com/blog/2014/01/06/hipchats-1-billion-messages-served/"/>
    <updated>2014-01-06T13:50:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2014/01/06/hipchats-1-billion-messages-served</id>
    <content type="html"><![CDATA[<p>There&#8217;s an <a href="http://blog.hipchat.com/2013/10/16/how-hipchat-scales-to-1-billion-messages/">instructive post on the HipChat blog</a> regarding how their product&#8217;s message count has risen from 110 million to over a billion since they were acquired by Atlassian. Central to their scaling strategy to meet data growth was their migration from Lucene to <a href="http://thediscoblog.com/blog/categories/elasticsearch/">Elasticsearch</a>.</p>

<!-- more -->


<p>In their words they:</p>

<blockquote><p>kicked Lucene to the curb in favor of Elasticsearch.</p><footer><strong>Zuhaib Siddique</strong> <cite><a href='http://blog.hipchat.com/2013/10/16/how-hipchat-scales-to-1-billion-messages/'>How HipChat Scales to 1 Billion Messages</a></cite></footer></blockquote>


<p>Their reasoning? <a href="http://thediscoblog.com/blog/2013/09/03/effortless-elasticsearch-clustering/">Elasticsearch&#8217;s cluttering</a>  allows them to:</p>

<blockquote><p>add more nodes to our cluster when we need more capacity, so we can handle extra load while concurrently serving requests. Moreover, the ability to have our shards replicated across the cluster means if we ever lose an instance, we can still continue serving requests, reducing the amount of time HipChat Search is offline.</p><footer><strong>Zuhaib Siddique</strong> <cite><a href='http://blog.hipchat.com/2013/10/16/how-hipchat-scales-to-1-billion-messages/'>How HipChat Scales to 1 Billion Messages</a></cite></footer></blockquote>


<p>The other two primary pieces of their architecture haven&#8217;t changed: CouchDB and <a href="http://thediscoblog.com/blog/categories/redis/">Redis</a>. Interestingly, HipChat <a href="http://www.ibm.com/developerworks/library/j-javadev2-11/">shards</a> Redis data:</p>

<blockquote><p>we shard our data over 3 Redis servers, with each server having its own slave.</p><footer><strong>Zuhaib Siddique</strong> <cite><a href='http://blog.hipchat.com/2013/10/16/how-hipchat-scales-to-1-billion-messages/'>How HipChat Scales to 1 Billion Messages</a></cite></footer></blockquote>


<p>Sharding in <a href="http://redis.io/">Redis</a> isn&#8217;t supported out of the box and requires an application to determine how to partition data across shards.  I wonder how HipChat data is partitioned and if their strategy evenly smears data across their shards &#8211; like with any sharing strategy, once you&#8217;ve sharded on a particular key, <a href="http://www.javaworld.com/article/2073449/think-twice-before-sharding.html">it&#8217;s extremely difficult to re-shard</a>.</p>

<p>&#8220;<a href="http://blog.hipchat.com/2013/10/16/how-hipchat-scales-to-1-billion-messages/">How HipChat scales to 1 Billion Messages</a>&#8221; is a good read &#8211; so what are you waiting for? Check <a href="http://blog.hipchat.com/2013/10/16/how-hipchat-scales-to-1-billion-messages/">it out</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just require tire to inquire]]></title>
    <link href="http://thediscoblog.com/blog/2013/12/29/just-require-tire-to-inquire/"/>
    <updated>2013-12-29T12:53:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/12/29/just-require-tire-to-inquire</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/es-bonzai.jpg">In the land of <a href="http://thediscoblog.com/blog/categories/ruby/">Ruby</a> there&#8217;s a few client libraries for <a href="http://thediscoblog.com/blog/categories/elasticsearch/">Elasticsearch</a>, however, one stands above the rest with a comprehensive set of features and remarkable <a href="http://karmi.github.io/retire/">documentation</a>: <a href="https://github.com/karmi/retire">Tire</a>.</p>

<p>With its DSL based API, you&#8217;ll find working with <a href="http://www.ibm.com/developerworks/library/j-javadev2-24/">Elasticsearch</a> straightforward and a lot of fun. And even though the project&#8217;s repository has been renamed to <a href="https://github.com/karmi/retire/wiki/Tire-Retire">retire</a>, the Tire library</p>

<blockquote><p>will continue to work&#8230;bugs will be fixed and important features will be added.</p><footer><strong>Karel Minarik</strong> <cite><a href='https://github.com/karmi/retire/wiki/Tire-Retire'>Tire Retire</a></cite></footer></blockquote>


<p>In my opinion, for the time being, Tire is still superior to the <a href="https://github.com/elasticsearch/elasticsearch-ruby">elasticsearch-ruby</a> alternative in terms of features and its elegant DSL.</p>

<!-- more -->


<p></p>

<p>To begin using Tire, grab the gem. For instance, if you&#8217;re using Bundler, then add the following line to your <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span>Adding Tire to a Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;tire&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running a <code>bundle install</code>, you&#8217;ll be able to require Tire.</p>

<figure class='code'><figcaption><span>Requiring Tire</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;tire&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tire assumes a locally running instance of Elasticsearch; if you wish to connect to a remote node, then create a <code>configure</code> block and set the <code>url</code> to a remote Elasticsearch instance.</p>

<figure class='code'><figcaption><span>Configuring a remote Elasticsearch instance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tire</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">url</span> <span class="n">environment</span><span class="o">[</span><span class="s1">&#39;elasticsearch_host&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, the <code>url</code> is set the value of <code>elasticsearch_host</code>.</p>

<h5>Dealing with Indexes</h5>

<p>First and foremost to working with Elasticsearch is the creation of an index, which can be thought of as a database. Search-able documents are then stored in an index and the process of adding documents to an index is known as <em>indexing</em>.</p>

<p>Consequently, to create an index, you simply name it an issue a <code>create</code> in an <code>index</code> block.</p>

<figure class='code'><figcaption><span>Creating an index</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tire</span><span class="o">.</span><span class="n">index</span> <span class="s1">&#39;beer_recipes&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">create</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the index is named &#8216;beer_recipes&#8217;.</p>

<p>As I&#8217;ve <a href="http://thediscoblog.com/blog/2013/09/14/understanding-elasticsearch-analyzers/">covered before</a>, you can alter how Elasticsearch indexes a document by providing a customized index mapping. In the code below, I&#8217;ve specified that the <code>ingredients</code> property of the <code>beer</code> type will be analyzed using the snowball algorithm, which converts a word into its root, yielding a simpler token (i.e. &#8216;lemons&#8217; becomes &#8216;lemon&#8217;, &#8216;jazzy&#8217; becomes &#8216;jazz&#8217;).</p>

<figure class='code'><figcaption><span>Changing the mapping of an index</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tire</span><span class="o">.</span><span class="n">index</span> <span class="s1">&#39;beer_recipes&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">create</span> <span class="n">mappings</span><span class="p">:</span>  <span class="p">{</span>
</span><span class='line'>      <span class="n">beer</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">properties</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">ingredients</span><span class="p">:</span>  <span class="p">{</span> <span class="n">type</span><span class="p">:</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="n">analyzer</span><span class="p">:</span> <span class="s1">&#39;snowball&#39;</span> <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, to delete an index, simply issue a <code>delete</code>, like so:</p>

<figure class='code'><figcaption><span>Delete an index</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tire</span><span class="o">.</span><span class="n">index</span> <span class="s1">&#39;beer_recipes&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">delete</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, the whole point of <a href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/">Elasticsearch is search</a>! And searching with Tire is super simple; what&#8217;s more, Tire offers a slick feature of allowing you to define model objects for both indexing and searching (think <a href="https://gist.github.com/karmi/3200212">ActiveRecord</a> integration).</p>

<h5>Indexing &amp; Searching with Tire</h5>

<p>In <a href="http://thediscoblog.com/blog/categories/elasticsearch/">Elasticsearch</a>, an index can be thought of as a database and a <em>type</em> can be thought of as a database table. Accordingly, when you index a document, you give it a type and associate properties, which essentially act like columns.</p>

<p>Indexing a document is executed via the <code>store</code> command. In the code below, a document is stored as a <code>beer</code> type with three properties: <code>name</code>, <code>style</code>, and <code>ingredients</code>. The <code>refresh</code> command updates the index and accordingly makes this newly indexed document available for search.</p>

<figure class='code'><figcaption><span>Indexing a document</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tire</span><span class="o">.</span><span class="n">index</span> <span class="s1">&#39;beer_recipes&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">store</span> <span class="n">type</span><span class="p">:</span> <span class="s1">&#39;beer&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Todd Enders&#39; Witbier&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span><span class="p">:</span> <span class="s2">&quot;wit, Belgian ale, wheat beer&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ingredients</span><span class="p">:</span> <span class="s2">&quot;4.0 lbs Belgian pils malt, 4.0 lbs raw soft red winter wheat, 0.5 lbs rolled oats, 0.75 oz coriander, freshly ground Zest from two table oranges and two lemons, 1.0 oz 3.1% AA Saaz, 3/4 corn sugar for priming, Hoegaarden strain yeast&quot;</span>
</span><span class='line'>  <span class="n">refresh</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Consequently, to search for a document in an index, you use the <code>search</code> method, which returns a list of results.</p>

<figure class='code'><figcaption><span>Searching for a document</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">search_res</span> <span class="o">=</span> <span class="no">Tire</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;beer_recipes&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">query</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">term</span> <span class="ss">:ingredients</span><span class="p">,</span> <span class="s1">&#39;lemon&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert_equal</span> <span class="mi">1</span><span class="p">,</span> <span class="n">search_res</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="n">assert_equal</span> <span class="s2">&quot;Todd Enders&#39; Witbier&quot;</span><span class="p">,</span> <span class="n">search_res</span><span class="o">.</span><span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, the <code>search</code> block defines a simple query where the <code>ingredients</code> property is searched for the term &#8216;lemon&#8217;, which yields one result. Note, the resultant list contains maps whose keys are the document&#8217;s properties (i.e. <code>name</code>, <code>style</code>, and <code>ingredients</code>).</p>

<p>You can use normal Ruby objects for both indexing and searching in Tire. The only requirement is that your model object provide a <code>type</code>, <code>_type</code> or <code>document_type</code> method as well as a <code>to_indexed_json</code> method.</p>

<p>In this case, I&#8217;ve defined a <code>Beer</code> class that includes the two required methods as well as a class method that enables searching the <code>ingredients</code> property.</p>

<figure class='code'><figcaption><span>Using a model object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Beer</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:style</span><span class="p">,</span> <span class="ss">:ingredients</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">search_ingredients_for</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
</span><span class='line'>          <span class="n">search_res</span> <span class="o">=</span> <span class="no">Tire</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;beer_recipes&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">query</span> <span class="k">do</span>
</span><span class='line'>              <span class="n">term</span> <span class="ss">:ingredients</span><span class="p">,</span> <span class="n">ingredient</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">search_res</span><span class="o">.</span><span class="n">results</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>      <span class="vi">@attributes</span> <span class="o">=</span> <span class="n">attributes</span>
</span><span class='line'>    <span class="vi">@attributes</span><span class="o">.</span><span class="n">each_pair</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span><span class="n">value</span><span class="o">|</span> <span class="nb">instance_variable_set</span> <span class="ss">:&quot;@</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="ss">&quot;</span><span class="p">,</span> <span class="n">value</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">type</span>
</span><span class='line'>    <span class="s1">&#39;beer&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_indexed_json</span>
</span><span class='line'>    <span class="vi">@attributes</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, to make use of my <code>Beer</code> model object, I need to configure Tire to use it via the <code>wrapper</code> command. Once that is done, I can use my <code>Beer</code> object to index beers and to search for them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Tire</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">wrapper</span> <span class="no">Beer</span> <span class="c1">#forces results to be of type beer!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Tire</span><span class="o">.</span><span class="n">index</span> <span class="s1">&#39;beer_recipes&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">store</span> <span class="no">Beer</span><span class="o">.</span><span class="n">new</span> <span class="n">type</span><span class="p">:</span> <span class="s1">&#39;beer&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Todd Enders&#39; Witbier&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">style</span><span class="p">:</span> <span class="s2">&quot;wit, Belgian ale, wheat beer&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">ingredients</span><span class="p">:</span> <span class="s2">&quot;4.0 lbs Belgian pils malt, 4.0 lbs raw soft red winter wheat, 0.5 lbs rolled oats, 0.75 oz coriander, freshly ground Zest from two table oranges and two lemons, 1.0 oz 3.1% AA Saaz, 3/4 corn sugar for priming, Hoegaarden strain yeast&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">refresh</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">results</span> <span class="o">=</span> <span class="no">Beer</span><span class="o">.</span><span class="n">search_ingredients_for</span> <span class="s1">&#39;lemons&#39;</span>
</span><span class='line'><span class="n">assert_equal</span> <span class="mi">1</span><span class="p">,</span> <span class="n">results</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="n">assert_equal</span> <span class="no">Beer</span><span class="p">,</span> <span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">class</span>
</span><span class='line'><span class="n">assert_equal</span> <span class="s2">&quot;Todd Enders&#39; Witbier&quot;</span><span class="p">,</span> <span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see above, the <code>store</code> method takes a new instantiated <code>Beer</code> instance; what&#8217;s more, I can use my <code>search_ingredients_for</code> class method to find a corresponding document.</p>

<p>While there are alternate Ruby <a href="http://thediscoblog.com/blog/2013/01/02/scalable-searching-with-elasticsearch/">Elasticsearch</a> libraries available, Tire is by far the richest &#8211; its features along with its DSL make working with <a href="http://www.ibm.com/developerworks/library/j-javadev2-24/">Elasticsearch</a> easy along with fun. So what are you waiting for? Require Tire to inquire!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku deployments with Git branches]]></title>
    <link href="http://thediscoblog.com/blog/2013/12/26/heroku-deployments-with-git-branches/"/>
    <updated>2013-12-26T21:46:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/12/26/heroku-deployments-with-git-branches</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/heroku-logo-light.png">Single branch development is easy. But this strategy&#8217;s easiness blows up once you release code to the general public.  If you need to hot-fix an instance of deployed code, while in the midst of a development cycle, single branch development gets in your way by requiring you think. On the other hand, having <em>more than one</em> branch at least allows you to jump back in time via an alternate branch to perform a patch, while not disturbing an unfinished developmental branch. And you can do this without having to think much.</p>

<!-- more -->


<p>Consequently, if you have multiple <a href="http://git-scm.com/">Git</a> branches (such as those managed via <a href="https://github.com/nvie/gitflow">git-flow</a>)  you can map those branches to different <a href="https://www.heroku.com/">Heroku</a> environments quite easily. First, you&#8217;ll want to appropriately name your remote <a href="http://thediscoblog.com/blog/categories/heroku/">Heroku</a> environments; for instance, you can name the remote repositories <code>prod</code>, <code>test</code>, <code>staging</code>, etc.</p>

<p>You can add a remote Git repository like so:</p>

<figure class='code'><figcaption><span>Adding a remote Git repo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add &lt;name&gt; git@heroku.com:&lt;heroku_app_name&gt;.git
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>heroku_app_name</code> is the name you gave your app or the one automatically created by Heroku via the <code>heroku create</code> command.</p>

<p>With different Heroku environments, you can easily map each one to a Git branch. For instance, a production environment can map to the <code>master</code> branch and a test environment can map to a branch called <code>release</code>. If you have a development environment, that can map to a branch dubbed <code>develop</code> (note, these branch names correlate nicely with git-flow&#8217;s defaults).</p>

<p>To deploy the <code>release</code> branch to your Heroku test environment, you can issue this command:</p>

<figure class='code'><figcaption><span>Deploying a topic branch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push <span class="nb">test </span>release:master
</span></code></pre></td></tr></table></div></figure>


<p>If you deploy often (i.e. push a lot!) and you can&#8217;t seem to remember the <code>release:master</code> portion, you can create a remote alias like so:</p>

<figure class='code'><figcaption><span>Adding an alias</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config remote.test.push release:master
</span></code></pre></td></tr></table></div></figure>


<p>Thus, deployments to the test environment are as simple as:</p>

<figure class='code'><figcaption><span>Simple deployments!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.ibm.com/developerworks/library/j-javadev2-21/">Heroku&#8217;s deployment model</a>, which leverages Git, couldn&#8217;t be any simpler; what&#8217;s more, setting up a release pipeline with multiple environments mapped to different Git branches is just as easy. Dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch in a box]]></title>
    <link href="http://thediscoblog.com/blog/2013/11/25/elasticsearch-in-a-box/"/>
    <updated>2013-11-25T13:42:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/11/25/elasticsearch-in-a-box</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/esbox.jpg">Are you looking to get going with <a href="http://thediscoblog.com/blog/categories/elasticsearch/">Elasticsearch</a> as quickly as possible without having to worry about <a href="http://thediscoblog.com/blog/2013/05/17/elasticsearch-on-ec2-in-less-than-60-seconds/">installing Java or Elasticsearch</a> itself? Are you looking for a repeatable and automated mechanism for bringing up Elasticsearch instances for developmental and or testing purposes? While there&#8217;s certainly a number of <a href="http://www.elasticsearch.org/">Elasticsearch</a>-as-a-platform service providers out there, there&#8217;s one other option: use <a href="https://github.com/aglover/coffer">Elasticsearch-in-a-box</a>.</p>

<p>Elasticsearch-in-a-box is a freely available <a href="http://www.vagrantbox.es/">Vagrant base box</a>. What that means is that you can quickly fire up and tear down an Elasticsearch environment with <a href="http://docs.vagrantup.com/v2/getting-started/">simple commands</a> like <code>vagrant up</code> and <code>vagrant destroy</code>.</p>

<!-- more -->


<p>In order to use Elasticsearch-in-a-box, you first need to have <a href="http://docs.vagrantup.com/v2/installation/">Vagrant</a> and <a href="https://www.virtualbox.org/">VirtualBox</a> installed. These two installations couldn&#8217;t be any easier. To install <a href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/">Vagrant</a>, simply go to the downloads page and pick your target distribution. Vagrant provisions machines on top of virtual machine providers like VMWare, <a href="http://thediscoblog.com/blog/categories/aws/">AWS</a>, and VirtualBox. VirtualBox is free and easy to install &#8211; like Vagrant, simply <a href="https://www.virtualbox.org/wiki/Downloads">go to the downloads section</a> and pick your target platform.</p>

<p>Once you have both Vagrant and VirtualBox installed, you are two steps away from Elasticsearch-ing.</p>

<p>First, you need to add and initialize the Elasticsearch-in-a-box <a href="http://docs.vagrantup.com/v2/boxes.html">template</a>. Go ahead and create a directory, like <code>/projects/esinabox</code>, change directories into it and execute this command:</p>

<figure class='code'><figcaption><span>This command will create a Vagrant definition named esinabox from the downloaded template</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant box add esinabox https://s3.amazonaws.com/coffers/esinabox.box
</span></code></pre></td></tr></table></div></figure>


<p>This command will download the Elasticsearch-in-a-box template. Once that completes (it&#8217;ll take a few moments depending on your connection), execute this command:</p>

<figure class='code'><figcaption><span>Vagrant init will create a VagrantFile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant init <span class="s1">&#39;esinabox&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command will create a <code>VagrantFile</code>, which you can use to customize the Elasticsearch-in-a-box instance. By default, you shouldn&#8217;t need to do much, however, you can map network ports, install additional software via <a href="http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps/">Bash</a>, Chef, and Puppet at your discretion.</p>

<p>Next, fire up Elasticsearch-in-a-box like so:</p>

<figure class='code'><figcaption><span>Starting up Elasticsearch-in-a-box</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>Now that Elasticsearch-in-a-box is running locally on your machine, you can open up a new terminal and execute RESTful commands like normal because Elasticsearch is running on same ports: 9200 &amp; 9300. So go ahead and execute some queries, like so:</p>

<figure class='code'><figcaption><span>Elasticsearch is up an running!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET <span class="s1">&#39;http://localhost:9200/_status?pretty=true&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when you are done, go ahead and tear down the instance like so:</p>

<figure class='code'><figcaption><span>Destroying a VM instance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant destroy -f
</span></code></pre></td></tr></table></div></figure>


<p>Wasn&#8217;t that easy? The Elasticsearch-in-a-box Vagrant template was built using <a href="https://github.com/jedi4ever/veewee">Veewee</a>. The base box is 64-bit <a href="http://www.ubuntu.com/index_asus.html">Ubuntu 12.04</a> with Oracle&#8217;s <a href="http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps/">Java 7</a> and <a href="http://www.elasticsearch.org/download/">Elasticsearch version 0.90.7</a>.</p>

<p>If you&#8217;re looking for a quick and easy way to automatically provision Elasticsearch, then look no further and give <a href="https://github.com/aglover/coffer">Elasticsearch-in-a-box</a> a try!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review: Instant Mockito]]></title>
    <link href="http://thediscoblog.com/blog/2013/11/22/book-review-instant-mockito/"/>
    <updated>2013-11-22T13:33:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/11/22/book-review-instant-mockito</id>
    <content type="html"><![CDATA[<p>Recently, the good folks over at <a href="http://www.packtpub.com/">Packt Publishing</a> gave me a copy of their newly published <a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a>, by <a href="http://toomuchcoding.blogspot.com/">Marcin Grzejszczak</a>. Packt&#8217;s <a href="http://www.packtpub.com/books/instant">Instant series</a> are really enjoyable. The premise of these books is that they&#8217;re short and sweet. They&#8217;re slightly more than a tutorial; they get you up and running quickly while throwing in a few more facets that go beyond the typical tutorial.</p>

<!-- more -->


<p></p>

<iframe style="float: right; margin-left: 1.5em; height:260px; width:150px;" src="http://rcm-na.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=thdibl-20&o=1&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00ESX15M2" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p><a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a> is a quick read at 92 pages; what&#8217;s more, Marcin does a great job of keeping a consistent example domain alive throughout the entire book. The big picture is how to use <a href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/">Mockito</a> with <a href="http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer/">JUnit</a>, testing a fictitious restaurant ordering system.</p>

<p>The format of Packt&#8217;s Instant books are all similar — the first part is a quick &#8220;up and running&#8221; that essentially encapsulates the basic tutorial you can find on a project&#8217;s home page. The meat of an Instant book comes next, where the author dives into a number of features they feel are important to grasp a particular subject.</p>

<p>In the case of <a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book">Marcin&#8217;s book</a>, he elaborates on 8 key Mockito subjects:</p>

<ul>
<li>Performing argument matching</li>
<li>Stubbing multiple calls</li>
<li>Working with void methods and thrown exceptions</li>
<li>Stubbing with a custom answer</li>
<li>Verifying behavior (including argument capturing, verifying call order, and working with asynchronous code)</li>
<li>Doing partial mocking (spying)</li>
<li>Reducing boilerplate code with annotations</li>
<li>Taking advantage of advanced mocks configuration</li>
</ul>


<p>Again, each subject expands upon a waiter-taking-an-order domain. As this is a book focusing on Mockito, the mocking aspects are straightforward — this isn&#8217;t a book on how to test poorly written code, for example, so the code under test in this case uses dependency injection. This makes it easy to grasp Mockito subjects without having to delve into the intricacies of terrible code (ironically, I often times find myself employing Mockito when dealing with poorly written code).</p>

<p>Speaking of poorly written code: the only thing I did not particularly enjoy about the book was the formatting of the code. Code formatting has always been problematic in books, however, many publishers have figured out how to properly convey code (in particular, <a href="http://www.oreilly.com/">O&#8217;Reilly</a> books do a good job).</p>

<p>In the case of <a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a>, the code examples (at least reading the epub version on my iPad) have such narrow margins that each logical line of code is often broken into 3 or more lines (and dashes are used to signify a line break). While it certainly doesn&#8217;t render the code unreadable, it makes instant code comprehension challenging. I found myself having to read through each code example multiple times just to get the basic idea.</p>

<p>Code formatting aside, <a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book">Marcin&#8217;s book was an easy read</a> and the 8 features he feels every Mockito user should know are well explained.  As a user of Mockito, I couldn&#8217;t agree more with the relevance of these features. If you enjoy quick reads, want to learn the basics of mocking in JUnit with Mockito, and you can put up with inadequate code formatting, then go ahead and give <a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a> a read!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Provisioning Ubuntu with Java in 3 steps]]></title>
    <link href="http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps/"/>
    <updated>2013-11-18T17:34:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/ubuntu.png"> <a href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/">As I&#8217;ve written about before</a>, <a href="http://www.vagrantup.com/">Vagrant</a> is handy tool for creating <a href="http://www.vagrantbox.es/">localized VMs</a>. It&#8217;s a lot like firing up <a href="http://thediscoblog.com/blog/categories/aws/">EC2</a> images, but, for the most part, things are localized (you can, by the way, use Vagrant to <a href="https://github.com/mitchellh/vagrant-aws">fire up EC2 images</a>). If you&#8217;ve ever used VMWare before, its the same thing, except Vagrant is free. You can create VMs of various operating systems, fire them up, and tear them down all with ease.</p>

<p>Vagrant plays nicely with hip DevOps frameworks like <a href="http://www.opscode.com/chef/">Chef</a> and <a href="http://puppetlabs.com/">Puppet</a> and if your installations require a number of components, then these tools are defiantly the way to go. Sometimes, however, a simple Bash script is good enough as in the case for auto-installing some base component, like <a href="http://thediscoblog.com/blog/categories/java/">Java</a>, <a href="http://thediscoblog.com/blog/categories/node/">Node.js</a> or <a href="http://thediscoblog.com/blog/categories/ruby/">Ruby</a>.</p>

<p>Using Vagrant&#8217;s configuration file, aptly dubbed <code>Vagrantfile</code>, you can instruct a VM instance to run a series of steps &#8211; these steps can be simple shell scripts, Chef cookbooks, or the Puppet equivalent.</p>

<!-- more -->


<p>Accordingly, the first step to provision an Ubuntu box with Java is to initialize a 64-bit <a href="http://thediscoblog.com/blog/categories/linux/">Ubuntu</a> 12.04 LTS (<a href="https://wiki.ubuntu.com/PrecisePangolin">Precise Pangolin</a>) instance. You can do this via the <code>vagrant init</code> command like so:</p>

<figure class='code'><figcaption><span>Initializing a Vagrant box</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> vagrant init ubuntu.lts.64 http://files.vagrantup.com/precise64.box
</span></code></pre></td></tr></table></div></figure>


<p>This creates a <code>Vagrantfile</code> in the directory where you ran the command and creates a named VM (i.e. &#8220;ubuntu.lts.64&#8221;) that is based off of Ubuntu 12.04 LTS.</p>

<p>Base Ubuntu installations do not come with Java; if you&#8217;d like to install a particular JDK, say Oracle&#8217;s JDK 7, you can leverage <a href="https://github.com/aglover/ubuntu-equip">ubuntu-equip</a>, which is a series of Bash scripts that install various components like Java, Node.js, MongoDB, Redis, Ruby, etc.</p>

<p>Thus, for step 2, open up the newly created <code>Vagrantfile</code> and you should see two lines like so:</p>

<figure class='code'><figcaption><span>A basic VagrantFile contains the box and box_url attributes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s1">&#39;ubuntu.lts.64&#39;</span>
</span><span class='line'><span class="c1"># a few comments...</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s1">&#39;http://files.vagrantup.com/precise64.box&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the <code>vm.box_url</code> declaration, insert the following line:</p>

<figure class='code'><figcaption><span>Installing Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:shell</span><span class="p">,</span> <span class="n">inline</span><span class="p">:</span> <span class="s1">&#39;wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_java7_64.sh &amp;&amp; bash equip_java7_64.sh&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command instructs the instance to run an inline Bash command once it is up and running, which in this case auto-installs Oracle&#8217;s Java 7 JDK (see the <a href="https://github.com/aglover/ubuntu-equip">ubuntu-equip</a> project for more information).</p>

<p>Save your <code>VagrantFile</code> and then, for step 3, run the following command in the same directory:</p>

<figure class='code'><figcaption><span>Firing up a new VM</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>If this is the first time firing up this particular VM, you should see some text indicating that a particular box is being downloaded. Once the download is complete, the instance will boot up and subsequently invoke the inline provision command that kicks off the installation of Java.</p>

<p>If all goes well, you should see a lot of text scroll by ending with:</p>

<figure class='code'><figcaption><span>Java is installed!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java version <span class="s2">&quot;1.7.0_25&quot;</span>
</span><span class='line'>Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment <span class="o">(</span>build 1.7.0_25-b15<span class="o">)</span>
</span><span class='line'>Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM <span class="o">(</span>build 23.25-b01, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. To use the VM, <a href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/">simply SSH to it</a>. Go ahead and type <code>java -version</code> just to convince yourself. Go ahead, I&#8217;ll wait for you&#8230;there, are you happy now?  Wasn&#8217;t that easy? Provisioning Ubuntu VMs with Vagrant couldn&#8217;t be any easier with <a href="https://github.com/aglover/ubuntu-equip">ubuntu-equip</a>, dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH &amp; Vagrant]]></title>
    <link href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/"/>
    <updated>2013-10-16T15:55:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant</id>
    <content type="html"><![CDATA[<p><a href="http://www.vagrantup.com/">Vagrant</a> is a handy tool for creating VMs. It&#8217;s a lot like firing up an <a href="http://thediscoblog.com/blog/categories/aws/">EC2</a> instance, but in Vagrant&#8217;s case, everything is localized. And best of all, it&#8217;s free.</p>

<p>I tend to favor <a href="https://github.com/aglover/ubuntu-equip">Ubuntu</a> as my preferred flavor of linux; consequently, all production EC2 instances use a customized Ubuntu AMI. Testing various aspects of this system with various software libraries, however, is initially tested locally using Vagrant VMs. What&#8217;s more, you can install localized VMs of <a href="http://www.vagrantbox.es/">other operating systems</a> ranging from Debian to OpenSuse to <a href="https://devcenter.heroku.com/articles/stack">Heroku&#8217;s Cedalon</a>.</p>

<!-- more -->


<p>Firing up a local instance of <a href="http://thediscoblog.com/blog/categories/heroku/">Heroku</a>&#8217;s Cedalon (which is a version of Ubuntu 10.04 with Ruby and Node.js installed) is as easy as typing:</p>

<figure class='code'><figcaption><span>Firing up Heroku&#8217;s Cedalon locally</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant init heroku http://dl.dropbox.com/u/1906634/heroku.box
</span><span class='line'>vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>Then you can SSH to that running VM like so:</p>

<figure class='code'><figcaption><span>SSHing to a local VM</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant ssh
</span></code></pre></td></tr></table></div></figure>


<p>The command <code>vagrant ssh</code> can be problematic, though, especially if you are automating some aspect of SSH &#8211; for example, you are using some library on top of SSH. In that case, you need to use SSH <em>directly</em> rather than through Vagrant.</p>

<p>Luckily, you can SSH normally to local Vagrant instances easily enough. You&#8217;ll need to tell SSH which key to use (Vagrant creates one for you), which user to connect as (usually vagrant), and what port to connect to (usually 2222).  All of this information can be found via the command <code>vagrant ssh-config</code>.</p>

<p>To use plain Jane SSH when working with Vagrant instances, you&#8217;ll first need to execute this command:</p>

<figure class='code'><figcaption><span>Printing out the location of Vagrant&#8217;s key</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant ssh-config | grep IdentityFile  | awk <span class="s1">&#39;{print $2}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <a href="https://groups.google.com/forum/#!topic/vagrant-up/B5WIfDcIRtE">3 pronged command</a> ultimately tells you where Vagrant has created a key file. The command <a href="http://www.thegeekstuff.com/2010/01/awk-introduction-tutorial-7-awk-print-examples/"><code>awk '{print $2}'</code></a> prints the second column of the line in the <code>ssh-config</code> string that starts with <code>IdentityFile</code> (which points to its location).</p>

<p>Now that you know where the key file is, you can ssh (assuming the default port hasn&#8217;t changed from 2222 &#8211; double check your <code>ssh-config</code> to make sure) like so:</p>

<figure class='code'><figcaption><span>Using normal SSH</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -i /some/dir/.vagrant.d/insecure_private_key -l vagrant -p 2222 127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>If you happen to fire up different VMs &#8211; for example, I have both Heroku Cedalon and normal Ubuntu instances, SSH will probably complain that the remote host identification has changed. This is a valid warning as the RSA fingerprint associated with the local host has indeed changed.</p>

<p>You can suggest that <a href="http://linuxcommando.blogspot.com/2008/10/how-to-disable-ssh-host-key-checking.html">SSH ignore this warning</a> by adding two additional flags. I highly recommend you only do this via the command line and <em>not with some SSH config file</em> as the warning SSH throws is completely legitimate and could be saving you from a man-in-the-middle attack.</p>

<p>Nevertheless, if you are working with localized VMs and need to bypass that warning, use these two flags:</p>

<figure class='code'><figcaption><span>Two additional flags to SSH</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-o <span class="nv">UserKnownHostsFile</span><span class="o">=</span>/dev/null -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no
</span></code></pre></td></tr></table></div></figure>


<p>Consequently, when I SSH to a local Vagrant instance, I type something along the lines of:</p>

<figure class='code'><figcaption><span>SSHing to Vagrant instances</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -i /some/dir/.vagrant.d/insecure_private_key -l vagrant -p 2222 -o <span class="nv">UserKnownHostsFile</span><span class="o">=</span>/dev/null -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no 127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>Finally, to shut down a Vagrant instance, just issue the command:</p>

<figure class='code'><figcaption><span>SSHing to Vagrant instances</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant destroy
</span></code></pre></td></tr></table></div></figure>


<p>Vagrant makes it super easy to fire up localized development environments &#8211; Vagrant instances boot up faster than EC2 instances and they&#8217;re free. And now you know how to use normal SSH to connect to them. Can you dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS EBS in 4 steps]]></title>
    <link href="http://thediscoblog.com/blog/2013/10/12/aws-ebs-in-4-steps/"/>
    <updated>2013-10-12T17:47:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/10/12/aws-ebs-in-4-steps</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/4fingers.jpg">When you fire up an AWS AMI, you are given a small partition of disk space that survives reboots. For example, the base <a href="https://github.com/aglover/ubuntu-equip">Ubuntu AMI</a> I tend to favor comes with an 8GB primary partition; however, 8GB is often not enough, especially if you&#8217;re running a database or something that requires a lot of disk space.</p>

<p>If you poke around on an AMI instance, you&#8217;ll notice some AMI instances will have additional partitions and in many cases, these partitions will be huge; nevertheless, they&#8217;re transient and any data on those disks will disappear after a reboot.</p>

<p>Accordingly, if you need to gain some more permanent space on an AMI instance, you&#8217;ll need to leverage an <a href="http://aws.amazon.com/ebs/">Elastic Block Store (or EBS)</a>, which is basically a permanent hard disk that you can attach to a running AMI instance. The data on an EBS will survive a reboot.</p>

<!-- more -->


<p>Attaching an <a href="http://aws.amazon.com/articles/1667">EBS is super simple</a> and can be done in 4 steps. These steps assume you&#8217;ve got a running AMI; accordingly, if you don&#8217;t have one up and running, go ahead and do that first. Finally, these instructions are for Linix/Unix systems.</p>

<p>First, you&#8217;ll need to create an EBS volume in the same zone as the AMI instance. In my case, the instance I&#8217;d like to augment with a beefy hard drive resides in us-east-1b. What&#8217;s more, you&#8217;ll need to configure how much space you&#8217;ll want &#8211; you can also select if you&#8217;d like to have <a href="http://aws.amazon.com/about-aws/whats-new/2012/07/31/announcing-provisioned-iops-for-amazon-ebs/">provisioned IOPS</a> &#8211; this is a high performance I/O feature of AWS and is intended for databases.</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/ebs1.png"></p>

<p>Once the EBS is created, you&#8217;ll need to <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">attach it</a> to your running AMI &#8211; you can do this by right clicking on the EBS in the AWS Management Console and selecting Attach Volume. You&#8217;ll need to pick your instance from a drop down. Once you&#8217;ve picked your instance, AWS will suggest a Device &#8211; I suggest you keep it. Click the &#8220;Yes, Attach&#8221; button.</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/ebs2.png"></p>

<p>SSH onto your running instance and take a peek at the <code>/proc/partitions</code> file &#8211; you should see at least 2 partitions with your newly attached one on the bottom.  The blocks are listed in kilobytes and pay special attention to the name &#8211; you&#8217;ll need it for the next few steps.</p>

<figure class='code'><figcaption><span>The contents of /proc/partitions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ip-10-194-97-73:~<span class="nv">$ </span>cat /proc/partitions
</span><span class='line'>major minor  <span class="c">#blocks  name</span>
</span><span class='line'>
</span><span class='line'> 202        1    8388608 xvda1
</span><span class='line'> 202       80    8388608 xvdf
</span></code></pre></td></tr></table></div></figure>


<p>As you can see above, there is an 8GB EBS volume named <code>xvdf</code> in the <code>partitions</code> file.</p>

<p>Next, you&#8217;ll want to format the volume &#8211; I&#8217;m going to format the EBS volume as ext4. The command to do this is:</p>

<figure class='code'><figcaption><span>Foratting an EBS volume</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mke2fs -F -t ext4 /dev/xvdf
</span></code></pre></td></tr></table></div></figure>


<p>Now that the volume is formatted, I can mount it &#8211; I&#8217;m going to mount it to a directory called <code>/ebs</code>; accordingly, I need to create the <code>/ebs</code> directory and then mount the <code>xvdf</code> device like so:</p>

<figure class='code'><figcaption><span>Creating and mounting the device to the ebs directory</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /ebs
</span><span class='line'>sudo mount /dev/xvdf /ebs
</span></code></pre></td></tr></table></div></figure>


<p>At this point, you are 98% done; however, the volume will not be reattached if this instance is rebooted.</p>

<p>To make this EBS volume automatically reattach after a reboot, you&#8217;ll need to add it to the <code>fstab</code> file (it&#8217;s in the <code>/etc</code> directory). When you edit that file, the file system will be
what ever you mounted (i.e <code>/dev/xvdf</code>), the mount point will be the directory you mounted it to &#8211; in my case, it&#8217;s <code>/ebs</code>. The type will be ext4 (if you formatted it that way) and for options, put default. The last two values can be 0 as well.</p>

<p>If you need to remove your EBS volume, on the attached instance, run</p>

<figure class='code'><figcaption><span>Unmounting a device</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo umount -d /dev/xvdf
</span></code></pre></td></tr></table></div></figure>


<p>And then go into the AWS Management Console, find your EBS volume, right click on it and select detach volume.</p>

<p>That&#8217;s it &#8211; you&#8217;re done! You&#8217;ve got a permanent store. In 4 steps, you&#8217;ve created an EBS volume, attached it to a running AMI, formatted and mounted it. And you&#8217;ve made it attach automatically after a reboot.  Can you dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All other metrics are useless]]></title>
    <link href="http://thediscoblog.com/blog/2013/10/09/all-other-metrics-are-useless/"/>
    <updated>2013-10-09T18:04:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/10/09/all-other-metrics-are-useless</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/time1.jpg">When it comes to queues, whether they&#8217;re implemented as <a href="http://en.wikipedia.org/wiki/Java_Message_Service">JMS</a>, database tables (i.e. what Ruby&#8217;s <a href="http://thediscoblog.com/blog/2013/06/10/backgrounding-tasks-in-heroku-with-delayed-job/">Delayed::Job</a> uses for a queue), or even <a href="http://aws.amazon.com/sqs/">Amazon&#8217;s SQS</a>, the most common metric used to evaluate the state of a queue is its length. In essence, one derives an efficiency metric based upon how many messages are residing in a queue at any given time. If there are just a few messages, the queue is operating efficiently. If there are numerous messages, things are inefficient and alarms must be sounded.</p>

<!-- more -->


<p>But what if you&#8217;re in a consistently busy environment with extreme bursts where queues have the tendency to rapidly fill up? If you have sufficient workers <em>already running</em> to handle that burst, do you need to fire up more?</p>

<p>You can fire up more workers, but doing so might cost you. That is, you might have to provision new worker instances, such as <a href="https://devcenter.heroku.com/articles/dynos">Heroku worker dynos</a> or AWS AMIs, which will end up costing you tangible money. And sometimes those worker instances take a few moments to fire up and when they&#8217;re operational, the burst of activity is over and the queue is back to normal &#8211; the initially available workers handled the load adequately.</p>

<p>It turns out that the queue&#8217;s length was a lagging indicator. You spun up unneeded resources. False alarm!</p>

<p>If you already have sufficient capacity to handle the influx of messages on a queue, then monitoring a queue&#8217;s length isn&#8217;t too helpful. In fact, it&#8217;s a misleading metric and can cause you to take unneeded actions.</p>

<p>Consequently, a queue&#8217;s length <em>is not indicative of a system&#8217;s efficiency</em> when there&#8217;s already sufficient workers present. Rather, the metric that means something in a high capacity environment is <em>how long a message resides in a queue</em>. That is an actionable metric: if messages are stuck in a queue waiting to be processed then you need more processors!</p>

<h2>Moo over queue length and let queue wait time in</h2>

<p>By default, <a href="http://www.ibm.com/developerworks/library/j-javadev2-17/">Amazon&#8217;s SQS</a> doesn&#8217;t provide the ability to query how long a message has been residing in a queue. Therefore, <a href="https://github.com/aglover/moo">I wrote Moo</a>.</p>

<p>Moo provides an interface for clients to obtain and take action on the message time in queue metric. This is done by augmenting an SQS message with a time stamp. That time stamp is then checked when a message is popped off of an SQS queue. If a threshold difference is exceed, then a callback is invoked.</p>

<p>Users of Moo will find its usage similar to <a href="https://github.com/aglover/ahoy">Ahoy!</a>, which is an asynchronous callback oriented facade on top of <a href="http://aws.amazon.com/sdkforjava/">AWS&#8217;s Java SDK</a>. In fact, Moo uses Ahoy! underneath, with the added feature of attaching a &#8220;maximum time in queue&#8221; asynchronous callback.</p>

<p>Moo supports multiple time in queue thresholds and setting a maximum time in queue threshold is done like so:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//adds a 1 second max threshold</span>
</span><span class='line'><span class="n">sqs</span><span class="o">.</span><span class="na">addQueueWaitTimeCallback</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="k">new</span> <span class="n">QueueWaitTimeCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onThresholdExceeded</span><span class="o">(</span><span class="kt">long</span> <span class="n">waitTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//waitTime is the actual time in queue</span>
</span><span class='line'>    <span class="c1">//do something... like fire off a web hook, etc</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>addQueueWaitTimeCallback</code> method takes a millisecond maximum time in queue value and an accompanying <code>QueueWaitTimeCallback</code> callback implementation. The <code>onThresholdExceeded</code> method will be invoked asynchronously during a message receive if the maximum threshold value is exceeded; what&#8217;s more, the <code>onThresholdExceeded</code> will receive as a parameter the actual queue wait time.</p>

<h4>Show me the Moo</h4>

<p>To fire up an instance of Moo, you have a number of options, including configuring an instance of AWS&#8217;s <code>AmazonSQS</code> or just passing along a key, secret, and queue name like so:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SQS</span> <span class="n">sqs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SQS</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">),</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;secret&quot;</span><span class="o">),</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;queue&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Next, you can attach zero to many <code>QueueWaitTimeCallback</code> instances like so:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sqs</span><span class="o">.</span><span class="na">addQueueWaitTimeCallback</span><span class="o">(</span><span class="mi">600000</span><span class="o">,</span> <span class="k">new</span> <span class="n">QueueWaitTimeCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onThresholdExceeded</span><span class="o">(</span><span class="kt">long</span> <span class="n">actualWaitTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//do something -- fire off SNS message?</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, I&#8217;ve added a callback to be invoked if messages are in a queue longer than 10 minutes. Note, these <code>QueueWaitTimeCallback</code> callbacks are fired by the <em>queue reader</em> instance; accordingly, a <code>QueueWaitTimeCallback</code> can certainly fire up more instances of itself, for example.</p>

<p>Here&#8217;s a sample JSON document that you might want to throw onto an SQS queue:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span> <span class="s">&quot;employees&quot;</span><span class="o">:[</span>
</span><span class='line'>      <span class="o">{</span> <span class="s">&quot;firstName&quot;</span><span class="o">:</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;lastName&quot;</span><span class="o">:</span><span class="s">&quot;Doe&quot;</span> <span class="o">},</span>
</span><span class='line'>      <span class="o">{</span> <span class="s">&quot;firstName&quot;</span><span class="o">:</span><span class="s">&quot;Anna&quot;</span><span class="o">,</span> <span class="s">&quot;lastName&quot;</span><span class="o">:</span><span class="s">&quot;Smith&quot;</span> <span class="o">},</span>
</span><span class='line'>      <span class="o">{</span> <span class="s">&quot;firstName&quot;</span><span class="o">:</span><span class="s">&quot;Peter&quot;</span><span class="o">,</span> <span class="s">&quot;lastName&quot;</span><span class="o">:</span><span class="s">&quot;Jones&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sending and receiving this message are exactly like you&#8217;d do if you were using Ahoy!. For example, to send a message, just pass along a <code>String</code> to the <code>send</code> method:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sqs</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="k">new</span> <span class="n">SendCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSend</span><span class="o">(</span><span class="n">String</span> <span class="n">messageId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//messageId is from SQS</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, the <code>send</code> method takes an optional <code>SendCallback</code>.</p>

<p>Receiving a message is via the <code>receive</code> method, which takes a mandatory <code>ReceiveCallback</code> &#8211; this callback will be invoked asynchronously <em>for each</em> message received off of a queue. Each instance will receive the message placed upon the queue and the message&#8217;s SQS id.</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sqs</span><span class="o">.</span><span class="na">receive</span><span class="o">(</span><span class="k">new</span> <span class="n">ReceiveCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">String</span> <span class="n">messageId</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//do something w/the message -- in this case it&#39;s JSON</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, if upon the receive of a message, Moo notices that a message has been waiting in a queue for more than the max queue wait time threshold configured for an associated <code>QueueWaitTimeCallback</code>, Moo will invoke it. Note, Moo can invoke more than one instance; thus, you can set up a chain to take various actions as times increase.</p>

<p>Remember, a queue&#8217;s length is usually a lagging indicator.  The metric that actually means something is how long a message resides in a queue. That&#8217;s an actionable metric and <a href="https://github.com/aglover/moo">Moo</a> gives you the ability to do something about it! Can you dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The significance of HTML5]]></title>
    <link href="http://thediscoblog.com/blog/2013/10/05/the-significance-of-html5/"/>
    <updated>2013-10-05T21:18:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/10/05/the-significance-of-html5</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/no-flash.jpg"><a href="http://thediscoblog.com/blog/categories/html5/">HTML5</a> is important for three reasons. And its importance starts with the end of browser plugins. That&#8217;s right. With HTML5, rich media aspects that were formally handled by plugins (think Flash), are now built-in. That&#8217;s why there are <a href="http://www.w3schools.com/html/html5_new_elements.asp">new media tags</a> like <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code>.</p>

<p>Think about it for a second &#8211; when&#8217;s the last time you visited a site on your tablet that asked you to install a plugin? Never.</p>

<p>That&#8217;s also why some older plugin laden sites do not work on your mobile device. Remember the whole &#8221;<a href="http://www.apple.com/hotnews/thoughts-on-flash/">Steve Jobs no flash</a>&#8221; kerfuffle years ago? Yep, Mr. Jobs was adamant that the iPhone would support HTML5 and not fall into the plugin trap. Incidentally, Google and other major vendors have since followed suit. <a href="http://en.wikipedia.org/wiki/HTML5">HTML5 has the support of all major browser vendors now</a> &#8211; Apple, Google, Firefox, Opera, and yes, even Microsoft.</p>

<!-- more -->


<p></p>

<p><img class="left" src="http://thediscoblog.com/images/mine/alotofdevices.jpg">HTML5 is important because now that <a href="http://thediscoblog.com/blog/2012/12/02/comprehending-the-mobile-development-landscape/">all major vendors support it</a> &#8211; including those in the mobile space &#8211; you get a universal experience across a wide spectrum of devices. While particular features of HTML5 might <a href="http://thediscoblog.com/blog/2012/09/24/a-tale-of-three-browsers/">vary by device platform</a>, there are enough common ground features to build a compelling web app that looks and feels similar across the gamut of devices.</p>

<p>And as HTML5 <a href="http://thediscoblog.com/blog/2013/04/05/crowd-think-often-lacks-clarity/">continues to evolve</a>, the differences between various implementations should narrow. Accordingly, with HTML5, you get device ubiquity. You get a chance to build something once and have it work across a wide spectrum of browsers.</p>

<p>What&#8217;s more, while the mobile market is still dominated by Apple and Google, as other players, <a href="http://thediscoblog.com/blog/2013/09/09/8-percent-is-itty-bitty-but-it-matters/">like Microsoft</a>, begin to establish a beachhead, app developers will have to contend with more than two platforms. For a variety of apps, like those being built for the enterprise, the promise of HTML5&#8217;s device ubiquity starts to become quite appealing &#8211; after all, building an app once, as <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">opposed to three or more times</a>, is less expensive.</p>

<p><img class="right" src="http://thediscoblog.com/images/mine/amazonappstore.jpg">Finally, HTML5 is important because <a href="http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters/">Amazon recently announced support for HTML5</a> apps in their App Store for Android. Previous to this announcement, pure HTML5 apps had no real mass distribution model. HTML5 app developers relied on a search engine, while native app developers have a direct channel to consumers that cuts through a lot of noise and makes it easy to find specific apps.</p>

<p>Consequently, a lot of HTML5 apps ended up being <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">wrapped in native code</a> so as to get a chance to compete in the app stores. Amazon&#8217;s support of HTML5 is a much needed <a href="http://thediscoblog.com/blog/2013/03/04/its-a-question-of-wow/">shot-in-the-arm for HTML5</a> because it means a direct channel to mass consumers; what&#8217;s more, Amazon also is offering a chance to monetize HTML5 apps <a href="https://developer.amazon.com/sdk/webapps/iap/understanding.html">via a JavaScript In-App purchase API</a>. While Amazon isn&#8217;t the first In-App purchase API for HTML5, it&#8217;s the first one linked to a major e-commerce platform and mass consumer channel.</p>

<p>HTML5 is by no means a silver bullet for mobile app development. There&#8217;s a time and a place for HTML5 apps, just as there&#8217;s still a need to create native apps. Nevertheless, HTML5 continues to gain favor as app stores (like Amazon&#8217;s App store for Android) begin to distribute HTML5 apps and other platforms begin to capture market share.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ahoy there callbacks!]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/29/ahoy-there-callbacks/"/>
    <updated>2013-09-29T16:30:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/29/ahoy-there-callbacks</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/callback.jpg">Because it&#8217;s my bag, I like <a href="http://thediscoblog.com/blog/categories/javascript/">JavaScript</a>. In fact, I&#8217;ve grown to love JavaScritp&#8217;s asynchronous <a href="http://en.wikipedia.org/wiki/Callback_(computer_programming">callback oriented style of programming</a>. Consequently, when I find myself in a non-JavaScript environment, say, like <a href="http://thediscoblog.com/blog/categories/java/">Java</a>, I tend to miss using callbacks.</p>

<p>The good news is that you can <em>emulate</em> asynchronous callbacks in Java. In fact, I did just that recently with a library I&#8217;ve dubbed <a href="https://github.com/aglover/ahoy">Ahoy!</a>, which is an asynchronous <a href="http://www.ibm.com/developerworks/library/j-javadev2-17/">SQS adapter</a> for AWS&#8217;s Java <a href="http://aws.amazon.com/sqs/">SQS</a> library.</p>

<!-- more -->


<p>For the uninitiated, <a href="http://www.ibm.com/developerworks/library/j-javadev2-17/">SQS is a cloud based messaging platform</a> &#8211; with SQS you can create queues and put messages onto those queues, which can then be read &#8211; later or immediately by some other process or the same exact process. All of this leverages Amazon’s massively redundant architecture to offer extremely high availability in the face of concurrent access.</p>

<p>Asynchronous callbacks in Java can be achieved with two features: anonymous classes (containing one method) and Java&#8217;s <code>java.util.concurrent</code> package.</p>

<p>Because Java doesn&#8217;t allow you to pass functions (or methods) <em>easily</em> as a parameter, to simulate a callback, you can create an interface that contains one method, which basically mimics a function. In the case of Ahoy, there are two interfaces: <code>MessageSendCallback</code> and <code>MessageReceivedCallback</code> &#8211; both have one method: <code>onSend</code> and <code>onReceive</code> respectively. Accordingly, Ahoy!&#8221;s primary class, dubbed <code>SQSAdapter</code> exposes two simple methods: <code>send</code> and <code>receive</code> and both take their related callback interface.</p>

<p>The most straightforward callback to understand is the <code>receive</code> method. As you can imagine, <code>receive</code> is intended to handle behavior when a message is received off of a particular queue. Thus, the <code>receive</code> method is defined as follows:</p>

<figure class='code'><figcaption><span>SQSAdapter&#8217;s receive method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">receive</span><span class="o">(</span><span class="kd">final</span> <span class="n">MessageReceivedCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>MessageReceivedCallback</code> interface looks like this:</p>

<figure class='code'><figcaption><span>The MessageReceivedCallback interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MessageReceivedCallback</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">String</span> <span class="n">messageId</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, the <code>onReceive</code> method takes a message id (which is particular to SQS) and the message itself &#8211; which in the case of SQS is always a <code>String</code> (that <code>String</code> can hold anything you want, keep in mind: JSON, XML, byte sequence, etc).</p>

<p>Thus, clients of Ahoy! provide the intended behavior for a message when it is received. This behavior could be to write something to a database, generate another message and send it on another queue, you name it.</p>

<p>Now the interesting part is the implementation of Ahoy!&#8217;s <code>receive</code> method. To achieve asynchronocity, I employed Java&#8217;s <code>java.util.concurrent</code> package, which sadly, seems to be under appreciated.</p>

<figure class='code'><figcaption><span>The receive method&#8217;s implementation with callback being invoked</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">receive</span><span class="o">(</span><span class="kd">final</span> <span class="n">AmazonSQS</span> <span class="n">sqs</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">queueURL</span><span class="o">,</span> <span class="kd">final</span> <span class="n">MessageReceivedCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">sqs</span><span class="o">.</span><span class="na">receiveMessage</span><span class="o">(</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">ReceiveMessageRequest</span><span class="o">(</span><span class="n">queueURL</span><span class="o">).</span><span class="na">withMaxNumberOfMessages</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">withWaitTimeSeconds</span><span class="o">(</span><span class="mi">20</span><span class="o">)).</span><span class="na">getMessages</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">messages</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Message</span> <span class="n">message</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">callback</span><span class="o">.</span><span class="na">onReceive</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">getMessageId</span><span class="o">(),</span> <span class="n">message</span><span class="o">.</span><span class="na">getBody</span><span class="o">());</span>
</span><span class='line'>            <span class="n">sqs</span><span class="o">.</span><span class="na">deleteMessage</span><span class="o">(</span><span class="k">new</span> <span class="n">DeleteMessageRequest</span><span class="o">(</span><span class="n">queueURL</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">getReceiptHandle</span><span class="o">()));</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a fixed Thread pool, a thread is created, which waits for messages to arrive on a particular queue; when one shows up, the passed in <code>MessageReceivedCalledback</code> is invoked for each message.</p>

<p>For an example of how this works for clients of Ahoy!, here&#8217;s a test case that verifies the execution of the callback:</p>

<figure class='code'><figcaption><span>The receive method implemented</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">wasReceived</span> <span class="o">=</span> <span class="o">{</span><span class="kc">false</span><span class="o">};</span>
</span><span class='line'><span class="n">ahoy</span><span class="o">.</span><span class="na">receive</span><span class="o">(</span><span class="k">new</span> <span class="n">MessageReceivedCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">String</span> <span class="n">messageId</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">wasReceived</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="s">&quot;message id was null&quot;</span><span class="o">,</span> <span class="n">messageId</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;message wasn&#39;t &quot;</span> <span class="o">+</span> <span class="n">origMessage</span><span class="o">,</span> <span class="n">origMessage</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Likewise, sending a message is similar &#8211; a new <code>Runnable</code> instance is created, which sends a particular message and invokes the passed in <code>MessageSentCallback</code>&#8217;s <code>onSend</code> method, passing in the newly sent messages&#8217;s id.</p>

<figure class='code'><figcaption><span>The send method is also asynchronous</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="kd">final</span> <span class="n">AmazonSQS</span> <span class="n">sqs</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">queueURL</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">message</span><span class="o">,</span> <span class="kd">final</span> <span class="n">MessageSentCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SendMessageResult</span> <span class="n">res</span> <span class="o">=</span> <span class="n">sqs</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="k">new</span> <span class="n">SendMessageRequest</span><span class="o">(</span><span class="n">queueURL</span><span class="o">,</span> <span class="n">message</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">callback</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">callback</span><span class="o">.</span><span class="na">onSend</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="na">getMessageId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Incidentally, the AWS Java SDK <em>does provide an asynchronous client</em>; however, this client&#8217;s implementation leverages Java&#8217;s <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html">Futures</a>. While <a href="http://nurkiewicz.blogspot.com/2013/02/javautilconcurrentfuture-basics.html">Futures are a neat concept</a>, Ahoy!&#8217;s implementation is more convenient (<em>at least for me and in the patterns of how I employ SQS</em>) than Futures as there isn&#8217;t any polling involved once a message is sent or received.</p>

<p>While callbacks aren&#8217;t <a href="http://en.wikipedia.org/wiki/Function_object#In_Java">necessarily supported</a> natively in Java, you can emulate them quite nicely and achieve the same level of code conciseness as what&#8217;s common in JavaScript. And if you need a handy way to interface with AWS SQS, <a href="https://github.com/aglover/ahoy">then give Ahoy! a try</a>! Can you dig it, man?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App signing: iOS versus Android]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/26/app-signing-ios-versus-android/"/>
    <updated>2013-09-26T10:16:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/26/app-signing-ios-versus-android</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/sealed.jpg">Apple&#8217;s app signing process can be a real pain-in-the-neck; nevertheless, it works to keep apps trusted. You know when you download a Bank of America app from iTunes that it&#8217;s the real thing. You know that the app comes from <em>the</em> Bank of America.</p>

<p>On the other hand, Android allows apps to be self-signed. This has a fundamental flaw: an Android developer can claim to be anyone they want, <em>including Bank of America</em>. Thus, when you download an app from an Android App store, there&#8217;s a real possibility that the app was submitted by a charlatan. What&#8217;s more, those charlatan apps can actually be malicious!</p>

<!-- more -->


<p><a href="http://twitter.com/danieleran">Daniel Eran Dilger</a> has written an excellent article that features the differences between Apple&#8217;s signing process and Google&#8217;s. I highly recommend you read his article entitled &#8221;<a href="http://appleinsider.com/articles/13/07/14/editorial-googles-android-haunted-by-steve-jobs-warnings-on-app-signing-security">Google&#8217;s Android haunted by Steve Jobs&#8217; warnings on app signing security</a>&#8221; as it sheds a bright light on the differences between the two mobile platforms; moreover, the article does a great job of outlining the evolution of iOS and its app security policies.</p>

<p>And while you are at it, check out my article entitled &#8221;<a href="http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html">Mobile for the masses: Sign, seal, and deliver your Android app</a>&#8221; and learn how to sign your Android app in preparation for submitting it to an app store!</p>
]]></content>
  </entry>
  
</feed>
