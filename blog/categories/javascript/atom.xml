<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | The Disco Blog]]></title>
  <link href="http://aglover.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://aglover.github.com/"/>
  <updated>2013-06-07T20:12:52-04:00</updated>
  <id>http://aglover.github.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Callbacks in Appcelerator Titanium modules]]></title>
    <link href="http://aglover.github.com/blog/2013/05/29/callbacks-in-appcelerator-titanium-modules/"/>
    <updated>2013-05-29T13:42:00-04:00</updated>
    <id>http://aglover.github.com/blog/2013/05/29/callbacks-in-appcelerator-titanium-modules</id>
    <content type="html"><![CDATA[<p>{% img right /images/mine/appc_stacked.png %}I recently found myself implementing both an Android and iOS <a href="http://www.appcelerator.com/">Appcelerator</a> module for <a href="http://www.app47.com/">App47</a>'s <a href="https://github.com/App47/appcelerator-modules">respective Agent libraries</a>. Like <a href="https://github.com/App47/phonegap-plugins">PhoneGap plugins</a>, <a href="https://wiki.appcelerator.org/display/tis/Using+Titanium+Modules">Appcelerator modules</a> are a way to bridge an Appcelerator app with native code running on a device; in this case, the native code happens to be App47's <a href="http://app47.com/wiki/doku.php?id=configure:androidapp">Android</a> and <a href="http://app47.com/wiki/doku.php?id=configure:iosapp">IOS</a> Agents, which capture <a href="http://www.app47.com/features/">usage analytics</a> and facilitate a few security features. Naturally, these Agent libraries are  coded in Java and Objective-C.</p>

<p>In the end, what I wanted to implement was a <a href="http://recurial.com/programming/understanding-callback-functions-in-javascript/">JavaScript-ish callback</a> associated with a native App47 Agent call. Alas, it took me a lot of digging to achieve this goal.</p>

<!-- more -->


<p>For example, for a timed event (which, as you've probably guessed, captures how long an event took), rather than the more traditional call which is inline:</p>

<p><code>javascript Straightforward method invocation
var id = agent.startTimedEvent("openCrust 2.0.27");
openCrust({});
agent.endTimedEvent(id);
</code></p>

<p>I wanted a more JavaScript friendly call that wraps the timed code like so:</p>

<p><code>javascript Callback invocation
agent.timedEvent("openCrust 2.0.27", function() {
  openCrust({});
});
</code></p>

<p>This has the benefit of wrapping a desired event -- there is no explicit need for anyone to code the ending -- it is automatically done via the <code>timedEvent</code> call after invoking the passed in function.</p>

<p>The Titanium module documentation is a bit hard to find (that is, finding up-to-date valid documentation is challenging); your best bet to see how to do something interesting is to look at the <a href="https://github.com/appcelerator/titanium_mobile/tree/master/android/modules">various code</a> repositories <a href="https://github.com/appcelerator/titanium_modules">on Github</a> followed by studying the API docs (i.e. JavaDocs and <a href="https://github.com/appcelerator/titanium_mobile/blob/master/iphone/Classes/KrollCallback.m">.h/.m files for iOS</a>).</p>

<p>It turns out, invoking a JavaScript callback in either Android or iOS is fairly straightforward. In the case of Android, you need to use the <code>KrollFunction</code> type like so:</p>

<p><code>java Wrapped Timed Event
@Kroll.method
public void timedEvent(String name, KrollFunction callback) {
  String id = EmbeddedAgent.startTimedEvent(name);
  callback.call(getKrollObject(), new HashMap&lt;String, String&gt;());
  EmbeddedAgent.endTimedEvent(id);
}
</code></p>

<p>As you can see in the above code, I'm not doing anything special like passing in any arguments to the <code>KrollFunction</code> instance. If you want to do that, say in the case of passing in some special value that the corresponding callback will use, then you can either pass in a <code>Map</code> or an <code>Object[]</code>.</p>

<p>For example, you can implement this style of callback where a custom value is passed in for a timed event like so:</p>

<p><code>java Callback with Java
@Kroll.method
public void startTimedEvent(String name, KrollFunction callback) {
  String id = EmbeddedAgent.startTimedEvent(name);
  HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
  map.put("id", id);
  callback.call(getKrollObject(), map);
}
</code></p>

<p>This results in a JavaScript call like so:</p>

<p><code>javascript Using a callback but not wrapping the event
agent.startTimedEvent("openCrust 2.0.27", function(result) {
  var id = result['id'];
  openCrust({});
  agent.endTimedEvent(id);
});
</code></p>

<p>In iOS land, invoking a callback is a bit different, but certainly as easy. The same <code>timedEvent</code> JavaScript method that takes a callback to be wrapped by the timed event can be implemented as follows:</p>

<p>``` objective-c Wrapped event by callback
- (void)timedEvent:(id)args
{
  NSString<em> eventName = [args objectAtIndex:0];
  NSString</em> eventID = [EmbeddedAgent startTimedEvent:eventName];</p>

<p>  KrollCallback* callback = [args objectAtIndex:1];
  if(callback){</p>

<pre><code>[callback call:nil thisObject:nil];
</code></pre>

<p>  }</p>

<p>  [EmbeddedAgent endTimedEvent:eventID];
}
```</p>

<p>In this case, I'm using the <code>KrollCallback</code> type, which appears to be analogous to Appcelerator's Android <code>KrollFunction</code>.</p>

<p>If you need to pass values to a corresponding JavaScript function, they need to be in <code>NSArray</code> form, thus, you can do something like this to pass in parameters to the underlying JavaScript function:</p>

<p>``` objective-c With callback parameter
- (void)startTimedEvent:(id)args
{
  NSString<em> eventName = [args objectAtIndex:0];
  NSString</em> eventID = [EmbeddedAgent startTimedEvent:eventName];</p>

<p>  KrollCallback* callback = [args objectAtIndex:1];
  if(callback){</p>

<pre><code>NSDictionary* dict = [[[NSDictionary alloc] initWithObjectsAndKeys:@"id", eventID, nil] autorelease];
NSArray* array = [NSArray arrayWithObjects: dict, nil];
[callback call:array thisObject:nil];
</code></pre>

<p>  }
}
```</p>

<p>As you can see in the above code, a callback instance takes as a parameter an <code>NSArray</code>, thus, I have to covert my <code>NSDictionary</code> into an array via Objective-C's handy <code>arrayWithObjects</code> function.</p>

<p>The default module examples <a href="http://docs.appcelerator.com/titanium/latest/#!/guide/Titanium_Mobile_Module_API">provided by Appcelerator naturally work</a>, but alas, the non-callback style of invocation was less than appealing, especially if you are going to be coding an <a href="http://en.wikipedia.org/wiki/Appcelerator_Titanium">Appcelerator</a> app in JavaScript. Nevertheless, you can do it easily enough provided you are willing to dig through myriad repositories...or you could save yourself the headache and read this blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome's console commands]]></title>
    <link href="http://aglover.github.com/blog/2013/04/15/chromes-console-commands/"/>
    <updated>2013-04-15T10:05:00-04:00</updated>
    <id>http://aglover.github.com/blog/2013/04/15/chromes-console-commands</id>
    <content type="html"><![CDATA[<p>As if the JavaScript console in Chrome couldn't be any more awesome. Check it out: <a href="https://developers.google.com/chrome-developer-tools/docs/commandline-api">Command Line API Reference</a>. Yep, it's legit. I've been using Firebug and the like for years and only just ran across this feature of Chrome's JavaScript console.</p>

<p>{% img center /images/mine/jschrome.png %}</p>

<p>My favorite: <code>getEventListeners</code>. Understanding how the DOM is augmented with listeners is amazingly helpful!</p>

<p>All you have to do is fire up the JavaScript Console in Chrome and in the actual console window, you have a host a commands you can execute now just like you have in any other terminal app. Very helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js in 3 commands]]></title>
    <link href="http://aglover.github.com/blog/2013/03/12/node-in-3-commands/"/>
    <updated>2013-03-12T11:55:00-04:00</updated>
    <id>http://aglover.github.com/blog/2013/03/12/node-in-3-commands</id>
    <content type="html"><![CDATA[<p>A few <a href="http://www.javaworld.com/community/node/8140">short years ago</a> when I started to explore <a href="http://nodejs.org/">Node.js</a>, I remember the installation on my MacBook Pro required downloading the source, compiling and installing it, and then updating paths. <em>And then</em> you had to install <a href="https://npmjs.org/">NPM</a>.</p>

<p>Since then, <a href="http://www.ibm.com/developerworks/library/j-nodejs/">Node</a>'s installation has been come tremendously easy and NPM is even <em>bundled</em> with <a href="http://www.ibm.com/developerworks/offers/lp/demos/summary/j-jnodejs.html?ca=drs-">Node</a>. And yet, installing Node (and keeping up w/its rapid release schedule) is even easier with a nifty tool: <a href="https://github.com/creationix/nvm">Node Version Manager</a>.</p>

<p>With Node Version Manager (or <a href="https://twitter.com/aglover/status/105824835149627392">nvm</a>) you can be up and running with Node in 3 easy commands.</p>

<p>Step 1: Download and install nvm.</p>

<p><code>bash downloading nvm
curl https://raw.github.com/creationix/nvm/master/install.sh | sh
</code></p>

<p>Step 2: Reload your shell.</p>

<p><code>bash reloading .bash_profile
source .bash_profile
</code></p>

<p>Step 2.5: Obtain a list of available node versions to install.</p>

<p><code>bash listing available node versions
nvm ls-remote
</code></p>

<p>Step 3: Install your desired version of node.</p>

<p><code>bash installing node version 0.10.0
nvm install v0.10.0
</code></p>

<p>After that's done, execute a <code>node -v</code> to verify. Now wasn't that easy? You bet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinatra, CoffeeScript, and Haml: swinging in 4 steps]]></title>
    <link href="http://aglover.github.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps/"/>
    <updated>2012-12-10T21:49:00-05:00</updated>
    <id>http://aglover.github.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps</id>
    <content type="html"><![CDATA[<p>I recently decided to ditch plain old JavaScript in a <a href="http://www.sinatrarb.com/">Sinatra</a> based application in favor of <a href="http://coffeescript.org/">CoffeeScript</a>. The existing JavaScript wasn't terribly complex; however, I was looking at having to add some AJAX based long polling and I couldn't bring myself to do it in <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-18/index.html">JavaScript</a>. Accordingly, I decided I'd use <a href="http://www.ibm.com/developerworks/web/library/j-coffeescript/index.html">CoffeeScript</a>, but, as it turns out, there were a few steps I had to put in place before I could enjoy some significant whitespace delimitation.</p>

<p>First, I installed <a href="https://github.com/Sutto/barista">Barista</a>, which is a nifty Ruby gem that adds transparent CoffeeScript support to any Rack app. There were a few other gems available, however, I decided that Barista had the most mature documentation and the project still showed signs of life.</p>

<p>Once I added the Barista gem to my Gemfile and ran <a href="http://gembundler.com/">Bundler</a>, I next had to require Barista in my Sinatra app; moreover, I had to register the Barista extension via <code>Sinatra.register Barista::Integration::Sinatra</code>. Note, that these steps need to be done after <a href="http://haml.info/">Haml</a> is loaded.</p>

<p>In order for Barista to work properly, you'll need to have a JavaScript runtime handy -- there are a number of options here, including <a href="https://github.com/cowboyd/therubyracer">therubyracer</a>; however, after a bit of research, I found some <a href="http://stackoverflow.com/questions/6282307/execjs-and-could-not-find-a-javascript-runtime">concerning notes regarding therubyracer's memory consumption</a>. After a bit of surfing, I happened upon <a href="https://github.com/sstephenson/execjs">ExecJS</a>, which states that Node will work just fine. Yeah!</p>

<p>Accordingly, since this application runs on Ubuntu, I got to use a nifty script that I happened to have written about a year ago: <a href="https://github.com/aglover/ubuntu-equip">Ubuntu Equip</a>. In less than a minute, I had the latest and greatest version of Node running by running the command:</p>

<p><code>bash script for install Node on Ubuntu
wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_node.sh &amp;&amp; bash equip_node.sh
</code></p>

<p>Take note: this script sets a custom <a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool">apt-get</a> repository; otherwise, if you don't add this repository, you'll end up with an ancient version of Node.</p>

<p>Finally, to actually start coding in CoffeeScript, all you have to do is use Haml's handy inline <code>:coffeescript</code> filter:</p>

<p>``` javascript CoffeeScript spinner
:coffeescript
  $(document).ready -></p>

<pre><code>opts = { lines: 13, ...}
spinner = new Spinner(opts).spin(document.getElementById('spinner'))
</code></pre>

<p>```</p>

<p>That's it! The steps required to get Sinatra, CoffeeScript, and Haml playing together are:</p>

<ul>
<li>Install Barista</li>
<li>Configure Sinatra</li>
<li>Install a JavaScript runtime engine</li>
<li>Write some CoffeeScript</li>
</ul>


<p>In short, Barista and <a href="http://www.ibm.com/developerworks/java/library/j-nodejs/">Node</a> make Sinatra swing with CoffeeScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling Mongo documents with Mongoose]]></title>
    <link href="http://aglover.github.com/blog/2012/08/29/modeling-mongo-documents-with-mongoose/"/>
    <updated>2012-08-29T21:45:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/29/modeling-mongo-documents-with-mongoose</id>
    <content type="html"><![CDATA[<p>Without a doubt, one of the quickest ways to build an application that leverages <a href="http://www.mongodb.org/">MongoDB</a> is with Node. It's as if the two platforms were made for each other; the sheer number of Node libraries available for dealing with Mongo is testimony to a vibrant, innovative community. Indeed, one of my favorite Mongo focused libraries these days is <a href="http://mongoosejs.com/">Mongoose</a>.</p>

<p>Briefly, Mongoose is an object modeling framework that makes it incredibly easy to model collections and ultimately work with intuitive objects that support a rich feature set. Like most things in Node, it couldn't be any easier to get set up. Essentially, to use Mongoose, you'll need to define <code>Schema</code> objects -- these are your documents -- either top level or even embedded.</p>

<p>For example, I've defined a <code>words</code> collection that contains documents (representing...words) that each contain an embedded collection of <code>definition</code> documents. A sample document looks like this:</p>

<p>``` javascript Word Document
{<br/>
  _id: "4fd7c7ac8b5b27f21b000001",<br/>
  spelling: "drivel",
  synonyms: ["garbage", "dribble", "drool"],
  definitions: [
  { part_of_speech: "noun",</p>

<pre><code>definition:"saliva flowing from the mouth, or mucus from the nose; slaver."
</code></pre>

<p>  },
  { part_of_speech: "noun",</p>

<pre><code>definition:"childish, silly, or meaningless talk or thinking; nonsense; twaddle." 
</code></pre>

<p>  }]
}
```</p>

<p>From an document modeling standpoint, I'd like to work with a <code>Word</code> object that contains a list of <code>Definition</code> objects and a number of related attributes (i.e. synonyms, parts of speech, etc). To model this relationship with Mongoose, I'll need to define two <code>Schema</code> types and I'll start with the simplest:</p>

<p><code>javascript Definition Schema
Definition = mongoose.model 'definition', new mongoose.Schema({
  part_of_speech : { type: String, required: true, trim: true, enum: ['adjective', 'noun', 'verb', 'adverb'] },
  definition : {type: String, required: true, trim: true}
})
</code></p>

<p>As you can see, a <code>Definition</code> is simple -- the <code>part_of_speech</code> attribute is an enumerated <code>String</code> that's required; what's more, the <code>definition</code> attribute is also a required <code>String</code>.</p>

<p>Next, I'll define a <code>Word</code>:</p>

<p><code>javascript Word Schema
Word = mongoose.model 'word', new mongoose.Schema({
  spelling : {type: String, required: true, trim: true, lowercase: true, unique: true},
  definitions : [Definition.schema],
  synonyms : [{ type: String, trim: true, lowercase: true }]
})
</code></p>

<p>As you can see, a <code>Word</code> instance embeds a collection of <code>Definition</code>s. Here I'm also demonstrating the usage of <code>lowercase</code> and the index <code>unique</code> placed on the <code>spelling</code> attribute.</p>

<p>To create a <code>Word</code> instance and save the corresponding document couldn't be easier. Mongo array's leverage the <code>push</code> command and Mongoose follows this pattern to the tee.</p>

<p><code>javascript saving with Mongoose
word = new models.Word({spelling : 'loquacious'})
word.synonyms.push 'verbose'
word.definitions.push {definition: 'talking or tending to talk much or freely; talkative; \
  chattering; babbling; garrulous.', part_of_speech: 'adjective' }
word.save (err, data) -&gt;
</code></p>

<p>Finding a word is easy too:</p>

<p>``` javascript findOne in action
it 'findOne should return one', (done) ->
  models.Word.findOne spelling:'nefarious', (err, document) -></p>

<pre><code>document.spelling.should.eql 'nefarious'
document.definitions.length.should.eql 1
document.synonyms.length.should.eql 2
document.definitions[0]['part_of_speech'].should.eql 'adjective'
done(err)
</code></pre>

<p>```</p>

<p>In this case, the above code is a <a href="http://visionmedia.github.com/mocha/">Mocha</a> test case (which uses <a href="https://github.com/visionmedia/should.js">should</a> for assertions) that demonstrates Mongoose's <code>findOne</code>.</p>

<p>You can find the code for these examples and more at my Github repo dubbed <a href="https://github.com/aglover/exegesis">Exegesis</a> and while you're at it, check out the <a href="http://www.ibm.com/developerworks/training/kp/j-kp-node/index.html">developerWorks videos I did for Node</a>!</p>
]]></content>
  </entry>
  
</feed>
