<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2015-02-09T18:33:23-08:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The significance of HTML5]]></title>
    <link href="http://thediscoblog.com/blog/2013/10/05/the-significance-of-html5/"/>
    <updated>2013-10-05T21:18:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/10/05/the-significance-of-html5</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/no-flash.jpg"><a href="http://thediscoblog.com/blog/categories/html5/">HTML5</a> is important for three reasons. And its importance starts with the end of browser plugins. That's right. With HTML5, rich media aspects that were formally handled by plugins (think Flash), are now built-in. That's why there are <a href="http://www.w3schools.com/html/html5_new_elements.asp">new media tags</a> like <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code>.</p>

<p>Think about it for a second -- when's the last time you visited a site on your tablet that asked you to install a plugin? Never.</p>

<p>That's also why some older plugin laden sites do not work on your mobile device. Remember the whole "<a href="http://www.apple.com/hotnews/thoughts-on-flash/">Steve Jobs no flash</a>" kerfuffle years ago? Yep, Mr. Jobs was adamant that the iPhone would support HTML5 and not fall into the plugin trap. Incidentally, Google and other major vendors have since followed suit. <a href="http://en.wikipedia.org/wiki/HTML5">HTML5 has the support of all major browser vendors now</a> -- Apple, Google, Firefox, Opera, and yes, even Microsoft.</p>

<!-- more -->


<p></p>

<p><img class="left" src="/images/mine/alotofdevices.jpg">HTML5 is important because now that <a href="http://thediscoblog.com/blog/2012/12/02/comprehending-the-mobile-development-landscape/">all major vendors support it</a> -- including those in the mobile space -- you get a universal experience across a wide spectrum of devices. While particular features of HTML5 might <a href="http://thediscoblog.com/blog/2012/09/24/a-tale-of-three-browsers/">vary by device platform</a>, there are enough common ground features to build a compelling web app that looks and feels similar across the gamut of devices.</p>

<p>And as HTML5 <a href="http://thediscoblog.com/blog/2013/04/05/crowd-think-often-lacks-clarity/">continues to evolve</a>, the differences between various implementations should narrow. Accordingly, with HTML5, you get device ubiquity. You get a chance to build something once and have it work across a wide spectrum of browsers.</p>

<p>What's more, while the mobile market is still dominated by Apple and Google, as other players, <a href="http://thediscoblog.com/blog/2013/09/09/8-percent-is-itty-bitty-but-it-matters/">like Microsoft</a>, begin to establish a beachhead, app developers will have to contend with more than two platforms. For a variety of apps, like those being built for the enterprise, the promise of HTML5's device ubiquity starts to become quite appealing -- after all, building an app once, as <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">opposed to three or more times</a>, is less expensive.</p>

<p><img class="right" src="/images/mine/amazonappstore.jpg">Finally, HTML5 is important because <a href="http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters/">Amazon recently announced support for HTML5</a> apps in their App Store for Android. Previous to this announcement, pure HTML5 apps had no real mass distribution model. HTML5 app developers relied on a search engine, while native app developers have a direct channel to consumers that cuts through a lot of noise and makes it easy to find specific apps.</p>

<p>Consequently, a lot of HTML5 apps ended up being <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">wrapped in native code</a> so as to get a chance to compete in the app stores. Amazon's support of HTML5 is a much needed <a href="http://thediscoblog.com/blog/2013/03/04/its-a-question-of-wow/">shot-in-the-arm for HTML5</a> because it means a direct channel to mass consumers; what's more, Amazon also is offering a chance to monetize HTML5 apps <a href="https://developer.amazon.com/sdk/webapps/iap/understanding.html">via a JavaScript In-App purchase API</a>. While Amazon isn't the first In-App purchase API for HTML5, it's the first one linked to a major e-commerce platform and mass consumer channel.</p>

<p>HTML5 is by no means a silver bullet for mobile app development. There's a time and a place for HTML5 apps, just as there's still a need to create native apps. Nevertheless, HTML5 continues to gain favor as app stores (like Amazon's App store for Android) begin to distribute HTML5 apps and other platforms begin to capture market share.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App signing: iOS versus Android]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/26/app-signing-ios-versus-android/"/>
    <updated>2013-09-26T10:16:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/26/app-signing-ios-versus-android</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/sealed.jpg">Apple's app signing process can be a real pain-in-the-neck; nevertheless, it works to keep apps trusted. You know when you download a Bank of America app from iTunes that it's the real thing. You know that the app comes from <em>the</em> Bank of America.</p>

<p>On the other hand, Android allows apps to be self-signed. This has a fundamental flaw: an Android developer can claim to be anyone they want, <em>including Bank of America</em>. Thus, when you download an app from an Android App store, there's a real possibility that the app was submitted by a charlatan. What's more, those charlatan apps can actually be malicious!</p>

<!-- more -->


<p><a href="http://twitter.com/danieleran">Daniel Eran Dilger</a> has written an excellent article that features the differences between Apple's signing process and Google's. I highly recommend you read his article entitled "<a href="http://appleinsider.com/articles/13/07/14/editorial-googles-android-haunted-by-steve-jobs-warnings-on-app-signing-security">Google's Android haunted by Steve Jobs' warnings on app signing security</a>" as it sheds a bright light on the differences between the two mobile platforms; moreover, the article does a great job of outlining the evolution of iOS and its app security policies.</p>

<p>And while you are at it, check out my article entitled "<a href="http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html">Mobile for the masses: Sign, seal, and deliver your Android app</a>" and learn how to sign your Android app in preparation for submitting it to an app store!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile for the masses: Sign, seal, and deliver your Android app]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/17/mobile-for-the-masses-sign-seal-and-deliver-your-android-app/"/>
    <updated>2013-09-17T15:20:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/17/mobile-for-the-masses-sign-seal-and-deliver-your-android-app</id>
    <content type="html"><![CDATA[<p>The fifth article in <a href="http://www.ibm.com/developerworks/">IBM developerWorks</a>' series <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=mobile+for+the+masses">Mobile for the Masses</a> has been published! <a href="http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html">This hip article</a> shows you how to add a multiple-choice quiz to your Android mobile app, then sign it with a secure digital certificate.</p>

<!-- more -->


<p>As the article summary states:</p>

<p><blockquote><p>By web logic, content is king; but for mobile users, interaction rules. Static information design is out for mobile apps, and gamification is in. This month Andrew Glover concludes his introduction to Android mobile development by adding a multiple-choice quiz feature to the example app, Overheard Word, introduced in a previous article. Then he shows you how to generate a digital signature and publish and promote your signed app on Google Play or Amazon Appstore for Android.</p><footer><strong>IBM DeveloperWorks</strong> <cite><a href='http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html'>Mobile for the Masses: Sign, Seal, and Deliver Your Android App</a></cite></footer></blockquote></p>

<p>Check out "<a href="http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html">Mobile for the masses: Sign, seal, and deliver your Android app</a>" and learn how to sign your app in preparation for submitting it to an app store! If you missed the first article, check out "<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses1/">Mobile for the masses: A gentle introduction to Android</a>"; what's more, don't forget to read my second article, entitled "<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Mobile for the masses: Take a swipe at it! Programming gestures in Android</a>" and the third article "<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses3/index.html">Mobile for the masses: Activities and icons in your Android application lifecycle</a>". Finally, don't forget to read article number four: "<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html">Mobile for the masses: Mobile for the masses: Words and gestures with Overheard Word</a>" and programmatically integrate third-party code into your Android UI!</p>

<p>Stay tuned for more articles in this series and don't forget to watch for <a href="http://thediscoblog.com/blog/categories/mobile/">mobile focused articles on this blog</a> as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8% is itty-bitty, but it matters]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/09/8-percent-is-itty-bitty-but-it-matters/"/>
    <updated>2013-09-09T15:49:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/09/8-percent-is-itty-bitty-but-it-matters</id>
    <content type="html"><![CDATA[<p>I saw some news related to <a href="http://thediscoblog.com/blog/2012/12/02/comprehending-the-mobile-development-landscape/">Microsoft Windows Phone</a> that gave me pause for thought. Specifically, <a href="http://www.zdnet.com/ios-up-android-down-in-the-us-as-windows-phone-hits-eight-percent-in-europe-7000020117/">I read an article</a> that stated:</p>

<p><blockquote><p>Microsoft's mobile platform reached new heights in the three months to July 2013 in Europe, making up 8.2 percent of sales across UK, France, Germany, Italy and Spain</p><footer><strong>Liam Tung</strong> <cite><a href='http://www.zdnet.com/ios-up-android-down-in-the-us-as-windows-phone-hits-eight-percent-in-europe-7000020117/'>iOS Up, Android Down in the US as Windows Phone Hits Eight Percent in Europe</a></cite></footer></blockquote></p>

<!-- more -->


<p>While <a href="http://www.expertreviews.co.uk/smartphones/1301902/windows-phone-market-share-growing-in-europe">8.2% market share</a> might seem insignificant, what's interesting is that</p>

<p><blockquote><p>At the same time last year, Windows Phone accounted for 4.9 percent of sales</p><footer><strong>Liam Tung</strong> <cite><a href='http://www.zdnet.com/ios-up-android-down-in-the-us-as-windows-phone-hits-eight-percent-in-europe-7000020117/'>iOS Up, Android Down in the US as Windows Phone Hits Eight Percent in Europe</a></cite></footer></blockquote></p>

<p>That is, <a href="http://wmpoweruser.com/kantar-windows-phone-hits-record-high-of-8-2-market-share-in-europe/">Windows Phone market share</a> for the same five markets has increased by a little more than 3% over the last year. Accordingly, Windows Phone is a <a href="http://thediscoblog.com/blog/2013/05/09/hold-your-horses-its-still-only-a-two-horse-race/">growing platform (in some markets)</a>, which means developers will eventually need to start considering it as a <a href="http://thediscoblog.com/blog/2013/05/09/hold-your-horses-its-still-only-a-two-horse-race/">third platform</a>. And throwing a third platform into the mix does change the variables in a native versus <a href="http://thediscoblog.com/blog/2013/04/05/crowd-think-often-lacks-clarity/">non-native</a> argument <em>in favor of an HTML5 approach</em>.</p>

<p>Microsoft has deep pockets and has <a href="http://www.latimes.com/business/technology/la-fi-tn-microsoft-ceo-steve-ballmers-failures-20130823,0,5988522,full.story">shown before</a> that it will fight (and hang on) to create a market for itself (i.e. Xbox and Bing). I suspect that Windows Phone will continue to gain market share, albeit slowly, mostly at the expense of nominal platforms like Blackberry.</p>

<p>Consequently, HTML5 will continue on its path as an advantageous development platform; moreover, HTML5's rise will <em>most likely be at the expense of hybrid frameworks</em> as there's a point of diminishing returns for <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">frameworks</a> to support 100% of all native features across multiple native platforms. Plus, Amazon's recent announcement that their <a href="http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters/">Appstore for Android supports the submission of HTML5 apps</a> only adds to the pro-HTML5 argument.</p>

<p>8% is an itty-bitty number, but I'll be keeping an eye on Microsoft's Windows Phone market share. And I'll be watching the world of HTML5 closely. How about you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Android migrations]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations/"/>
    <updated>2013-07-24T09:46:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/android_platform.png">Have you ever worked with <a href="http://guides.rubyonrails.org/migrations.html">Rails' migrations</a>? They make <a href="http://www.tutorialspoint.com/ruby-on-rails/rails-migrations.htm">database changes a breeze</a>, don't they?  While every software release doesn't necessarily involve a migration, when one does happen to make use of one, <a href="http://thediscoblog.com/blog/2013/02/18/testing-rails-migrations/">I'm always pleased</a> on how easily things work out. Whether it's to add new data or alter existing data structures, Rails migrations make evolving a datastore (be it an RDMBS or NoSQL one like MongoDB) painless.</p>

<p>When I recently found myself altering the data structure of a SQLite database for <a href="https://play.google.com/store/apps/details?id=com.b50.hoproll&amp;hl=en">one of my Android apps</a>, I found myself wishing there was some similar migration mechanism for Android as there is in Rails. Alas, I could fine none, so I did what any other developer would do: <a href="https://github.com/aglover/droid-migrate">I wrote one</a>.</p>

<!-- more -->


<p><a href="https://github.com/aglover/droid-migrate">Droid Migrate</a> is a simple command line framework that generates and runs database migrations for your Android apps that use <a href="http://www.sqlite.org/">SQLite</a>. A migration is encapsulated by a <code>DBVersion</code> class that contains an <code>up</code> and <code>down</code> method. The <code>up</code> method is called for an upgrade and <code>down</code> for a rollback. What those methods do is entirely up to you.</p>

<p>In addition, Droid Migrate generates a <code>DatabaseHelper</code> class through which you obtain underlying connections to a SQLite instance -- this is <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html">the canonical way</a> to <a href="http://www.stevenmcmillan.co.uk/blog/2012/java-sqlite-database-helper-class-for-android/">interact with SQLite</a> in <a href="http://www.androidhive.info/2011/11/android-sqlite-database-tutorial/">an Android app</a> anyway, but with Droid Migrate, you get a specially enhanced <code>DatabaseHelper</code> that determines which version of a target database instance is the most current and runs the appropriate migrations to bring the database to that version.</p>

<p>Thus, with your newly minted <code>DatabaseHelper</code> class, you can still interact with your app's database like you would normally, however, by using this class, all migrations are handled for you. Allow me to demonstrate.</p>

<p><a href="https://github.com/aglover/tidbit">I've created a simple app</a> that doesn't interact with any database at this point -- it simply creates a <code>ListView</code> that is intended to hold a list of records for viewing. You can find this app on <a href="https://github.com/aglover/tidbit">Github</a> if you'd like to follow along. Nevertheless, the app's main Activity is shown below.</p>

<p>``` java Simple Android app w/o any SQLite logic
package com.b50.db.ex;</p>

<p>import android.app.Activity;
import android.os.Bundle;
import android.widget.TextView;</p>

<p>public class MainActivity extends Activity {</p>

<p>  protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
TextView textView = (TextView) findViewById(R.id.textView1);
textView.setText("This would be a list from a DB if there was a DB");
</code></pre>

<p>  }
}
```</p>

<p>What I'd like to do is add the ability to interact with a SQLite database; plus, I'd like to be able to evolve the data model on subsequent releases. This is where Droid Migrate shines.</p>

<p>After I've installed Droid Migrate (simply clone or download the code, build it, and put it into your <code>PATH</code> and create new environment variable dubbed <code>DROID_MIGRATE_HOME</code>), I can initialize my app to use Droid Migrate by opening up a terminal in the root of my app and typing:</p>

<p><code>bash Initializing Droid Migrate
$&gt; droid-migrate init -d a_catalog
</code></p>

<p>The <code>-d</code> flag specifies the name of my desired database. I can optionally provide a package name via the <code>-p</code> flag if I'd like my newly generated classes in a separate package from my main app.</p>

<p>If you take a look at your app's code, you should notice a number of new things. First, you'll see two new classes and a new jar file. The classes are the aforementioned <code>DatabaseHelper</code> and a class dubbed <code>DBVersion1</code>. The newly added jar file in your app's <code>libs</code> folder contains a few classes that correspond to Droid Migrate's runtime dependencies -- this jar is extremely compact at 4KB.</p>

<p>The <code>DatabaseHelper</code> class is brutally simple:</p>

<p>```java DatabaseHelper couldn't be any easier
package com.b50.db.ex;</p>

<p>import com.b50.db.ex.R;
import android.content.Context;
import com.b50.migrations.MigrationsDatabaseHelper;</p>

<p>public class DatabaseHelper extends MigrationsDatabaseHelper {</p>

<p>  public DatabaseHelper(Context context) {</p>

<pre><code>super(context, context.getString(R.string.database_name), null, 
  context.getResources().getInteger(R.integer.database_version), 
  context.getString(R.string.package_name));
</code></pre>

<p>  }
}
```</p>

<p>This class extends Droid Migrate's <code>MigrationsDatabaseHelper</code>, which ultimately extends Android's <code>SQLiteOpenHelper</code> so as I mentioned earlier, you've got everything you need to interact with SQLite at your fingertips via <code>DatabaseHelper</code>. If you look closely, you'll see that this class makes use of a specialized XML file (that is ultimately generated into your <code>R</code> class).</p>

<p>Take a look in the <code>res/values</code> folder and open up the newly created <code>migrations.xml</code> file. It should look something like this:</p>

<p>```xml migrations.xml contains database version, package name and database name
&lt;?xml version="1.0" encoding="utf-8"?>
<resources></p>

<pre><code>&lt;integer name="database_version"&gt;1&lt;/integer&gt;
&lt;string name="database_name"&gt;a_catalog&lt;/string&gt;
&lt;string name="package_name"&gt;com.b50.db.ex&lt;/string&gt;
</code></pre>

<p></resources>
```</p>

<p>Note the value of <code>database_version</code> -- it's 1. This corresponds to the <code>DBVersion1</code> class that was generated. Take a look at that class:</p>

<p>```java DBVersion1 is your initial migration class
package com.b50.db.ex;</p>

<p>import com.b50.migrations.AbstractMigration;</p>

<p>public class DBVersion1 extends AbstractMigration {</p>

<pre><code>public void up() {
    //execSQL("some sql create stmts");
}

public void down() {
    //execSQL("some delete sql stmts");
}
</code></pre>

<p>}
```</p>

<p>This class is where you implement your initial migration, which would create various tables and populate them. Use the <code>execSQL</code> method to pass in a valid SQL <code>String</code>. For example, I'll create an initial migration like so:</p>

<p>```java DBVersion1 is now implemented
package com.b50.db.ex;</p>

<p>import com.b50.migrations.AbstractMigration;</p>

<p>public class DBVersion1 extends AbstractMigration {</p>

<pre><code>public void up() {
    String create = "CREATE TABLE hops (_id integer  PRIMARY KEY AUTOINCREMENT DEFAULT NULL, name TEXT, description TEXT, substitutions TEXT DEFAULT '', alpha_acid TEXT DEFAULT '', beer_styles TEXT DEFAULT '', type TEXT DEFAULT '', user_notes TEXT DEFAULT '');";
    execSQL(create);
    String oneThing = "INSERT INTO 'hops' VALUES(1,'Amarillo','Spicy hop with mild bitterness and a noble aroma.  Good all around hop.','Cascade, Centennial','7 to 10','Ale, IPA','Aroma', '');";
    execSQL(oneThing);
}

public void down() {
    execSQL("DROP TABLE hops;");
}
</code></pre>

<p>}
```</p>

<p>As you can see, my <code>up</code> method creates a table and inserts one record. My <code>down</code> method rolls things back, which in this case means dropping the created table.</p>

<p>Now all I have to do is make use of my app's <code>DatabaseHelper</code> instance and Droid Migrate will ensure things are properly initialized. Therefore, I'll update the original Activity to display a list of what's in the database, which I know only to be one record based upon my initial migration.</p>

<p>```java Updated Activity to interact with SQLite
package com.b50.db.ex;</p>

<p>import android.app.Activity;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;</p>

<p>public class MainActivity extends Activity {</p>

<p>  protected SQLiteDatabase db;</p>

<p>  protected void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

this.db = (new DatabaseHelper(this)).getWritableDatabase();
ListView list = (ListView) findViewById(R.id.list);

ListAdapter adapter = getAdaptorForQuery("SELECT _id, name, description FROM hops ORDER BY name ASC", null);
list.setAdapter(adapter);
</code></pre>

<p>  }</p>

<p>  private ListAdapter getAdaptorForQuery(String queryString, String[] parameters) {</p>

<pre><code>Cursor cursor = this.db.rawQuery(queryString, parameters);
return new SimpleCursorAdapter(this, R.layout.list_item, cursor,
            new String[] { "name", "description" }, new int[] { R.id.hopName, R.id.description }, 0);
</code></pre>

<p>  }
}
```</p>

<p>As you can see from the code above, the app now makes a query to the underlying SQLite instance and builds a <code>ListView</code> from the result set of the query.</p>

<p>The key line is how the <code>SQLiteDatabase</code> instance is obtained: <code>this.db = (new DatabaseHelper(this)).getWritableDatabase();</code> -- that is where all the magic takes place. Droid Migrate passes along the version number to the Android platform and if there is a change, the Android platform will call a series of life-cycle methods, which Droid Migrate wires up with your migrations.</p>

<p>For instance, let's imagine that a subsequent release of this app adds more data to the <code>hops</code> table. Therefore, I'll generate a new migration. This is done by typing the following command within the root directory of your project like so:</p>

<p><code>bash Generating a new migration
$&gt; droid-migrate generate up
</code></p>

<p>The <code>up</code> flag signifies an increase in the database version (i.e. version++) and <code>down</code> indicates a rollback (i.e. version--). If you take a look at your app's code, you'll notice a new class: <code>DBVersion2</code> and your <code>migrations.xml</code> file has been updated: the <code>database_version</code> value is now 2.</p>

<p>I'll implement my <code>DBVersion2</code> class like so:</p>

<p>```java Implementing DBVersion2 to add one more row of data
package com.b50.db.ex;</p>

<p>import com.b50.migrations.AbstractMigration;</p>

<p>public class DBVersion2 extends AbstractMigration {</p>

<pre><code>public void up() {
    execSQL("INSERT INTO 'hops' VALUES(100,'Zythos','New IPA style hop blend created to optimize and exceed the aroma characteristics of the traditional, and sometimes hard to get, IPA hops.','Amarillo, Columbus, Cascade','9.5 to 12','IPAs','Bittering and Aroma', '');");
}

public void down() {
    execSQL("DELETE from 'hops' where _id = 100");
}
</code></pre>

<p>}
```</p>

<p>Now if I fire up my app, the <code>ListView</code> will have 2 items in it!</p>

<p><img class="center" src="/images/mine/migrate_2.png"></p>

<p>What about if you need to rollback? That's just as easy. Imagine that the addition of that second row of data was a gigantic mistake and instead I really only want one row (i.e. I only want the data originally created in <code>DBVersion1</code>). All I have to do is type within the root of my project:</p>

<p><code>bash Rollbacks in Droid Migrate are just as easy
$&gt; droid-migrate generate down
</code></p>

<p>After typing the above command, you should see the following output:</p>

<p><code>bash Rollback to version 1!
Generating a rollback migration...
Rolling back your migrations.xml file to indicate database version 1
Done!
</code></p>

<p>The only thing that'll change in your project is the <code>migrations.xml</code> file -- the <code>database_version</code> value will be rolled back to 1 (or what ever 1 minus the current version is).</p>

<p>Fire the app back up, and behold: one value is displayed because <code>DBVersion2</code>'s <code>down</code> method was executed!</p>

<p>Droid Migrate makes upgrades and rollbacks to your underlying SQLite database a breeze; what's more, it can handle upgrades or rollbacks beyond just one version. That is, if an app instance is upgraded from version 2 to version 6, each migration will be run in order (3, 4, 5, and 6). The same is true of a rollback.</p>

<p>If you are working with SQLite in an Android app, I highly recommend you take a look at <a href="https://github.com/aglover/droid-migrate">Droid Migrate</a>!</p>
]]></content>
  </entry>
  
</feed>
