<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2013-10-09T19:00:17-04:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Callbacks in Appcelerator Titanium modules]]></title>
    <link href="http://thediscoblog.com/blog/2013/05/29/callbacks-in-appcelerator-titanium-modules/"/>
    <updated>2013-05-29T13:42:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/05/29/callbacks-in-appcelerator-titanium-modules</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/appc_stacked.png">I recently found myself implementing both an Android and iOS <a href="http://www.appcelerator.com/">Appcelerator</a> module for <a href="http://www.app47.com/">App47</a>'s <a href="https://github.com/App47/appcelerator-modules">respective Agent libraries</a>. Like <a href="https://github.com/App47/phonegap-plugins">PhoneGap plugins</a>, <a href="https://wiki.appcelerator.org/display/tis/Using+Titanium+Modules">Appcelerator modules</a> are a way to bridge an Appcelerator app with native code running on a device; in this case, the native code happens to be App47's <a href="http://app47.com/wiki/doku.php?id=configure:androidapp">Android</a> and <a href="http://app47.com/wiki/doku.php?id=configure:iosapp">IOS</a> Agents, which capture <a href="http://www.app47.com/features/">usage analytics</a> and facilitate a few security features. Naturally, these Agent libraries are  coded in Java and Objective-C.</p>

<p>In the end, what I wanted to implement was a <a href="http://recurial.com/programming/understanding-callback-functions-in-javascript/">JavaScript-ish callback</a> associated with a native App47 Agent call. Alas, it took me a lot of digging to achieve this goal.</p>

<!-- more -->


<p>For example, for a timed event (which, as you've probably guessed, captures how long an event took), rather than the more traditional call which is inline:</p>

<p><code>javascript Straightforward method invocation
var id = agent.startTimedEvent("openCrust 2.0.27");
openCrust({});
agent.endTimedEvent(id);
</code></p>

<p>I wanted a more JavaScript friendly call that wraps the timed code like so:</p>

<p><code>javascript Callback invocation
agent.timedEvent("openCrust 2.0.27", function() {
  openCrust({});
});
</code></p>

<p>This has the benefit of wrapping a desired event -- there is no explicit need for anyone to code the ending -- it is automatically done via the <code>timedEvent</code> call after invoking the passed in function.</p>

<p>The Titanium module documentation is a bit hard to find (that is, finding up-to-date valid documentation is challenging); your best bet to see how to do something interesting is to look at the <a href="https://github.com/appcelerator/titanium_mobile/tree/master/android/modules">various code</a> repositories <a href="https://github.com/appcelerator/titanium_modules">on Github</a> followed by studying the API docs (i.e. JavaDocs and <a href="https://github.com/appcelerator/titanium_mobile/blob/master/iphone/Classes/KrollCallback.m">.h/.m files for iOS</a>).</p>

<p>It turns out, invoking a JavaScript callback in either Android or iOS is fairly straightforward. In the case of Android, you need to use the <code>KrollFunction</code> type like so:</p>

<p><code>java Wrapped Timed Event
@Kroll.method
public void timedEvent(String name, KrollFunction callback) {
  String id = EmbeddedAgent.startTimedEvent(name);
  callback.call(getKrollObject(), new HashMap&lt;String, String&gt;());
  EmbeddedAgent.endTimedEvent(id);
}
</code></p>

<p>As you can see in the above code, I'm not doing anything special like passing in any arguments to the <code>KrollFunction</code> instance. If you want to do that, say in the case of passing in some special value that the corresponding callback will use, then you can either pass in a <code>Map</code> or an <code>Object[]</code>.</p>

<p>For example, you can implement this style of callback where a custom value is passed in for a timed event like so:</p>

<p><code>java Callback with Java
@Kroll.method
public void startTimedEvent(String name, KrollFunction callback) {
  String id = EmbeddedAgent.startTimedEvent(name);
  HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
  map.put("id", id);
  callback.call(getKrollObject(), map);
}
</code></p>

<p>This results in a JavaScript call like so:</p>

<p><code>javascript Using a callback but not wrapping the event
agent.startTimedEvent("openCrust 2.0.27", function(result) {
  var id = result['id'];
  openCrust({});
  agent.endTimedEvent(id);
});
</code></p>

<p>In iOS land, invoking a callback is a bit different, but certainly as easy. The same <code>timedEvent</code> JavaScript method that takes a callback to be wrapped by the timed event can be implemented as follows:</p>

<p>``` objective-c Wrapped event by callback
- (void)timedEvent:(id)args
{
  NSString<em> eventName = [args objectAtIndex:0];
  NSString</em> eventID = [EmbeddedAgent startTimedEvent:eventName];</p>

<p>  KrollCallback* callback = [args objectAtIndex:1];
  if(callback){</p>

<pre><code>[callback call:nil thisObject:nil];
</code></pre>

<p>  }</p>

<p>  [EmbeddedAgent endTimedEvent:eventID];
}
```</p>

<p>In this case, I'm using the <code>KrollCallback</code> type, which appears to be analogous to Appcelerator's Android <code>KrollFunction</code>.</p>

<p>If you need to pass values to a corresponding JavaScript function, they need to be in <code>NSArray</code> form, thus, you can do something like this to pass in parameters to the underlying JavaScript function:</p>

<p>``` objective-c With callback parameter
- (void)startTimedEvent:(id)args
{
  NSString<em> eventName = [args objectAtIndex:0];
  NSString</em> eventID = [EmbeddedAgent startTimedEvent:eventName];</p>

<p>  KrollCallback* callback = [args objectAtIndex:1];
  if(callback){</p>

<pre><code>NSDictionary* dict = [[[NSDictionary alloc] initWithObjectsAndKeys:@"id", eventID, nil] autorelease];
NSArray* array = [NSArray arrayWithObjects: dict, nil];
[callback call:array thisObject:nil];
</code></pre>

<p>  }
}
```</p>

<p>As you can see in the above code, a callback instance takes as a parameter an <code>NSArray</code>, thus, I have to covert my <code>NSDictionary</code> into an array via Objective-C's handy <code>arrayWithObjects</code> function.</p>

<p>The default module examples <a href="http://docs.appcelerator.com/titanium/latest/#!/guide/Titanium_Mobile_Module_API">provided by Appcelerator naturally work</a>, but alas, the non-callback style of invocation was less than appealing, especially if you are going to be coding an <a href="http://en.wikipedia.org/wiki/Appcelerator_Titanium">Appcelerator</a> app in JavaScript. Nevertheless, you can do it easily enough provided you are willing to dig through myriad repositories...or you could save yourself the headache and read this blog post.</p>
]]></content>
  </entry>
  
</feed>
