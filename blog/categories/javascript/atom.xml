<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | The Disco Blog]]></title>
  <link href="http://aglover.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://aglover.github.com/"/>
  <updated>2013-03-06T09:38:45-05:00</updated>
  <id>http://aglover.github.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sinatra, CoffeeScript, and Haml: swinging in 4 steps]]></title>
    <link href="http://aglover.github.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps/"/>
    <updated>2012-12-10T21:49:00-05:00</updated>
    <id>http://aglover.github.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps</id>
    <content type="html"><![CDATA[<p>I recently decided to ditch plain old JavaScript in a <a href="http://www.sinatrarb.com/">Sinatra</a> based application in favor of <a href="http://coffeescript.org/">CoffeeScript</a>. The existing JavaScript wasn't terribly complex; however, I was looking at having to add some AJAX based long polling and I couldn't bring myself to do it in <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-18/index.html">JavaScript</a>. Accordingly, I decided I'd use <a href="http://www.ibm.com/developerworks/web/library/j-coffeescript/index.html">CoffeeScript</a>, but, as it turns out, there were a few steps I had to put in place before I could enjoy some significant whitespace delimitation.</p>

<p>First, I installed <a href="https://github.com/Sutto/barista">Barista</a>, which is a nifty Ruby gem that adds transparent CoffeeScript support to any Rack app. There were a few other gems available, however, I decided that Barista had the most mature documentation and the project still showed signs of life.</p>

<p>Once I added the Barista gem to my Gemfile and ran <a href="http://gembundler.com/">Bundler</a>, I next had to require Barista in my Sinatra app; moreover, I had to register the Barista extension via <code>Sinatra.register Barista::Integration::Sinatra</code>. Note, that these steps need to be done after <a href="http://haml.info/">Haml</a> is loaded.</p>

<p>In order for Barista to work properly, you'll need to have a JavaScript runtime handy -- there are a number of options here, including <a href="https://github.com/cowboyd/therubyracer">therubyracer</a>; however, after a bit of research, I found some <a href="http://stackoverflow.com/questions/6282307/execjs-and-could-not-find-a-javascript-runtime">concerning notes regarding therubyracer's memory consumption</a>. After a bit of surfing, I happened upon <a href="https://github.com/sstephenson/execjs">ExecJS</a>, which states that Node will work just fine. Yeah!</p>

<p>Accordingly, since this application runs on Ubuntu, I got to use a nifty script that I happened to have written about a year ago: <a href="https://github.com/aglover/ubuntu-equip">Ubuntu Equip</a>. In less than a minute, I had the latest and greatest version of Node running by running the command:</p>

<p><code>bash script for install Node on Ubuntu
wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_node.sh &amp;&amp; bash equip_node.sh
</code></p>

<p>Take note: this script sets a custom <a href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool">apt-get</a> repository; otherwise, if you don't add this repository, you'll end up with an ancient version of Node.</p>

<p>Finally, to actually start coding in CoffeeScript, all you have to do is use Haml's handy inline <code>:coffeescript</code> filter:</p>

<p>``` javascript CoffeeScript spinner
:coffeescript
  $(document).ready -></p>

<pre><code>opts = { lines: 13, ...}
spinner = new Spinner(opts).spin(document.getElementById('spinner'))
</code></pre>

<p>```</p>

<p>That's it! The steps required to get Sinatra, CoffeeScript, and Haml playing together are:</p>

<ul>
<li>Install Barista</li>
<li>Configure Sinatra</li>
<li>Install a JavaScript runtime engine</li>
<li>Write some CoffeeScript</li>
</ul>


<p>In short, Barista and <a href="http://www.ibm.com/developerworks/java/library/j-nodejs/">Node</a> make Sinatra swing with CoffeeScript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling Mongo documents with Mongoose]]></title>
    <link href="http://aglover.github.com/blog/2012/08/29/modeling-mongo-documents-with-mongoose/"/>
    <updated>2012-08-29T21:45:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/29/modeling-mongo-documents-with-mongoose</id>
    <content type="html"><![CDATA[<p>Without a doubt, one of the quickest ways to build an application that leverages <a href="http://www.mongodb.org/">MongoDB</a> is with Node. It's as if the two platforms were made for each other; the sheer number of Node libraries available for dealing with Mongo is testimony to a vibrant, innovative community. Indeed, one of my favorite Mongo focused libraries these days is <a href="http://mongoosejs.com/">Mongoose</a>.</p>

<p>Briefly, Mongoose is an object modeling framework that makes it incredibly easy to model collections and ultimately work with intuitive objects that support a rich feature set. Like most things in Node, it couldn't be any easier to get set up. Essentially, to use Mongoose, you'll need to define <code>Schema</code> objects -- these are your documents -- either top level or even embedded.</p>

<p>For example, I've defined a <code>words</code> collection that contains documents (representing...words) that each contain an embedded collection of <code>definition</code> documents. A sample document looks like this:</p>

<p>``` javascript Word Document
{<br/>
  _id: "4fd7c7ac8b5b27f21b000001",<br/>
  spelling: "drivel",
  synonyms: ["garbage", "dribble", "drool"],
  definitions: [
  { part_of_speech: "noun",</p>

<pre><code>definition:"saliva flowing from the mouth, or mucus from the nose; slaver."
</code></pre>

<p>  },
  { part_of_speech: "noun",</p>

<pre><code>definition:"childish, silly, or meaningless talk or thinking; nonsense; twaddle." 
</code></pre>

<p>  }]
}
```</p>

<p>From an document modeling standpoint, I'd like to work with a <code>Word</code> object that contains a list of <code>Definition</code> objects and a number of related attributes (i.e. synonyms, parts of speech, etc). To model this relationship with Mongoose, I'll need to define two <code>Schema</code> types and I'll start with the simplest:</p>

<p><code>javascript Definition Schema
Definition = mongoose.model 'definition', new mongoose.Schema({
  part_of_speech : { type: String, required: true, trim: true, enum: ['adjective', 'noun', 'verb', 'adverb'] },
  definition : {type: String, required: true, trim: true}
})
</code></p>

<p>As you can see, a <code>Definition</code> is simple -- the <code>part_of_speech</code> attribute is an enumerated <code>String</code> that's required; what's more, the <code>definition</code> attribute is also a required <code>String</code>.</p>

<p>Next, I'll define a <code>Word</code>:</p>

<p><code>javascript Word Schema
Word = mongoose.model 'word', new mongoose.Schema({
  spelling : {type: String, required: true, trim: true, lowercase: true, unique: true},
  definitions : [Definition.schema],
  synonyms : [{ type: String, trim: true, lowercase: true }]
})
</code></p>

<p>As you can see, a <code>Word</code> instance embeds a collection of <code>Definition</code>s. Here I'm also demonstrating the usage of <code>lowercase</code> and the index <code>unique</code> placed on the <code>spelling</code> attribute.</p>

<p>To create a <code>Word</code> instance and save the corresponding document couldn't be easier. Mongo array's leverage the <code>push</code> command and Mongoose follows this pattern to the tee.</p>

<p><code>javascript saving with Mongoose
word = new models.Word({spelling : 'loquacious'})
word.synonyms.push 'verbose'
word.definitions.push {definition: 'talking or tending to talk much or freely; talkative; \
  chattering; babbling; garrulous.', part_of_speech: 'adjective' }
word.save (err, data) -&gt;
</code></p>

<p>Finding a word is easy too:</p>

<p>``` javascript findOne in action
it 'findOne should return one', (done) ->
  models.Word.findOne spelling:'nefarious', (err, document) -></p>

<pre><code>document.spelling.should.eql 'nefarious'
document.definitions.length.should.eql 1
document.synonyms.length.should.eql 2
document.definitions[0]['part_of_speech'].should.eql 'adjective'
done(err)
</code></pre>

<p>```</p>

<p>In this case, the above code is a <a href="http://visionmedia.github.com/mocha/">Mocha</a> test case (which uses <a href="https://github.com/visionmedia/should.js">should</a> for assertions) that demonstrates Mongoose's <code>findOne</code>.</p>

<p>You can find the code for these examples and more at my Github repo dubbed <a href="https://github.com/aglover/exegesis">Exegesis</a> and while you're at it, check out the <a href="http://www.ibm.com/developerworks/training/kp/j-kp-node/index.html">developerWorks videos I did for Node</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leaner JQuery with Zepto]]></title>
    <link href="http://aglover.github.com/blog/2012/08/28/leaner-jquery-with-zepto/"/>
    <updated>2012-08-28T13:04:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/28/leaner-jquery-with-zepto</id>
    <content type="html"><![CDATA[<p>In a recent conversation with my friend <a href="http://jonathanstark.com/">Jonathan Stark</a> we talked about how much has changed in mobile web development since <a href="http://www.ibm.com/developerworks/podcast/glover-stark-112911/index.html">he and I chatted about cross-platform mobile development</a> in November of 2011. Of particular interest was how much adoption mobile web sites have achieved in less than a year -- yet, the adoption hasn't always been smooth. In fact, he pointed out a decidedly humorous site dubbed <a href="http://wtfmobileweb.com/">WTF Mobile Web</a>, which aims to educate the mobile web community via examples.</p>

<p>One of the entries you can find on wtfmobileweb.com is an interesting Tweet, which I happened to see on <a href="https://twitter.com/jonathanstark">Jonthan</a>'s timeline. <a href="https://twitter.com/@philhawksworth">@philhawksworth</a> notes that <a href="http://grolsch.com/">grolsch.com</a> isn't particularly mobile-savvy:</p>

<p><blockquote><p>Dear web developers of the world. Can we stop this silliness before somebody gets hurt?!</p><footer><strong>@philhawksworth</strong> <cite><a href='https://twitter.com/philhawksworth/status/223805766161797121'>twitter.com/philhawksworth/&hellip;</a></cite></footer></blockquote></p>

<p>If you look closely in the image referenced by the tweet (or on wtfmobileweb.com), you'll see that slightly over 24MB of content is downloaded over the course of 388 requests. And that, presumably, a lot of that content is coming from everyone's friend <a href="http://jquery.com/">JQuery</a>.</p>

<p>JQuery is an excellent library; however, it just <em>might</em> contain a lot of unneeded code. And in the case of the mobile web, that translates into longer download times, which ultimately might yield a subpar user experience. Accordingly, if you still need a majority of JQuery's features but not its weight, you might want to give <a href="http://zeptojs.com/">Zepto</a> a look.</p>

<p>As Zepto's website puts it:</p>

<p><blockquote><p>Zepto is a minimalist JavaScript library for modern browsers with a largely jQuery-compatible API. If you use jQuery, you already know how to use Zepto.</p></blockquote></p>

<p>Indeed, JQuery's <code>$</code> is there in all its glory -- only just <em>slimmer</em>. I was able to substitute in Zepto for JQuery in a <a href="https://github.com/aglover/caprice">PhoneGap</a> project without any issues. Give it a shot -- unless you like having your website end up on wtfmobileweb.com!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala &amp; Typesafe: exciting. Not disruptive]]></title>
    <link href="http://aglover.github.com/blog/2012/08/27/scala-and-typesafe-exciting-not-disruptive/"/>
    <updated>2012-08-27T08:35:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/27/scala-and-typesafe-exciting-not-disruptive</id>
    <content type="html"><![CDATA[<p>I recently read an article on <a href="http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework">TheServerSide.com</a> where the author muses about the possible disruptive nature of Typesafe's <a href="http://typesafe.com/company/news/24499">recent Series B cash infusion of $14M</a>:</p>

<p><blockquote><p>It's time for a disruptive event that will change how programs are designed, and how applications target the Java Virtual Machine.</p><footer><strong>Cameron McKenzie</strong> <cite><a href='http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework'>Disruptive Forces in Java: Is Scala the New Spring Framework?</a></cite></footer></blockquote></p>

<p>Indeed, he likens the event to <a href="http://www.springsource.com/">SpringSource</a> and its meteoric rise to prominence in a time when web development was a real pain-in-the-neck. Think <a href="http://struts.apache.org/">Struts</a> (which, impressively, is still putting out releases) along with <a href="http://www.oracle.com/technetwork/java/javaee/ejb/index.html">EJB</a> and you have a perfect storm for a lightweight revolution.</p>

<p>Unfortunately for the author's comparison, the world of web development these days is innovating at a breakneck pace. And this innovation isn't necessarily found in Typesafe's <a href="http://typesafe.com/stack">Typesafe Stack</a>. I don't discount its relevance or applicability -- Typesafe Stack is exciting: witness <a href="http://www.theregister.co.uk/2009/04/01/twitter_on_scala/">Twitter's move to Scala</a> a few years ago.  It is not, however, disruptive.</p>

<p>Disruptive is something that completely changes the game. When Spring was unleashed, building Java apps became easier and consequently, you could produce them quicker. That same disruptiveness is happening now in a different community: <a href="http://nodejs.org/">Node</a>. Specifically, frameworks like <a href="http://www.meteor.com/">Meteor</a> and <a href="http://derbyjs.com/">Derby</a>, which are built using Node along with <a href="http://socket.io/">Socket.io</a>, are on the cusp of <em>revolutionizing</em> the web. These nascent frameworks are blazing new trails with respect to the realtime web -- you can build an extremely interactive application in a fraction of the code compared to something like <a href="http://www.playframework.org/">Play</a>. And you can do it before the download and installation of Play completes.</p>

<p>Indeed, the excitement around these frameworks is attracting serious attention. Meteor's recent announcement that it took <a href="http://gigaom.com/cloud/scoop-meteor-gets-9m-in-funding/">$9M in funding</a> is most likely a harbinger of things to come with smart people making calculated bets in realtime, rapidly built, and rapidly deployed apps.</p>

<p>Combine the ideas of these innovative frameworks with <a href="http://vertx.io/">vert.x</a>, which is an "event driven application framework that runs on the JVM" (Node has made <em>event driven</em> a key phrase) that allows you to write web apps in "Ruby, Java, Groovy, JavaScript and Python" and you have a legitimate shot a disruption that'll "change how programs are designed, and how applications target the Java Virtual Machine."</p>

<p>Typesafe Stack is exciting. It's a safe choice for traditional style web development. But the forces changing web development these days are rapidly converging on the Node community. It's there that you'll find disruption.</p>
]]></content>
  </entry>
  
</feed>
