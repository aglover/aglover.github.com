<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2014-04-01T21:18:22-07:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 8's functional fomentation]]></title>
    <link href="http://thediscoblog.com/blog/2014/03/25/java-8-s-functional-fomentation/"/>
    <updated>2014-03-25T20:39:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2014/03/25/java-8-s-functional-fomentation</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/revolution_small.png">Java 8 has revolutionized Java. It's easily the most significant release of Java in the last <a href="http://en.wikipedia.org/wiki/Java_version_history#J2SE_5.0_.28September_30.2C_2004.29">10 years</a>. There are a ton of new features including default methods, method and constructor references, and lambdas, <a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">just to name a few</a>.</p>

<p>One of the more interesting features is the new <a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html"><code>java.util.stream</code></a> API, which as the Javadoc states, enables</p>

<p><blockquote><p>functional-style operations on streams of elements, such as map-reduce transformations on collections</p></blockquote></p>

<p>Combine this new API with lambda expressions and you end up with a terse, yet, powerful syntax that significantly simplifies code through the application of projections.</p>

<!-- more -->


<p></p>

<p>Take, for example, the ostensibly simple task of filtering a collection. In this case, a simple <code>Collection</code> of <code>Message</code> types, created like so:</p>

<p><code>java Creating a Collection of Messages
List&lt;Message&gt; messages = new ArrayList&lt;&gt;();
messages.add(new Message("aglover", "foo", 56854));
messages.add(new Message("aglover", "foo", 85));
messages.add(new Message("aglover", "bar", 9999));
messages.add(new Message("rsmith", "foo", 4564));
</code></p>

<p>With this collection, I'd like to filter out <code>Message</code>s with a <code>delay</code> (3rd constructor parameter) greater than 3,000 seconds.</p>

<p><a href="http://stackoverflow.com/questions/122105/java-what-is-the-best-way-to-filter-a-collection">Previous to Java 8</a>, you could hand jam this sort of logic like so:</p>

<p>``` java Filtering old school style
for (Message message : messages) {
  if (message.delay > 3000) {</p>

<pre><code>System.out.println(message);
</code></pre>

<p>  }
}
```</p>

<p>In Java 8, however, this job becomes a lot more concise. Collections now support the <code>stream</code> method, which converts the underlying data structure into a iterate-able steam of objects and thereby permits a new breed of functional operations that leverage lambda expressions. Most of these operations can be chained as well. These chain-able methods are dubbed <em>intermediate</em>, methods that cannot be chained are denoted as <em>terminal</em>.</p>

<p>Briefly, lambda expressions are a lot like anonymous classes except with <em>a lot less</em> syntax. For example, if you look at the Javadocs for the parameter to a <code>Stream</code>'s <code>filter</code> method, you'll see that it takes a <a href="http://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html"><code>Predicate</code></a> type. Yet, you don't have to implement this interface as you would, say, before Java 8 with an anonymous class. Consequently, the <code>Predicate</code> lambda expression for filtering all values of <code>delay</code> greater than 3000 would be:</p>

<p><code>java Lambda expression
x -&gt; x.delay &gt; 3000
</code></p>

<p>Where <code>x</code> is the parameter passed in for <em>each value</em> in the stream and everything to the right of the <code>-&gt;</code> being the expression evaluated.</p>

<p>Putting this all together in Java 8 yields:</p>

<p><code>java Streaming lambdas!
messages.stream().filter(m -&gt; m.delay &gt; 3000).forEach(item -&gt; System.out.println(item));
</code></p>

<p>Interestingly, due to some other new features of Java 8, the <code>forEach</code>'s lambda can be simplified further to:</p>

<p><code>java Streaming lambdas are even shorter!
messages.stream().filter(m -&gt; m.delay &gt; 3000).forEach(System.out::println);
</code></p>

<p>Because the parameter of the <code>forEach</code> lambda is simply consumed by the <code>println</code>, Java 8 now permits you to drop the parameter entirely.</p>

<p>Earlier, I mentioned that streams permit you to chain lambdas -- in the case above, the <code>filter</code> method is an intermediate method, while the <code>forEach</code> is a terminal method. Other intermediate methods, that are immediately recognizable to functional programmers, are:  <code>map</code>, <code>flatMap</code>, and <code>reduce</code>, to name a few.</p>

<p>To elaborate, I'd like to find all <code>Message</code>s that are delayed more than 3,000 seconds and sum up the total delay time. Without functional magic, I could write:</p>

<p>``` java Prosaic Java<br/>
long totalWaitTime = 0;
for (Message message : messages) {
  if (message.delay > 3000) {</p>

<pre><code>totalWaitTime += message.delay;
</code></pre>

<p>  }
}
```</p>

<p>Nevertheless, with Java 8 and a bit of functional-foo, you can achieve a more elegant code construct like so:</p>

<p><code>java Java 8 elegance
long totWaitTime = messages.stream().filter(m -&gt; m.delay &gt; 3000).mapToLong(m -&gt; m.delay).sum();
</code></p>

<p>Note how I am able to chain the <code>filter</code> and <code>mapToLong</code> methods, along with a terminal <code>sum</code>. Incidentally, the <code>sum</code> method requires a specific map style method that yields a collection of primitive types, such as <code>mapToLong</code>, <code>mapToInt</code>, etc.</p>

<p>Functional style programming as a core language feature is an  astoundingly powerful construct. And while a lot of these techniques have been available in various 3rd party libraries like Guava and JVM languages like Scala and Groovy, having these features core to the language will surely reach a wider audience of developers and have the biggest impact to the developmental landscape.</p>

<p>Java 8, without a doubt, drastically changes the <a href="http://thediscoblog.com/blog/categories/java/">Java language</a> for the better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ahoy there Maven Central]]></title>
    <link href="http://thediscoblog.com/blog/2014/02/12/ahoy-there-maven-central/"/>
    <updated>2014-02-12T20:54:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2014/02/12/ahoy-there-maven-central</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/aglover/ahoy">Ahoy!</a>, which is an asynchronous <a href="http://thediscoblog.com/blog/categories/sqs/">SQS</a> adapter for <a href="http://thediscoblog.com/blog/categories/aws/">AWS's Java SQS library</a>, is now syncing with Maven Central. This means you can easily use Ahoy! in your Maven or Gradle builds.</p>

<p>For example, if you want to <a href="http://thediscoblog.com/blog/2013/09/29/ahoy-there-callbacks/">spice up your SQS</a> and you use Maven, just add the following dependency for your <code>pom.xml</code> file and you'll be rockin' it in no time, baby!</p>

<p>``` xml Including Ahoy! into your Maven pom.xml
<dependency></p>

<pre><code>&lt;groupId&gt;com.github.aglover&lt;/groupId&gt;
&lt;artifactId&gt;ahoy&lt;/artifactId&gt;
&lt;version&gt;1.0.1&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<p>You don't use Maven? But rather use Gradle? I've got you covered!</p>

<p><code>groovy Adding Ahoy! into your Gradle build.gradle file
compile 'com.github.aglover:ahoy:1.0.1'
</code></p>

<p>Check out <a href="http://mvnrepository.com/artifact/com.github.aglover/ahoy">mvnrepository.com</a> for how to include Ahoy! into your SBT build or other dependency management tool like Ivy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch in a box]]></title>
    <link href="http://thediscoblog.com/blog/2013/11/25/elasticsearch-in-a-box/"/>
    <updated>2013-11-25T13:42:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/11/25/elasticsearch-in-a-box</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/esbox.jpg">Are you looking to get going with <a href="http://thediscoblog.com/blog/categories/elasticsearch/">Elasticsearch</a> as quickly as possible without having to worry about <a href="http://thediscoblog.com/blog/2013/05/17/elasticsearch-on-ec2-in-less-than-60-seconds/">installing Java or Elasticsearch</a> itself? Are you looking for a repeatable and automated mechanism for bringing up Elasticsearch instances for developmental and or testing purposes? While there's certainly a number of <a href="http://www.elasticsearch.org/">Elasticsearch</a>-as-a-platform service providers out there, there's one other option: use <a href="https://github.com/aglover/coffer">Elasticsearch-in-a-box</a>.</p>

<p>Elasticsearch-in-a-box is a freely available <a href="http://www.vagrantbox.es/">Vagrant base box</a>. What that means is that you can quickly fire up and tear down an Elasticsearch environment with <a href="http://docs.vagrantup.com/v2/getting-started/">simple commands</a> like <code>vagrant up</code> and <code>vagrant destroy</code>.</p>

<!-- more -->


<p>In order to use Elasticsearch-in-a-box, you first need to have <a href="http://docs.vagrantup.com/v2/installation/">Vagrant</a> and <a href="https://www.virtualbox.org/">VirtualBox</a> installed. These two installations couldn't be any easier. To install <a href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/">Vagrant</a>, simply go to the downloads page and pick your target distribution. Vagrant provisions machines on top of virtual machine providers like VMWare, <a href="http://thediscoblog.com/blog/categories/aws/">AWS</a>, and VirtualBox. VirtualBox is free and easy to install -- like Vagrant, simply <a href="https://www.virtualbox.org/wiki/Downloads">go to the downloads section</a> and pick your target platform.</p>

<p>Once you have both Vagrant and VirtualBox installed, you are two steps away from Elasticsearch-ing.</p>

<p>First, you need to add and initialize the Elasticsearch-in-a-box <a href="http://docs.vagrantup.com/v2/boxes.html">template</a>. Go ahead and create a directory, like <code>/projects/esinabox</code>, change directories into it and execute this command:</p>

<p><code>bash This command will create a Vagrant definition named esinabox from the downloaded template
vagrant box add esinabox https://s3.amazonaws.com/coffers/esinabox.box
</code></p>

<p>This command will download the Elasticsearch-in-a-box template. Once that completes (it'll take a few moments depending on your connection), execute this command:</p>

<p><code>bash Vagrant init will create a VagrantFile
vagrant init 'esinabox'
</code></p>

<p>This command will create a <code>VagrantFile</code>, which you can use to customize the Elasticsearch-in-a-box instance. By default, you shouldn't need to do much, however, you can map network ports, install additional software via <a href="http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps/">Bash</a>, Chef, and Puppet at your discretion.</p>

<p>Next, fire up Elasticsearch-in-a-box like so:</p>

<p><code>bash Starting up Elasticsearch-in-a-box
vagrant up
</code></p>

<p>Now that Elasticsearch-in-a-box is running locally on your machine, you can open up a new terminal and execute RESTful commands like normal because Elasticsearch is running on same ports: 9200 &amp; 9300. So go ahead and execute some queries, like so:</p>

<p><code>bash Elasticsearch is up an running!
curl -XGET 'http://localhost:9200/_status?pretty=true'
</code></p>

<p>And when you are done, go ahead and tear down the instance like so:</p>

<p><code>bash Destroying a VM instance
vagrant destroy -f
</code></p>

<p>Wasn't that easy? The Elasticsearch-in-a-box Vagrant template was built using <a href="https://github.com/jedi4ever/veewee">Veewee</a>. The base box is 64-bit <a href="http://www.ubuntu.com/index_asus.html">Ubuntu 12.04</a> with Oracle's <a href="http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps/">Java 7</a> and <a href="http://www.elasticsearch.org/download/">Elasticsearch version 0.90.7</a>.</p>

<p>If you're looking for a quick and easy way to automatically provision Elasticsearch, then look no further and give <a href="https://github.com/aglover/coffer">Elasticsearch-in-a-box</a> a try!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review: Instant Mockito]]></title>
    <link href="http://thediscoblog.com/blog/2013/11/22/book-review-instant-mockito/"/>
    <updated>2013-11-22T13:33:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/11/22/book-review-instant-mockito</id>
    <content type="html"><![CDATA[<p>Recently, the good folks over at <a href="http://www.packtpub.com/">Packt Publishing</a> gave me a copy of their newly published <a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a>, by <a href="http://toomuchcoding.blogspot.com/">Marcin Grzejszczak</a>. Packt's <a href="http://www.packtpub.com/books/instant">Instant series</a> are really enjoyable. The premise of these books is that they're short and sweet. They're slightly more than a tutorial; they get you up and running quickly while throwing in a few more facets that go beyond the typical tutorial.</p>

<!-- more -->


<p></p>

<iframe style="float: right; margin-left: 1.5em; height:260px; width:150px;" src="http://rcm-na.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=thdibl-20&o=1&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00ESX15M2" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p><a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a> is a quick read at 92 pages; what's more, Marcin does a great job of keeping a consistent example domain alive throughout the entire book. The big picture is how to use <a href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/">Mockito</a> with <a href="http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer/">JUnit</a>, testing a fictitious restaurant ordering system.</p>

<p>The format of Packt's Instant books are all similar — the first part is a quick "up and running" that essentially encapsulates the basic tutorial you can find on a project's home page. The meat of an Instant book comes next, where the author dives into a number of features they feel are important to grasp a particular subject.</p>

<p>In the case of <a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book">Marcin's book</a>, he elaborates on 8 key Mockito subjects:</p>

<ul>
<li>Performing argument matching</li>
<li>Stubbing multiple calls</li>
<li>Working with void methods and thrown exceptions</li>
<li>Stubbing with a custom answer</li>
<li>Verifying behavior (including argument capturing, verifying call order, and working with asynchronous code)</li>
<li>Doing partial mocking (spying)</li>
<li>Reducing boilerplate code with annotations</li>
<li>Taking advantage of advanced mocks configuration</li>
</ul>


<p>Again, each subject expands upon a waiter-taking-an-order domain. As this is a book focusing on Mockito, the mocking aspects are straightforward — this isn't a book on how to test poorly written code, for example, so the code under test in this case uses dependency injection. This makes it easy to grasp Mockito subjects without having to delve into the intricacies of terrible code (ironically, I often times find myself employing Mockito when dealing with poorly written code).</p>

<p>Speaking of poorly written code: the only thing I did not particularly enjoy about the book was the formatting of the code. Code formatting has always been problematic in books, however, many publishers have figured out how to properly convey code (in particular, <a href="http://www.oreilly.com/">O'Reilly</a> books do a good job).</p>

<p>In the case of <a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a>, the code examples (at least reading the epub version on my iPad) have such narrow margins that each logical line of code is often broken into 3 or more lines (and dashes are used to signify a line break). While it certainly doesn't render the code unreadable, it makes instant code comprehension challenging. I found myself having to read through each code example multiple times just to get the basic idea.</p>

<p>Code formatting aside, <a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book">Marcin's book was an easy read</a> and the 8 features he feels every Mockito user should know are well explained.  As a user of Mockito, I couldn't agree more with the relevance of these features. If you enjoy quick reads, want to learn the basics of mocking in JUnit with Mockito, and you can put up with inadequate code formatting, then go ahead and give <a href="http://www.amazon.com/gp/product/B00ESX15M2/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00ESX15M2&amp;linkCode=as2&amp;tag=thdibl-20"><em>Instant Mockito</em></a> a read!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Provisioning Ubuntu with Java in 3 steps]]></title>
    <link href="http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps/"/>
    <updated>2013-11-18T17:34:00-08:00</updated>
    <id>http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/ubuntu.png"> <a href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/">As I've written about before</a>, <a href="http://www.vagrantup.com/">Vagrant</a> is handy tool for creating <a href="http://www.vagrantbox.es/">localized VMs</a>. It's a lot like firing up <a href="http://thediscoblog.com/blog/categories/aws/">EC2</a> images, but, for the most part, things are localized (you can, by the way, use Vagrant to <a href="https://github.com/mitchellh/vagrant-aws">fire up EC2 images</a>). If you've ever used VMWare before, its the same thing, except Vagrant is free. You can create VMs of various operating systems, fire them up, and tear them down all with ease.</p>

<p>Vagrant plays nicely with hip DevOps frameworks like <a href="http://www.opscode.com/chef/">Chef</a> and <a href="http://puppetlabs.com/">Puppet</a> and if your installations require a number of components, then these tools are defiantly the way to go. Sometimes, however, a simple Bash script is good enough as in the case for auto-installing some base component, like <a href="http://thediscoblog.com/blog/categories/java/">Java</a>, <a href="http://thediscoblog.com/blog/categories/node/">Node.js</a> or <a href="http://thediscoblog.com/blog/categories/ruby/">Ruby</a>.</p>

<p>Using Vagrant's configuration file, aptly dubbed <code>Vagrantfile</code>, you can instruct a VM instance to run a series of steps -- these steps can be simple shell scripts, Chef cookbooks, or the Puppet equivalent.</p>

<!-- more -->


<p>Accordingly, the first step to provision an Ubuntu box with Java is to initialize a 64-bit <a href="http://thediscoblog.com/blog/categories/linux/">Ubuntu</a> 12.04 LTS (<a href="https://wiki.ubuntu.com/PrecisePangolin">Precise Pangolin</a>) instance. You can do this via the <code>vagrant init</code> command like so:</p>

<p><code>bash Initializing a Vagrant box
$&gt; vagrant init ubuntu.lts.64 http://files.vagrantup.com/precise64.box
</code></p>

<p>This creates a <code>Vagrantfile</code> in the directory where you ran the command and creates a named VM (i.e. "ubuntu.lts.64") that is based off of Ubuntu 12.04 LTS.</p>

<p>Base Ubuntu installations do not come with Java; if you'd like to install a particular JDK, say Oracle's JDK 7, you can leverage <a href="https://github.com/aglover/ubuntu-equip">ubuntu-equip</a>, which is a series of Bash scripts that install various components like Java, Node.js, MongoDB, Redis, Ruby, etc.</p>

<p>Thus, for step 2, open up the newly created <code>Vagrantfile</code> and you should see two lines like so:</p>

<p>``` ruby A basic VagrantFile contains the box and box_url attributes
config.vm.box = 'ubuntu.lts.64'</p>

<h1>a few comments...</h1>

<p>config.vm.box_url = 'http://files.vagrantup.com/precise64.box'
```</p>

<p>After the <code>vm.box_url</code> declaration, insert the following line:</p>

<p><code>ruby Installing Java
config.vm.provision :shell, inline: 'wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_java7_64.sh &amp;&amp; bash equip_java7_64.sh'
</code></p>

<p>This command instructs the instance to run an inline Bash command once it is up and running, which in this case auto-installs Oracle's Java 7 JDK (see the <a href="https://github.com/aglover/ubuntu-equip">ubuntu-equip</a> project for more information).</p>

<p>Save your <code>VagrantFile</code> and then, for step 3, run the following command in the same directory:</p>

<p><code>bash Firing up a new VM
$&gt; vagrant up
</code></p>

<p>If this is the first time firing up this particular VM, you should see some text indicating that a particular box is being downloaded. Once the download is complete, the instance will boot up and subsequently invoke the inline provision command that kicks off the installation of Java.</p>

<p>If all goes well, you should see a lot of text scroll by ending with:</p>

<p><code>bash Java is installed!
java version "1.7.0_25"
Java(TM) SE Runtime Environment (build 1.7.0_25-b15)
Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)
</code></p>

<p>And that's it. To use the VM, <a href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/">simply SSH to it</a>. Go ahead and type <code>java -version</code> just to convince yourself. Go ahead, I'll wait for you...there, are you happy now?  Wasn't that easy? Provisioning Ubuntu VMs with Vagrant couldn't be any easier with <a href="https://github.com/aglover/ubuntu-equip">ubuntu-equip</a>, dig it?</p>
]]></content>
  </entry>
  
</feed>
