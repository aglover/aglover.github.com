<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Disco Blog]]></title>
  <link href="http://aglover.github.com/atom.xml" rel="self"/>
  <link href="http://aglover.github.com/"/>
  <updated>2012-09-01T11:25:45-04:00</updated>
  <id>http://aglover.github.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cost and the Great Mobile App Debate]]></title>
    <link href="http://aglover.github.com/blog/2012/09/01/cost-and-the-great-mobile-app-debate/"/>
    <updated>2012-09-01T11:07:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/01/cost-and-the-great-mobile-app-debate</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/HTML5-logo.svg/200px-HTML5-logo.svg.png"> The Great Mobile App Debate rages on; in fact, it seems of late, the debate has been heating up <em>dramatically</em>. And interestingly enough, some interesting people are joining this lively discussion including <a href="http://martinfowler.com/">Martin Fowler</a>. In his presentation dubbed &#8217;<a href="http://martinfowler.com/articles/multiMobile/">Developing Software for Multiple Devices</a>&#8217;, Martin makes the case for <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a> citing the reduced cost of building a single platform app as opposed to building an app for each platform. What&#8217;s more, he notes that the option to build an app via some cross-platform framework (presumably he&#8217;s talking about <a href="http://thinkmobile.appcelerator.com/blog/bid/211263/The-Great-Mobile-App-Debate-Native-vs-HTML5">Appcelerator</a> or the <a href="http://xamarin.com/">Xamarin</a>&#8217;s of the world) isn&#8217;t viable. He invokes memories from the early days of desktop apps:</p>

<blockquote><p>By applying the lessons of history we can infer that cross-platform toolkits will not be a viable solution to the multitude of mobile platforms.</p><footer><strong>Martin Fowler</strong> <cite><a href='http://martinfowler.com/articles/multiMobile/#desktop-history'>Developing Software for Multiple Devices</a></cite></footer></blockquote>


<p>And thus <a href="http://martinfowler.com/articles/multiMobile/#uncanny">ties this direction</a> into a potential result of building apps that suffer from &#8221;<a href="http://en.wikipedia.org/wiki/Uncanny_valley">The Uncanny Valley</a>&#8221; (i.e. &#8220;slight imperfections of an almost-native user interface cause a disproportionate negative response for the user&#8221;).</p>

<p>This analogy, however, isn&#8217;t necessarily correct. If you invoke memories of, say, Java and think back to AWT or Swing and the resulting, almost always, underwhelming UI/UX, then you&#8217;ve got a point. But the UIs of say, Xamarin are 100% native (which is the polar opposite of Swing!)&#8211; there is no <a href="http://martinfowler.com/articles/multiMobile/#frankenstein">Frankenstein-ness</a> here. There is no mimicking going on &#8211; a single code base is compiled <em>natively</em> into the underlying platform&#8217;s UI. All you have to do is take a look at a sample application built using <a href="http://www.coronalabs.com/products/corona-sdk/">Corona</a> and you&#8217;ll realize that at this point, the Uncanny Valley argument for cross-platform frameworks is <a href="http://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt">FUD</a>.</p>

<p>Which leads full circle back to the underlying argument for HTML5: cost. A cross-platform framework that produces a stellar app with exceptional UX <em>is cost effective</em>! You potentially build one app for multiple devices and it meets the terrifically high standards that consumers demand of a mobile app. And this is one thing that is often not met with pure play mobile web apps: they are not yet at parity with native-ness. More often than not, I find myself looking at <a href="http://wtfmobileweb.com/">Frankenstein mobile web apps</a>.</p>

<p>This isn&#8217;t to say HTML5 isn&#8217;t worth consideration. There are certainly apps that have been built as pure play web apps and they are terrific. The point of the discussion shouldn&#8217;t focus on HTML5 versus Native versus Hybrid. It should instead focus on what you&#8217;re trying to build. If you want to build a fantastic interactive app that wows users (think something like <a href="http://flipboard.com/">Flipboard</a>) then you have a different line of thinking to pursue. If your goal is to build an information app that conveys data then UI/UX could be secondary and thus, an HTML5 option might just meet your needs.</p>

<p>The Great Mobile App Debate shows no sign of abating anytime soon. HTML5 offers a plethora of promises for awesomeness. Someday this might be the case; however, HTML5 isn&#8217;t an app development silver bullet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling Mongo documents with Mongoose]]></title>
    <link href="http://aglover.github.com/blog/2012/08/29/modeling-mongo-documents-with-mongoose/"/>
    <updated>2012-08-29T21:45:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/29/modeling-mongo-documents-with-mongoose</id>
    <content type="html"><![CDATA[<p>Without a doubt, one of the quickest ways to build an application that leverages <a href="http://www.mongodb.org/">MongoDB</a> is with Node. It&#8217;s as if the two platforms were made for each other; the sheer number of Node libraries available for dealing with Mongo is testimony to a vibrant, innovative community. Indeed, one of my favorite Mongo focused libraries these days is <a href="http://mongoosejs.com/">Mongoose</a>.</p>

<p>Briefly, Mongoose is an object modeling framework that makes it incredibly easy to model collections and ultimately work with intuitive objects that support a rich feature set. Like most things in Node, it couldn&#8217;t be any easier to get set up. Essentially, to use Mongoose, you&#8217;ll need to define <code>Schema</code> objects &#8211; these are your documents &#8211; either top level or even embedded.</p>

<p>For example, I&#8217;ve defined a <code>words</code> collection that contains documents (representing&#8230;words) that each contain an embedded collection of <code>definition</code> documents. A sample document looks like this:</p>

<figure class='code'><figcaption><span>Word Document</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">_id</span><span class="o">:</span> <span class="s2">&quot;4fd7c7ac8b5b27f21b000001&quot;</span><span class="p">,</span>    
</span><span class='line'>  <span class="nx">spelling</span><span class="o">:</span> <span class="s2">&quot;drivel&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">synonyms</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;garbage&quot;</span><span class="p">,</span> <span class="s2">&quot;dribble&quot;</span><span class="p">,</span> <span class="s2">&quot;drool&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">definitions</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">part_of_speech</span><span class="o">:</span> <span class="s2">&quot;noun&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">definition</span><span class="o">:</span><span class="s2">&quot;saliva flowing from the mouth, or mucus from the nose; slaver.&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">part_of_speech</span><span class="o">:</span> <span class="s2">&quot;noun&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">definition</span><span class="o">:</span><span class="s2">&quot;childish, silly, or meaningless talk or thinking; nonsense; twaddle.&quot;</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From an document modeling standpoint, I&#8217;d like to work with a <code>Word</code> object that contains a list of <code>Definition</code> objects and a number of related attributes (i.e. synonyms, parts of speech, etc). To model this relationship with Mongoose, I&#8217;ll need to define two <code>Schema</code> types and I&#8217;ll start with the simplest:</p>

<figure class='code'><figcaption><span>Definition Schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Definition</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span> <span class="s1">&#39;definition&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">part_of_speech</span> <span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="kr">enum</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;adjective&#39;</span><span class="p">,</span> <span class="s1">&#39;noun&#39;</span><span class="p">,</span> <span class="s1">&#39;verb&#39;</span><span class="p">,</span> <span class="s1">&#39;adverb&#39;</span><span class="p">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">definition</span> <span class="o">:</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, a <code>Definition</code> is simple &#8211; the <code>part_of_speech</code> attribute is an enumerated <code>String</code> that&#8217;s required; what&#8217;s more, the <code>definition</code> attribute is also a required <code>String</code>.</p>

<p>Next, I&#8217;ll define a <code>Word</code>:</p>

<figure class='code'><figcaption><span>Word Schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Word</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span> <span class="s1">&#39;word&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">spelling</span> <span class="o">:</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">required</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">lowercase</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span>
</span><span class='line'>  <span class="nx">definitions</span> <span class="o">:</span> <span class="p">[</span><span class="nx">Definition</span><span class="p">.</span><span class="nx">schema</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">synonyms</span> <span class="o">:</span> <span class="p">[{</span> <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">lowercase</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}]</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>As you can see, a <code>Word</code> instance embeds a collection of <code>Definition</code>s. Here I&#8217;m also demonstrating the usage of <code>lowercase</code> and the index <code>unique</code> placed on the <code>spelling</code> attribute.</p>

<p>To create a <code>Word</code> instance and save the corresponding document couldn&#8217;t be easier. Mongo array&#8217;s leverage the <code>push</code> command and Mongoose follows this pattern to the tee.</p>

<figure class='code'><figcaption><span>saving with Mongoose</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">word</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Word</span><span class="p">({</span><span class="nx">spelling</span> <span class="o">:</span> <span class="s1">&#39;loquacious&#39;</span><span class="p">})</span>
</span><span class='line'><span class="nx">word</span><span class="p">.</span><span class="nx">synonyms</span><span class="p">.</span><span class="nx">push</span> <span class="s1">&#39;verbose&#39;</span>
</span><span class='line'><span class="nx">word</span><span class="p">.</span><span class="nx">definitions</span><span class="p">.</span><span class="nx">push</span> <span class="p">{</span><span class="nx">definition</span><span class="o">:</span> <span class="s1">&#39;talking or tending to talk much or freely; talkative; \</span>
</span><span class='line'><span class="s1">  chattering; babbling; garrulous.&#39;</span><span class="p">,</span> <span class="nx">part_of_speech</span><span class="o">:</span> <span class="s1">&#39;adjective&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="nx">word</span><span class="p">.</span><span class="nx">save</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finding a word is easy too:</p>

<figure class='code'><figcaption><span>findOne in action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span> <span class="s1">&#39;findOne should return one&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">models</span><span class="p">.</span><span class="nx">Word</span><span class="p">.</span><span class="nx">findOne</span> <span class="nx">spelling</span><span class="o">:</span><span class="s1">&#39;nefarious&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nb">document</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">spelling</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="s1">&#39;nefarious&#39;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">definitions</span><span class="p">.</span><span class="nx">length</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">synonyms</span><span class="p">.</span><span class="nx">length</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="mi">2</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">definitions</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s1">&#39;part_of_speech&#39;</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span> <span class="s1">&#39;adjective&#39;</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the above code is a <a href="http://visionmedia.github.com/mocha/">Mocha</a> test case (which uses <a href="https://github.com/visionmedia/should.js">should</a> for assertions) that demonstrates Mongoose&#8217;s <code>findOne</code>.</p>

<p>You can find the code for these examples and more at my Github repo dubbed <a href="https://github.com/aglover/exegesis">Exegesis</a> and while you&#8217;re at it, check out the <a href="http://www.ibm.com/developerworks/training/kp/j-kp-node/index.html">developerWorks videos I did for Node</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis replication: couldn't be any easier]]></title>
    <link href="http://aglover.github.com/blog/2012/08/29/redis-replication-couldnt-be-any-easier/"/>
    <updated>2012-08-29T13:23:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/29/redis-replication-couldnt-be-any-easier</id>
    <content type="html"><![CDATA[<p><a href="http://redis.io">Redis</a> supports <a href="http://redis.io/topics/replication">master-slave replication</a> and it&#8217;s extremely easy to setup.  And the beauty of setting up replication is that all you have to do is fire up a slave instance and have it point to some other Redis instance (which then becomes the master node).</p>

<p>Accordingly, open up the <code>redis.conf</code> file for an intended secondary (or slave node) and find the section containing a <code>slaveof</code> phrase. Uncomment it and add the IP address &amp; port of the master node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>slaveof ec2-23-21-a8-21.compute-1.amazonaws.com 6379</span></code></pre></td></tr></table></div></figure>


<p>Then cycle the secondary node (so the <code>redis.conf</code> file is re-read). That&#8217;s it.</p>

<p>When you fire up the slave node and run the <code>INFO</code> command, you&#8217;ll see a few new items, namely:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role:slave
</span><span class='line'>master_host:ec2-23-21-a8-21.compute-1.amazonaws.com
</span><span class='line'>master_port:6379
</span><span class='line'>master_link_status:down
</span><span class='line'>master_last_io_seconds_ago:-1
</span><span class='line'>master_sync_in_progress:1
</span><span class='line'>master_sync_left_bytes:-1
</span><span class='line'>master_sync_last_io_seconds_ago:0
</span><span class='line'>master_link_down_since_seconds:14</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll note that it takes a few moments for a data sync to occur, thus, after a few seconds, rerun the <code>INFO</code> command to see:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role:slave
</span><span class='line'>master_host:ec2-23-21-a8-21.compute-1.amazonaws.com
</span><span class='line'>master_port:6379
</span><span class='line'>master_link_status:up
</span><span class='line'>master_last_io_seconds_ago:6
</span><span class='line'>master_sync_in_progress:0</span></code></pre></td></tr></table></div></figure>


<p>Running the same <code>INFO</code> command on the master node will yield a new field as well:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>role:master
</span><span class='line'>slave0:10.255.3.143,34647,online</span></code></pre></td></tr></table></div></figure>


<p>A master node can have 0..N slaves (hence the naming scheme of <code>slaveN</code>); what&#8217;s more, slaves can become a master by commenting out or unsetting the <code>SLAVEOF</code> command in their corresponding configuration.</p>

<p>It should be noted that Redis does support configuration changes <em>at runtime</em> via the <code>CONFIG SET</code> <a href="http://redis.io/commands/config-set">command</a>, which means you don&#8217;t even need to cycle a particular node to synchronize it with a master.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leaner JQuery with Zepto]]></title>
    <link href="http://aglover.github.com/blog/2012/08/28/leaner-jquery-with-zepto/"/>
    <updated>2012-08-28T13:04:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/28/leaner-jquery-with-zepto</id>
    <content type="html"><![CDATA[<p>In a recent conversation with my friend <a href="http://jonathanstark.com/">Jonathan Stark</a> we talked about how much has changed in mobile web development since <a href="http://www.ibm.com/developerworks/podcast/glover-stark-112911/index.html">he and I chatted about cross-platform mobile development</a> in November of 2011. Of particular interest was how much adoption mobile web sites have achieved in less than a year &#8211; yet, the adoption hasn&#8217;t always been smooth. In fact, he pointed out a decidedly humorous site dubbed <a href="http://wtfmobileweb.com/">WTF Mobile Web</a>, which aims to educate the mobile web community via examples.</p>

<p>One of the entries you can find on wtfmobileweb.com is an interesting Tweet, which I happened to see on <a href="https://twitter.com/jonathanstark">Jonthan</a>&#8217;s timeline. <a href="https://twitter.com/@philhawksworth">@philhawksworth</a> notes that <a href="http://grolsch.com/">grolsch.com</a> isn&#8217;t particularly mobile-savvy:</p>

<blockquote><p>Dear web developers of the world. Can we stop this silliness before somebody gets hurt?!</p><footer><strong>@philhawksworth</strong> <cite><a href='https://twitter.com/philhawksworth/status/223805766161797121'>twitter.com/philhawksworth/&hellip;</a></cite></footer></blockquote>


<p>If you look closely in the image referenced by the tweet (or on wtfmobileweb.com), you&#8217;ll see that slightly over 24MB of content is downloaded over the course of 388 requests. And that, presumably, a lot of that content is coming from everyone&#8217;s friend <a href="http://jquery.com/">JQuery</a>.</p>

<p>JQuery is an excellent library; however, it just <em>might</em> contain a lot of unneeded code. And in the case of the mobile web, that translates into longer download times, which ultimately might yield a subpar user experience. Accordingly, if you still need a majority of JQuery&#8217;s features but not its weight, you might want to give <a href="http://zeptojs.com/">Zepto</a> a look.</p>

<p>As Zepto&#8217;s website puts it:</p>

<blockquote><p>Zepto is a minimalist JavaScript library for modern browsers with a largely jQuery-compatible API. If you use jQuery, you already know how to use Zepto.</p></blockquote>


<p>Indeed, JQuery&#8217;s <code>$</code> is there in all its glory &#8211; only just <em>slimmer</em>. I was able to substitute in Zepto for JQuery in a <a href="https://github.com/aglover/caprice">PhoneGap</a> project without any issues. Give it a shot &#8211; unless you like having your website end up on wtfmobileweb.com!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala &amp; Typesafe: exciting. Not disruptive]]></title>
    <link href="http://aglover.github.com/blog/2012/08/27/scala-and-typesafe-exciting-not-disruptive/"/>
    <updated>2012-08-27T08:35:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/08/27/scala-and-typesafe-exciting-not-disruptive</id>
    <content type="html"><![CDATA[<p>I recently read an article on <a href="http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework">TheServerSide.com</a> where the author muses about the possible disruptive nature of Typesafe&#8217;s <a href="http://typesafe.com/company/news/24499">recent Series B cash infusion of $14M</a>:</p>

<blockquote><p>It&#8217;s time for a disruptive event that will change how programs are designed, and how applications target the Java Virtual Machine.</p><footer><strong>Cameron McKenzie</strong> <cite><a href='http://www.theserverside.com/feature/Disruptive-forces-in-Java-Is-Scala-the-new-Spring-framework'>Disruptive Forces in Java: Is Scala the New Spring Framework?</a></cite></footer></blockquote>


<p>Indeed, he likens the event to <a href="http://www.springsource.com/">SpringSource</a> and its meteoric rise to prominence in a time when web development was a real pain-in-the-neck. Think <a href="http://struts.apache.org/">Struts</a> (which, impressively, is still putting out releases) along with <a href="http://www.oracle.com/technetwork/java/javaee/ejb/index.html">EJB</a> and you have a perfect storm for a lightweight revolution.</p>

<p>Unfortunately for the author&#8217;s comparison, the world of web development these days is innovating at a breakneck pace. And this innovation isn&#8217;t necessarily found in Typesafe&#8217;s <a href="http://typesafe.com/stack">Typesafe Stack</a>. I don&#8217;t discount its relevance or applicability &#8211; Typesafe Stack is exciting: witness <a href="http://www.theregister.co.uk/2009/04/01/twitter_on_scala/">Twitter&#8217;s move to Scala</a> a few years ago.  It is not, however, disruptive.</p>

<p>Disruptive is something that completely changes the game. When Spring was unleashed, building Java apps became easier and consequently, you could produce them quicker. That same disruptiveness is happening now in a different community: <a href="http://nodejs.org/">Node</a>. Specifically, frameworks like <a href="http://www.meteor.com/">Meteor</a> and <a href="http://derbyjs.com/">Derby</a>, which are built using Node along with <a href="http://socket.io/">Socket.io</a>, are on the cusp of <em>revolutionizing</em> the web. These nascent frameworks are blazing new trails with respect to the realtime web &#8211; you can build an extremely interactive application in a fraction of the code compared to something like <a href="http://www.playframework.org/">Play</a>. And you can do it before the download and installation of Play completes.</p>

<p>Indeed, the excitement around these frameworks is attracting serious attention. Meteor&#8217;s recent announcement that it took <a href="http://gigaom.com/cloud/scoop-meteor-gets-9m-in-funding/">$9M in funding</a> is most likely a harbinger of things to come with smart people making calculated bets in realtime, rapidly built, and rapidly deployed apps.</p>

<p>Combine the ideas of these innovative frameworks with <a href="http://vertx.io/">vert.x</a>, which is an &#8220;event driven application framework that runs on the JVM&#8221; (Node has made <em>event driven</em> a key phrase) that allows you to write web apps in &#8220;Ruby, Java, Groovy, JavaScript and Python&#8221; and you have a legitimate shot a disruption that&#8217;ll &#8220;change how programs are designed, and how applications target the Java Virtual Machine.&#8221;</p>

<p>Typesafe Stack is exciting. It&#8217;s a safe choice for traditional style web development. But the forces changing web development these days are rapidly converging on the Node community. It&#8217;s there that you&#8217;ll find disruption.</p>
]]></content>
  </entry>
  
</feed>
