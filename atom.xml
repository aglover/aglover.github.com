<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Disco Blog]]></title>
  <link href="http://thediscoblog.com/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2013-08-13T21:39:36-07:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Whiskered Node views]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/13/whiskered-node-views/"/>
    <updated>2013-08-13T12:00:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/13/whiskered-node-views</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/mustache_template.png">As we draw closer to the glorious month of <a href="http://us.movember.com/">Movember</a>, I find myself pondering the <a href="http://paularmstrong.github.io/node-templates/">myriad template engines</a> available for Node apps. The most popular is still probably <a href="http://jade-lang.com/">Jade</a> as its syntax is <a href="http://haml.info/">Haml</a>-like and results in quite clean views, lacking in HTMLish clutter.</p>

<p>While Jade is handy, it takes some time to get used to. Plus, if you find yourself working with a UI person who prefers to speak in HTML, you&#8217;ll find yourself translating between HTML and Jade (which isn&#8217;t that hard with web apps like <a href="http://html2jade.aaron-powell.com/">HTML2Jade</a>, but nevertheless involves an extra <em>translation</em> step).</p>

<!-- more -->


<p>There are other template engines that map more closely to pure HTML. <a href="http://mustache.github.io/">Mustache</a>, for instance, forgoes reducing HTML entirely and introduces <code>{}</code>&#8217;s (i.e. mustaches) as a substitution delimiter. Thus, you can take normal HTML files and add some <code>{}</code>&#8217;s to make pages dynamic.</p>

<p>In the world of Node, there are <a href="https://github.com/raycmorgan/Mu">a few</a> Mustache implementations. One of the more interesting ones that I&#8217;ve used is <a href="https://github.com/gsf/whiskers.js/">Whiskers</a>. Whiskers is fairly lightweight and doesn&#8217;t offer a lot of bells and whistles. As the project&#8217;s README states</p>

<blockquote><p>Whiskers is focused on template readability. By limiting template logic, careful preparation of the context is encouraged, and the processing and formatting of data is kept separate from the design of the display.</p><footer><strong>https://github.com/gsf/whiskers.js/</strong> <cite><a href='https://github.com/gsf/whiskers.js/'>About Whiskers.js</a></cite></footer></blockquote>


<p>Accordingly, you can do variable substitution, conditional logic, and looping out-of-the-box easily. But that&#8217;s about all.</p>

<p>To get started with Whiskers, you&#8217;ll need to add it as a dependency to your project&#8217;s NPM file like so:</p>

<figure class='code'><figcaption><span>package.json NPM file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;whiskers&quot;</span> <span class="err">:</span> <span class="s2">&quot;latest&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, I&#8217;ll always be grabbing the latest version.</p>

<p>I prefer <a href="http://localhost:4000/blog/categories/coffeescript/">CoffeeScript</a> when writing Node apps; consequently, the code examples I show you will be in <a href="http://thediscoblog.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps/">CoffeeScript</a>. Accordingly, in my <code>App.coffee</code> file, I need to then require Whiskers:</p>

<figure class='code'><figcaption><span>Requiring whiskers in your Node app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">whiskers = </span><span class="nx">require</span> <span class="s">&#39;whiskers&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll need to configure Express to leverage Whiskers; luckily, Express makes plugging in alternate template engines quite easy.</p>

<figure class='code'><figcaption><span>Configuring a template engine with Express</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;view engine&#39;</span><span class="p">,</span> <span class="s">&#39;html&#39;</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">engine</span> <span class="s">&#39;html&#39;</span><span class="p">,</span> <span class="nx">whiskers</span><span class="p">.</span><span class="nx">__express</span>
</span></code></pre></td></tr></table></div></figure>


<p>This indicates that your template files will end in <code>.html</code> and that for those file types, use the Whiskers framework.</p>

<p>You can then render a Whiskers template like normal. For example, if I want to pass an <code>allWords</code> collection as the variable <code>words</code> to a template file dubbed <code>index.html</code>, I can do it like so:</p>

<figure class='code'><figcaption><span>Rending a view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">render</span> <span class="s">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nv">words: </span><span class="nx">allWords</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, <code>allWords</code> is an array full of <code>Word</code> classes.</p>

<p>Inside my <code>index.html</code> file, I can access the <code>words</code> variable inside a bracketed <code>for</code> loop like so:</p>

<figure class='code'><figcaption><span>Mustached HTML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  {for word in words}
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">data-role=</span><span class="s">&quot;page&quot;</span> <span class="na">id=</span><span class="s">&quot;page_{word.id}&quot;</span> <span class="na">data-theme=</span><span class="s">&#39;c&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">data-theme=</span><span class="s">&quot;g&quot;</span> <span class="na">data-role=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h3&gt;</span>
</span><span class='line'>            Overheard Word
</span><span class='line'>        <span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">data-role=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;center-wrapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>           <span class="nt">&lt;h2&gt;</span>{word.spelling} <span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>           <span class="nt">&lt;p&gt;&lt;em&gt;</span>{word.partOfSpeech}<span class="nt">&lt;/em&gt;</span> - {word.definition}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>           <span class="nt">&lt;p&gt;</span>&quot;{word.exampleSentence}&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  {/for}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note inside the <code>for</code> loop, I have access to a <code>word</code> instance. I can call properties on it as well. Note, with Whiskers, you can&#8217;t invoke methods on passed in objects. Only properties (i.e. <code>word.definition</code> isn&#8217;t a function).</p>

<p>Jade certainly produces more elegant, less verbose view code. But Jade&#8217;s whitespace delimiting coupled with the fact that basic HTML knowledge is near universal, make template frameworks like Whiskers, which permit normal HTML with <code>{}</code> delimiters appealing from time to time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Amazon Appstore's support of HTML5 matters]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters/"/>
    <updated>2013-08-07T21:09:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters</id>
    <content type="html"><![CDATA[<p><img class="right" src="https://images-na.ssl-images-amazon.com/images/G/01/mobile-apps/devportal2/content/sdk/images/webapps_icon-final-114._V379662584_.png">Today, Amazon announced that their <a href="http://www.amazon.com/mobile-apps/b?ie=UTF8&amp;node=2350149011">Appstore for Android</a> <a href="https://developer.amazon.com/post/Tx2HGWRGOW5YG8/Amazon-is-Now-Accepting-HTML5-Web-Apps-Making-it-Easy-for-You-to-Reach-Millions.html">now supports the submission of HTML5 apps</a>. This is a game changer for <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a> because now there is a direct channel to consumers.</p>

<p>As I wrote almost a year ago:</p>

<blockquote><p>software delivery on the mobile platform is, at least for the foreseeable future, firmly established via app stores. And app stores cater to native apps (100% native and/or hybrid) only. The average person will not look for useful apps via their device’s browser: that route is still a jungle. And, at this point, there is no viable pure play mobile web app delivery channel.</p><footer><strong>thediscoblog.com</strong> <cite><a href='http://thediscoblog.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results/'>Past Performance Is No Guarantee of Future Results</a></cite></footer></blockquote>


<p>Today, it&#8217;s still true that the most convenient mechanism  for app delivery on mobile devices (and increasingly desktops) is via various app stores. And until today, HTML5 apps were not included in these app stores (unless they were wrapped by some hybrid-web container like <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">PhoneGap</a>).</p>

<!-- more -->


<p>But now with Amazon&#8217;s announcement, <a href="http://thediscoblog.com/blog/categories/html5/">HTML5</a> apps <em>without any native container</em> can be submitted into their Appstore. What&#8217;s more, these apps can take advantage of monetization features like <a href="https://developer.amazon.com/sdk/webapps/iap/understanding.html">In-App purchasing</a> using Amazon&#8217;s API.</p>

<p>Now HTML5 apps have a direct channel to consumers along with an API to make HTML5 app developers money. HTML5 apps are now icon-ized and people don&#8217;t have to use a search engine to find them!</p>

<p>As <a href="https://developer.amazon.com/blog/author/Mike+Hines.html">Mike Hines</a> of Amazon puts it:</p>

<blockquote><p>Starting today, you can submit your web apps and mobile optimized web sites and have them merchandised alongside native apps on Amazon and Kindle Fire in nearly 200 countries worldwide, without any third-party software or doing any native app development.</p><footer><strong>https://developer.amazon.com/blog/</strong> <cite><a href='https://developer.amazon.com/post/Tx2HGWRGOW5YG8/Amazon-is-Now-Accepting-HTML5-Web-Apps-Making-it-Easy-for-You-to-Reach-Millions.html'>Amazon Is Now Accepting HTML5 Web Apps—Making It Easy for You to Reach Millions of Kindle Fire and Android Customers Worldwide</a></cite></footer></blockquote>


<p>This is big news for HTML5 developers. A direct channel to the masses and monetization APIs to boot &#8211; what more could you ask for? Standby folks because it&#8217;s about to get even more interesting, as I&#8217;m willing to bet that Google and Apple will follow suit in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes TDD requires a hammer]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer/"/>
    <updated>2013-08-04T11:08:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/hammerj.jpg">While there are myriad mocking libraries available for the Java platform, only a select few of these nifty frameworks is capable of mocking the non-mock-friendly modifiers of <code>static</code> and <code>final</code>. Static (or class) methods, while handy for factories, become a nuisance for a framework like <a href="https://code.google.com/p/mockito/">Mockito</a>, however, with the inclusion of <a href="https://code.google.com/p/powermock/">PowerMock</a>, you&#8217;ve got yourself a proverbial hammer.</p>

<p><a href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/">As I wrote about previously</a>, I had to deal with a 3rd party library that is used to integrate with a networked service. This library is essentially hardwired to interact with homebase, which naturally provides some challenges when trying to test ones code that relies on this library. Moreover, the said library contained a <code>static</code> method for creating instances of a specialized class, which, naturally, my code depended on.</p>

<!-- more -->


<p>PowerMock is made to work in concert with either <a href="http://easymock.org/">EasyMock</a> or <a href="https://code.google.com/p/powermock/wiki/MockitoUsage13">Mockito</a>; what&#8217;s more, it comes with a custom runner for inclusion in <a href="https://github.com/junit-team/junit">JUnit</a>. I&#8217;m going to show you how to use PowerMock with Mockito as I happen to find Mockito&#8217;s syntax much more fluent than EasyMock&#8217;s.</p>

<p>For starters, you&#8217;ll need to use two class level annotations &#8211; <code>@RunWith</code> for specifying the <code>PowerMockRunner</code> class (this is a JUnit annotation) and another dubbed <code>@PrepareForTest</code>, which takes the class with <code>static</code> methods you wish to mock. <code>@PrepareForTest</code> is provided by PowerMock.</p>

<p>In my case, the class containing a <code>static</code> method is named <code>QTP</code>, accordingly; my test class looks like this:</p>

<figure class='code'><figcaption><span>JUnit test class with class level annotations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">PowerMockRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@PrepareForTest</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CreateCommandTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCreateRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, in your test method, you use <code>PowerMokito</code>&#8217;s <code>mockStatic</code> method, which takes the class (again) with static methods you wish to mock.</p>

<figure class='code'><figcaption><span>JUnit test case using PowerMock & Mockito</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCreateRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">PowerMockito</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then mock a static method on the class you&#8217;ve been passing around to <code>mockStatic</code> and the <code>@PrepareForTest</code> annotation like you would normally do with Mockito. For instance, I can use the <code>when</code> method to specify what I want to happen when this static method is invoked.</p>

<figure class='code'><figcaption><span>Using normal Mockito actions for mocking</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCreateRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">PowerMockito</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">QTP</span> <span class="n">qtpThing</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">//normal Mockito mocking</span>
</span><span class='line'>  <span class="c1">//QTP.create is static</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;dm2q&quot;</span><span class="o">,</span> <span class="s">&quot;0C4F7501UDC8C1EB43B06C988&quot;</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//QTP.createRecord isn&#39;t static</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">.</span><span class="na">createRecord</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Tckt</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span><span class="na">thenReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">Long</span><span class="o">(</span><span class="mi">1000000L</span><span class="o">));</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, you can use <a href="http://metlos.wordpress.com/2012/09/14/the-dark-powers-of-powermock/">PowerMock</a> to ensure your mocked static method is actually invoked. The requirements here are a bit funky; that is, it requires you <em>first</em> specify how many times with one line of code and then you <em>actually call the static method</em>.</p>

<figure class='code'><figcaption><span>Verifying your mocked static method was invoked</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCreateRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="n">PowerMockito</span><span class="o">.</span><span class="na">verifyStatic</span><span class="o">(</span><span class="n">Mockito</span><span class="o">.</span><span class="na">times</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>  <span class="n">QTP</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;dm2q&quot;</span><span class="o">,</span> <span class="s">&quot;0C4F7501UDC8C1EB43B06C988&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah, that&#8217;s sorta confusing, I know.</p>

<p>Nevertheless, as most people in the world of Java figured out long ago, <a href="http://stackoverflow.com/questions/2671496/java-when-to-use-static-methods">static methods</a> are <a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/">somewhat difficult</a> when it <a href="http://blog.codecentric.de/en/2011/11/testing-and-mocking-of-static-methods-in-java/">comes to testing</a>. That is, while a method that conceptually has no state, at first glance, seems straightforward enough to test, the <a href="http://stackoverflow.com/questions/2472690/in-java-is-there-any-disadvantage-to-static-methods-on-a-class">issues arise</a> when that static method does something like hit a database or in my case, call a web service to a networked asset. There is no easy way to override such behavior (unless, of course, you pull out a hammer).</p>

<p>Static methods have a place. But when it comes to testing code, whether it be legacy or some 3rd party library, the <code>static</code> modifier requires a hammer and as I hope I&#8217;ve shown you, <a href="https://code.google.com/p/powermock/">PowerMock</a> is that hammer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imbibing the fluency of Mockito]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/"/>
    <updated>2013-08-01T15:37:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/Mockito.jpg">I recently found myself writing some code to integrate two disparate platforms. One of these systems is Java based and the other, while not written in Java, offers a Java API. I&#8217;ll call these systems Foo and Bar, respectively.</p>

<p>It became obvious before I had written a line of code, however, that testing the eventual adapter would require I explicitly mock the later system&#8217;s API (i.e. Foo&#8217;s) as all I had to go with was a jar file whose classes and methods made it clear they communicated with a live instance.</p>

<!-- more -->


<p></p>

<p>I spent a few cycles to see what&#8217;s new in the world of Java mocking and I was pleased to see that my old friend <a href="https://code.google.com/p/mockito/">Mockito</a> is still active and is indeed, still an <a href="http://www.javaworld.com/community/node/3772">excellent tool</a> for general purpose mocking. For the uninitiated, <a href="http://refcardz.dzone.com/refcardz/mockito">Mockito</a> is Java based mocking framework that:</p>

<blockquote><p>&#8230;tastes really good. It lets you write beautiful tests with [a] clean & simple API. Mockito doesn&#8217;t give you hangover because the tests are very readable and they produce clean verification errors.</p><footer><strong>Google code mockito project page</strong> <cite><a href='https://code.google.com/p/mockito/'>Why Drink It?</a></cite></footer></blockquote>


<p>Indeed, Mockito offers a <a href="https://code.google.com/p/easyb/wiki/UsingMockito">simple, fluent API</a> that allows you to precisely mock behaviors without a lot of fuss. For instance, the main facade to interface with Bar is via a <code>QTP</code> class that has methods like <code>logIn</code>, <code>logOut</code>, etc. Rather than relying on classes under test to actually invoke these methods, I can easily create mock instances of <code>QTP</code> with Mockito like so:</p>

<figure class='code'><figcaption><span>Mocking an instance of QTP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">QTP</span> <span class="n">qtpThing</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>mock</code> is a statically imported method from <code>org.mockito.Mockito</code>. With a mock instance, I can then dictate how I wish certain methods to behave, <em>provided I pass along this mocked instance to my classes under test</em>.</p>

<p>For example, the method <code>logIn</code> doesn&#8217;t return anything; in fact, one must invoke that method first and then call another method to generate a ticket (or token), which will be used on subsequent method invocations. Thus, the adapter that I&#8217;m writing will receive some input values (from Foo in the form of XML) and the adapter will return a ticket (in the form of an XML document as per Foo&#8217;s required XML schema).</p>

<p>Accordingly, the test this interaction, I need to do two things:</p>

<ul>
<li>ensure that the <code>logIn</code> method was invoked with specific parameters</li>
<li>mock the response of a valid ticket, via the <code>getTicket</code> method</li>
</ul>


<p>What&#8217;s more, I&#8217;d also like to verify that a <code>logIn</code> failure results in a particular interaction from within my adapter code. Therefore, I&#8217;ll need to mock out some exceptional behavior as well.</p>

<p>In the case of mocking out a particular method, you simply chain together a few methods; in my case, <code>when</code> and <code>thenReturn</code> do the trick like so:</p>

<figure class='code'><figcaption><span>Mocking the behavior of getTicket</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">.</span><span class="na">getTicket</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;test-ticket&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, when the <code>getTicket</code> method is invoked on my mock instance, the <code>String</code> &#8220;test-ticket&#8221; will be returned.</p>

<p>Next, to ensure that <code>logIn</code> was invoked with parameters obtained from an incoming XML document, I can use Mockito&#8217;s <code>verify</code> method.</p>

<figure class='code'><figcaption><span>Using Mockito&#8217;s verify to ensure proper interaction</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;some_value&quot;</span><span class="o">,</span> <span class="s">&quot;some_user_name&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the <code>verify</code> method checks that <code>logIn</code> is invoked one time and that three particular <code>String</code> values are passed in. If these expectations are not met, Mockito will throw an exception (and your corresponding test case will fail).</p>

<p>Thus, my test case for verifying my adapter is quite simple, yet highly readable.</p>

<figure class='code'><figcaption><span>JUnit test case for verifying logIn behavior</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testLoginRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">QTP</span> <span class="n">qtpThing</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">.</span><span class="na">getTicket</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;test-ticket&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AdapterRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AdapterRequest</span><span class="o">(</span><span class="n">XML</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;etc/test-login-req.xml&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">QbosAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QbosAdapter</span><span class="o">();</span>
</span><span class='line'>  <span class="n">adapter</span><span class="o">.</span><span class="na">setQtpInstance</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AdapterResponse</span> <span class="n">adapterResponse</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">performAction</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertNotNull</span><span class="o">(</span><span class="n">adapterResponse</span><span class="o">);</span>
</span><span class='line'>  <span class="n">verify</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;some_value&quot;</span><span class="o">,</span> <span class="s">&quot;some_user_name&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;test-ticket&quot;</span><span class="o">,</span> <span class="n">adapterResponse</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What if I need to simulate an exception thrown by the <code>QTP</code> object, ostensibly from an invalid parameter or incorrect credentials during a log in? Again, Mockito&#8217;s fluent API makes this a breeze.</p>

<p>In my case, I&#8217;d like the <code>logIn</code> method to throw one of the checked methods in its method signature named <code>UnknownQtpException</code>. You can do this via the <code>doThrow</code> and <code>when</code> methods.</p>

<figure class='code'><figcaption><span>Mocking out exceptions in Mockito</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">doThrow</span><span class="o">(</span><span class="k">new</span> <span class="n">UnknownQtpException</span><span class="o">()).</span><span class="na">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, I&#8217;m explicitly declaring that if the first parameter to the <code>logIn</code> command is blank, then my mocked <code>QTP</code> instance should throw <code>UnknownQtpException</code>. Putting everything together yields the following test case:</p>

<figure class='code'><figcaption><span>Testing exceptional circumstances with JUnit & Mockito</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFailureLoginRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">QTP</span> <span class="n">qtpThing</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">doThrow</span><span class="o">(</span><span class="k">new</span> <span class="n">UnknownQtpException</span><span class="o">()).</span><span class="na">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">XML</span> <span class="n">xml</span> <span class="o">=</span> <span class="n">XML</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;etc/test-login-req-err.xml&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AdapterRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AdapterRequest</span><span class="o">(</span><span class="n">xml</span><span class="o">);</span>
</span><span class='line'>  <span class="n">QbosAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QbosAdapter</span><span class="o">();</span>
</span><span class='line'>  <span class="n">adapter</span><span class="o">.</span><span class="na">setQtpInstance</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AdapterResponse</span> <span class="n">adapterResponse</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">performAction</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertNotNull</span><span class="o">(</span><span class="n">adapterResponse</span><span class="o">);</span>
</span><span class='line'>  <span class="n">verify</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;FAILURE&quot;</span><span class="o">,</span> <span class="n">adapterResponse</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The beauty, of course, is that my test cases effectively test my adapter code without relying on a third party system (in this case, Bar). This is naturally a time honored testing technique employable in any language with a mocking framework worth its salt!</p>

<p>If you find yourself writing some integration code in Java, then I can&#8217;t recommend Mockito enough. <a href="http://www.javaworld.com/community/node/3772">Mockito&#8217;s API</a> is quite straightforward and it makes tests easy to comprehend. I mean, it makes tests easy to imbibe.  Dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swipe gestures in jQuery Mobile apps]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/30/adding-swipe-gestures-to-jquery-mobile-apps/"/>
    <updated>2013-07-30T12:52:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/30/adding-swipe-gestures-to-jquery-mobile-apps</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/swipe-right.png">I find that <a href="http://thediscoblog.com/blog/2013/04/07/painless-android-swipe-detection/">swipe gestures</a> for navigating between screens in a mobile app <a href="http://thediscoblog.com/blog/2013/07/01/mobile-for-the-masses-words-and-gestures-with-overheard-word/">quite nice</a>. <a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Early on</a> in my mobile development journey, I found myself instinctively adding navigation buttons, but quickly found them cumbersome for users to tap; plus, those buttons took up precious screen real estate! Gestures, on the other hand, free up screen space by removing needless buttons and give users a more interactive experience.</p>

<p>Implementing right and left swipes in an <a href="http://jquerymobile.com/">jQuery Mobile</a> app is fairly straightforward, but there are a few gotchas that I was able to piece together via multiple <a href="http://stackoverflow.com/questions/7533772/how-to-swipe-between-several-jquery-mobile-pages">stackoverflow threads</a>, blogs, and finally <a href="http://api.jquerymobile.com/">jQuery Mobile&#8217;s own documentation</a>.</p>

<!-- more -->


<p>In a jQuery Mobile app, you <a href="http://the-jquerymobile-tutorial.org/jquery-mobile-tutorial-CH02.php">define pages</a> within <code>div</code> tags that represent a UI screen &#8211; you can then declare transitions between pages well &#8211; slide, flip, etc.  The key aspect with swiping between page <code>div</code>s is the selector for them, which is <code>div[data-role='page']</code>.</p>

<p>Once you have a handle to that <code>div</code>, you can proceed forward with a left swipe via jQuery&#8217;s <a href="http://api.jquery.com/next/"><code>next</code></a> function. Conversely, swiping right with the intent of going back is facilitated by finding the previous matching <code>div[data-role='page']</code> via jQuery&#8217;s <a href="http://api.jquery.com/prev/"><code>prev</code></a> function.</p>

<p>Also note, going backwards via a swipe requires that you <em>reverse</em> the slide transition, otherwise it looks misleading to the user (i.e. the transition is from left to right rather than the other way around!).</p>

<p>Accordingly, the JavaScript for swipe gestures should be placed within a <a href="http://jquerymobile.com/demos/1.2.0/docs/api/events.html"><code>pageinit</code> event</a> like so:</p>

<figure class='code'><figcaption><span>Enabling swipe between page divs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;pageinit&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.ui-page&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;swipeleft&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">nextpage</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;div[data-role=&quot;page&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">nextpage</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">mobile</span><span class="p">.</span><span class="nx">changePage</span><span class="p">(</span><span class="nx">nextpage</span><span class="p">,</span> <span class="s2">&quot;slide&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.ui-page&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;swiperight&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">prevpage</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">prev</span><span class="p">(</span><span class="s1">&#39;div[data-role=&quot;page&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">prevpage</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">mobile</span><span class="p">.</span><span class="nx">changePage</span><span class="p">(</span><span class="nx">prevpage</span><span class="p">,</span> <span class="p">{</span> <span class="nx">transition</span><span class="o">:</span> <span class="s2">&quot;slide&quot;</span><span class="p">,</span> <span class="nx">reverse</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, this script should be referenced in your DOM <em>before</em> you pull in the jQuery mobile js file. That is, put the code above where you add jQuery mobile in your document&#8217;s header (but <em>after</em> you load jQuery itself):</p>

<figure class='code'><figcaption><span>Including jQuery Mobile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://d10ajoocuyu32n.cloudfront.net/jquery-1.9.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- add pageinit swipe initialization here --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://d10ajoocuyu32n.cloudfront.net/mobile/1.3.1/jquery.mobile-1.3.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&#8217;ve done that, you&#8217;ll be able to swipe between page <code>div</code>s.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Android migrations]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations/"/>
    <updated>2013-07-24T09:46:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/android_platform.png">Have you ever worked with <a href="http://guides.rubyonrails.org/migrations.html">Rails&#8217; migrations</a>? They make <a href="http://www.tutorialspoint.com/ruby-on-rails/rails-migrations.htm">database changes a breeze</a>, don&#8217;t they?  While every software release doesn&#8217;t necessarily involve a migration, when one does happen to make use of one, <a href="http://thediscoblog.com/blog/2013/02/18/testing-rails-migrations/">I&#8217;m always pleased</a> on how easily things work out. Whether it&#8217;s to add new data or alter existing data structures, Rails migrations make evolving a datastore (be it an RDMBS or NoSQL one like MongoDB) painless.</p>

<p>When I recently found myself altering the data structure of a SQLite database for <a href="https://play.google.com/store/apps/details?id=com.b50.hoproll&amp;hl=en">one of my Android apps</a>, I found myself wishing there was some similar migration mechanism for Android as there is in Rails. Alas, I could fine none, so I did what any other developer would do: <a href="https://github.com/aglover/droid-migrate">I wrote one</a>.</p>

<!-- more -->


<p><a href="https://github.com/aglover/droid-migrate">Droid Migrate</a> is a simple command line framework that generates and runs database migrations for your Android apps that use <a href="http://www.sqlite.org/">SQLite</a>. A migration is encapsulated by a <code>DBVersion</code> class that contains an <code>up</code> and <code>down</code> method. The <code>up</code> method is called for an upgrade and <code>down</code> for a rollback. What those methods do is entirely up to you.</p>

<p>In addition, Droid Migrate generates a <code>DatabaseHelper</code> class through which you obtain underlying connections to a SQLite instance &#8211; this is <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html">the canonical way</a> to <a href="http://www.stevenmcmillan.co.uk/blog/2012/java-sqlite-database-helper-class-for-android/">interact with SQLite</a> in <a href="http://www.androidhive.info/2011/11/android-sqlite-database-tutorial/">an Android app</a> anyway, but with Droid Migrate, you get a specially enhanced <code>DatabaseHelper</code> that determines which version of a target database instance is the most current and runs the appropriate migrations to bring the database to that version.</p>

<p>Thus, with your newly minted <code>DatabaseHelper</code> class, you can still interact with your app&#8217;s database like you would normally, however, by using this class, all migrations are handled for you. Allow me to demonstrate.</p>

<p><a href="https://github.com/aglover/tidbit">I&#8217;ve created a simple app</a> that doesn&#8217;t interact with any database at this point &#8211; it simply creates a <code>ListView</code> that is intended to hold a list of records for viewing. You can find this app on <a href="https://github.com/aglover/tidbit">Github</a> if you&#8217;d like to follow along. Nevertheless, the app&#8217;s main Activity is shown below.</p>

<figure class='code'><figcaption><span>Simple Android app w/o any SQLite logic</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">textView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;This would be a list from a DB if there was a DB&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I&#8217;d like to do is add the ability to interact with a SQLite database; plus, I&#8217;d like to be able to evolve the data model on subsequent releases. This is where Droid Migrate shines.</p>

<p>After I&#8217;ve installed Droid Migrate (simply clone or download the code, build it, and put it into your <code>PATH</code> and create new environment variable dubbed <code>DROID_MIGRATE_HOME</code>), I can initialize my app to use Droid Migrate by opening up a terminal in the root of my app and typing:</p>

<figure class='code'><figcaption><span>Initializing Droid Migrate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> droid-migrate init -d a_catalog
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-d</code> flag specifies the name of my desired database. I can optionally provide a package name via the <code>-p</code> flag if I&#8217;d like my newly generated classes in a separate package from my main app.</p>

<p>If you take a look at your app&#8217;s code, you should notice a number of new things. First, you&#8217;ll see two new classes and a new jar file. The classes are the aforementioned <code>DatabaseHelper</code> and a class dubbed <code>DBVersion1</code>. The newly added jar file in your app&#8217;s <code>libs</code> folder contains a few classes that correspond to Droid Migrate&#8217;s runtime dependencies &#8211; this jar is extremely compact at 4KB.</p>

<p>The <code>DatabaseHelper</code> class is brutally simple:</p>

<figure class='code'><figcaption><span>DatabaseHelper couldn&#8217;t be any easier</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.db.ex.R</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.migrations.MigrationsDatabaseHelper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DatabaseHelper</span> <span class="kd">extends</span> <span class="n">MigrationsDatabaseHelper</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">DatabaseHelper</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">context</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">database_name</span><span class="o">),</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">getResources</span><span class="o">().</span><span class="na">getInteger</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">integer</span><span class="o">.</span><span class="na">database_version</span><span class="o">),</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">package_name</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class extends Droid Migrate&#8217;s <code>MigrationsDatabaseHelper</code>, which ultimately extends Android&#8217;s <code>SQLiteOpenHelper</code> so as I mentioned earlier, you&#8217;ve got everything you need to interact with SQLite at your fingertips via <code>DatabaseHelper</code>. If you look closely, you&#8217;ll see that this class makes use of a specialized XML file (that is ultimately generated into your <code>R</code> class).</p>

<p>Take a look in the <code>res/values</code> folder and open up the newly created <code>migrations.xml</code> file. It should look something like this:</p>

<figure class='code'><figcaption><span>migrations.xml contains database version, package name and database name</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;resources&gt;</span>
</span><span class='line'>    <span class="nt">&lt;integer</span> <span class="na">name=</span><span class="s">&quot;database_version&quot;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">&quot;database_name&quot;</span><span class="nt">&gt;</span>a_catalog<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">&quot;package_name&quot;</span><span class="nt">&gt;</span>com.b50.db.ex<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the value of <code>database_version</code> &#8211; it&#8217;s 1. This corresponds to the <code>DBVersion1</code> class that was generated. Take a look at that class:</p>

<figure class='code'><figcaption><span>DBVersion1 is your initial migration class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.migrations.AbstractMigration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBVersion1</span> <span class="kd">extends</span> <span class="n">AbstractMigration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">up</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//execSQL(&quot;some sql create stmts&quot;);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">down</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//execSQL(&quot;some delete sql stmts&quot;);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class is where you implement your initial migration, which would create various tables and populate them. Use the <code>execSQL</code> method to pass in a valid SQL <code>String</code>. For example, I&#8217;ll create an initial migration like so:</p>

<figure class='code'><figcaption><span>DBVersion1 is now implemented</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.migrations.AbstractMigration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBVersion1</span> <span class="kd">extends</span> <span class="n">AbstractMigration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">up</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">create</span> <span class="o">=</span> <span class="s">&quot;CREATE TABLE hops (_id integer  PRIMARY KEY AUTOINCREMENT DEFAULT NULL, name TEXT, description TEXT, substitutions TEXT DEFAULT &#39;&#39;, alpha_acid TEXT DEFAULT &#39;&#39;, beer_styles TEXT DEFAULT &#39;&#39;, type TEXT DEFAULT &#39;&#39;, user_notes TEXT DEFAULT &#39;&#39;);&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="n">create</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">oneThing</span> <span class="o">=</span> <span class="s">&quot;INSERT INTO &#39;hops&#39; VALUES(1,&#39;Amarillo&#39;,&#39;Spicy hop with mild bitterness and a noble aroma.  Good all around hop.&#39;,&#39;Cascade, Centennial&#39;,&#39;7 to 10&#39;,&#39;Ale, IPA&#39;,&#39;Aroma&#39;, &#39;&#39;);&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="n">oneThing</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">down</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="s">&quot;DROP TABLE hops;&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, my <code>up</code> method creates a table and inserts one record. My <code>down</code> method rolls things back, which in this case means dropping the created table.</p>

<p>Now all I have to do is make use of my app&#8217;s <code>DatabaseHelper</code> instance and Droid Migrate will ensure things are properly initialized. Therefore, I&#8217;ll update the original Activity to display a list of what&#8217;s in the database, which I know only to be one record based upon my initial migration.</p>

<figure class='code'><figcaption><span>Updated Activity to interact with SQLite</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.database.Cursor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.database.sqlite.SQLiteDatabase</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ListAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ListView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.SimpleCursorAdapter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">db</span> <span class="o">=</span> <span class="o">(</span><span class="k">new</span> <span class="n">DatabaseHelper</span><span class="o">(</span><span class="k">this</span><span class="o">)).</span><span class="na">getWritableDatabase</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ListView</span> <span class="n">list</span> <span class="o">=</span> <span class="o">(</span><span class="n">ListView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">list</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ListAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">getAdaptorForQuery</span><span class="o">(</span><span class="s">&quot;SELECT _id, name, description FROM hops ORDER BY name ASC&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ListAdapter</span> <span class="nf">getAdaptorForQuery</span><span class="o">(</span><span class="n">String</span> <span class="n">queryString</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">parameters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">rawQuery</span><span class="o">(</span><span class="n">queryString</span><span class="o">,</span> <span class="n">parameters</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">SimpleCursorAdapter</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">list_item</span><span class="o">,</span> <span class="n">cursor</span><span class="o">,</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;description&quot;</span> <span class="o">},</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">hopName</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">description</span> <span class="o">},</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the code above, the app now makes a query to the underlying SQLite instance and builds a <code>ListView</code> from the result set of the query.</p>

<p>The key line is how the <code>SQLiteDatabase</code> instance is obtained: <code>this.db = (new DatabaseHelper(this)).getWritableDatabase();</code> &#8211; that is where all the magic takes place. Droid Migrate passes along the version number to the Android platform and if there is a change, the Android platform will call a series of life-cycle methods, which Droid Migrate wires up with your migrations.</p>

<p>For instance, let&#8217;s imagine that a subsequent release of this app adds more data to the <code>hops</code> table. Therefore, I&#8217;ll generate a new migration. This is done by typing the following command within the root directory of your project like so:</p>

<figure class='code'><figcaption><span>Generating a new migration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> droid-migrate generate up
</span></code></pre></td></tr></table></div></figure>


<p>The <code>up</code> flag signifies an increase in the database version (i.e. version++) and <code>down</code> indicates a rollback (i.e. version&#8211;). If you take a look at your app&#8217;s code, you&#8217;ll notice a new class: <code>DBVersion2</code> and your <code>migrations.xml</code> file has been updated: the <code>database_version</code> value is now 2.</p>

<p>I&#8217;ll implement my <code>DBVersion2</code> class like so:</p>

<figure class='code'><figcaption><span>Implementing DBVersion2 to add one more row of data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.migrations.AbstractMigration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBVersion2</span> <span class="kd">extends</span> <span class="n">AbstractMigration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">up</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="s">&quot;INSERT INTO &#39;hops&#39; VALUES(100,&#39;Zythos&#39;,&#39;New IPA style hop blend created to optimize and exceed the aroma characteristics of the traditional, and sometimes hard to get, IPA hops.&#39;,&#39;Amarillo, Columbus, Cascade&#39;,&#39;9.5 to 12&#39;,&#39;IPAs&#39;,&#39;Bittering and Aroma&#39;, &#39;&#39;);&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">down</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="s">&quot;DELETE from &#39;hops&#39; where _id = 100&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if I fire up my app, the <code>ListView</code> will have 2 items in it!</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/migrate_2.png"></p>

<p>What about if you need to rollback? That&#8217;s just as easy. Imagine that the addition of that second row of data was a gigantic mistake and instead I really only want one row (i.e. I only want the data originally created in <code>DBVersion1</code>). All I have to do is type within the root of my project:</p>

<figure class='code'><figcaption><span>Rollbacks in Droid Migrate are just as easy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> droid-migrate generate down
</span></code></pre></td></tr></table></div></figure>


<p>After typing the above command, you should see the following output:</p>

<figure class='code'><figcaption><span>Rollback to version 1!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Generating a rollback migration...
</span><span class='line'>Rolling back your migrations.xml file to indicate database version 1
</span><span class='line'>Done!
</span></code></pre></td></tr></table></div></figure>


<p>The only thing that&#8217;ll change in your project is the <code>migrations.xml</code> file &#8211; the <code>database_version</code> value will be rolled back to 1 (or what ever 1 minus the current version is).</p>

<p>Fire the app back up, and behold: one value is displayed because <code>DBVersion2</code>&#8217;s <code>down</code> method was executed!</p>

<p>Droid Migrate makes upgrades and rollbacks to your underlying SQLite database a breeze; what&#8217;s more, it can handle upgrades or rollbacks beyond just one version. That is, if an app instance is upgraded from version 2 to version 6, each migration will be run in order (3, 4, 5, and 6). The same is true of a rollback.</p>

<p>If you are working with SQLite in an Android app, I highly recommend you take a look at <a href="https://github.com/aglover/droid-migrate">Droid Migrate</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB pro tip: field projections]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/15/mongodb-pro-tip-field-projections/"/>
    <updated>2013-07-15T15:07:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/15/mongodb-pro-tip-field-projections</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/mongodb_icon.png">Did you ever learn that <code>select * from table</code> in RDBMS-land is bad? Of course, you did! If you&#8217;re only looking for the email address of a user and not the other 15 columns worth of data, then why ask for that data and incur a penalty? The query <code>select email from user where user_id = 1;</code> is far more efficient for the database and the corresponding application that issued it, because there is <em>less data to fetch and consume</em>.</p>

<!-- more -->


<p>As it turns out, the same rule of thumb is true in <a href="http://www.mongodb.org/">MongoDB-land</a>. That is, <code>db.users.find({user_id:1})</code> is just as inefficient as the <code>select *</code> query if all you want is the user&#8217;s email address. With MongoDB, you can specify a <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/">projection</a> as a part of your query that ultimately can limit what fields come back.</p>

<p>Thus, if I only want the <code>email</code> field on a user, I can issue a query like so:</p>

<figure class='code'><figcaption><span>MongoDB field projection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">user_id</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">email</span><span class="o">:</span><span class="mi">1</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second clause specifies that you only want the <code>email</code> field returned. You can also negate fields by issuing a 0, which means false. To negate <code>first_name</code> and <code>last_name</code>, you would type:</p>

<figure class='code'><figcaption><span>MongoDB field negation with 0 or false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">user_id</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">first_name</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">last_name</span><span class="o">:</span><span class="mi">0</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, I&#8217;d get all fields on that user document <em>except</em> <code>first_name</code> and <code>last_name</code>. Note, you cannot issue both an include and exclude in the same statement.</p>

<p>For you <a href="http://mongoid.org/en/mongoid/index.html">Mongoid</a> users, including specific fields translates to <code>only</code> and excluding them translates to <code>without</code> &#8211; each clause can be attached to a criteria (but not both at the same time). For example, if <code>User</code> is a Mongoid document and I only want an underlying query to grab the <code>email</code> field, then the corresponding Mongoid query would be:</p>

<figure class='code'><figcaption><span>Mongoid field projection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">only</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Field projection reduces document sizes on a fetch &#8211; this decreases memory consumption (for example, in the case of Mongoid your models aren&#8217;t fully populated with data) as well as bandwidth (that is, document retrieval is faster). Both MongoDB and the calling application benefit from field projection &#8211; it&#8217;s a win-win all the way around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sampling Redis keys for memory consumption]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/03/sampling-redis-keys/"/>
    <updated>2013-07-03T14:05:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/03/sampling-redis-keys</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/redis_logo.png"><a href="http://www.app47.com">We</a> run a farm of <a href="http://redis.io/">Redis</a> instances for storing real time analytics. Because Redis stores objects in memory, it happens to be an extremely fast way to retrieve data; thus, most of our charts and graphs pull data from various Redis instances that contain desired data.</p>

<p>Our Redis boxes are running in <a href="http://thediscoblog.com/blog/categories/aws/">AWS</a> on <a href="http://aws.amazon.com/ec2/instance-types/instance-details/">m2.2xlarge instances</a>, which contain a bit over 30GB of memory. Every once in awhile, it&#8217;s helpful to get an idea of how much memory various key <em>patterns</em> are consuming because we hold over 20GB across several hundred thousand keys in some cases. There&#8217;s a nifty gem dubbed <a href="https://github.com/snmaynard/redis-audit">redis-audit</a> (<a href="https://github.com/aglover/redis-audit">my fork</a> of it adds <a href="http://bundler.io/">Bundler</a>) that is quite helpful in painting a broad picture of memory usage across a sampling of key patterns.</p>

<!-- more -->


<p>Redis-audit works by sampling a configurable portion of keys residing in a Redis database. It then prints out a report of key patterns that delineates, among other things, memory usage. The summary portion of the output report looks something like:</p>

<figure class='code'><figcaption><span>redis-audit summary</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>------------------------------------+--------------+-------------------+---------------------------------------------------
</span><span class='line'>Key                                 | Memory Usage | Expiry Proportion | Last Access Time
</span><span class='line'>------------------------------------+--------------+-------------------+---------------------------------------------------
</span><span class='line'>se::4f733211e::02/03/13::model::SGT | 19.03%    | 14.81%   | 1 days, 8 hours, 8 minutes, 40 seconds
</span><span class='line'>se::4f7332a3e::03/08/13::manufactur | 8.76%     | 71.43%   | 6 hours, 14 minutes, 50 seconds
</span><span class='line'><span class="c"># more keys omitted</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also get more details on individual key patterns; for example, the key above using 19% of Redis&#8217;s memory is detailed like so:</p>

<figure class='code'><figcaption><span>redis-audit details for a key pattern</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">==============================================================================</span>
</span><span class='line'>Found 27 keys containing hashs, like:
</span><span class='line'>se::4f7332a300011e::02/03/13::model::SGT SMA2+::aggregations,
</span><span class='line'>se::4f7332a300011e::06/06/13::model::SGH-M919V::aggregations,
</span><span class='line'>se::4f7332a300011e::05/19/13::model::vivo S7::aggregations,
</span><span class='line'>se::4f7332a300011e::02/15/13::model::PAD707::aggregations,
</span><span class='line'>se::4f7332a300011e::06/12/13::model::Rise::aggregations,
</span><span class='line'>se::4f7332a300011e::04/12/13::model::Micromax A91::aggregations,
</span><span class='line'>se::4f7332a300011e::06/11/13::model::900TPCII::aggregations,
</span><span class='line'>se::4f7332a300011e::07/01/13::model::HUAWEI U8825D::aggregations,
</span><span class='line'>se::4f7332a300011e::02/20/13::model::AT7D-TE25DA::aggregations,
</span><span class='line'>se::4f7332a300011e::02/14/13::model::HUAWEI G510-0010::aggregations
</span><span class='line'>
</span><span class='line'>These keys use 19.03% of the total sampled memory <span class="o">(</span>990 bytes<span class="o">)</span>
</span><span class='line'>14.81% of these keys expire <span class="o">(</span>4<span class="o">)</span>, with maximum ttl of 28 days, 15 hours, 51 minutes, 20 seconds
</span><span class='line'>Average last accessed <span class="nb">time</span>: 69 days, 19 hours, 14 minutes, 15 seconds - <span class="o">(</span>Max: 95 days, 23 hours, 10 minutes, 10 seconds Min:1 days, 8 hours, 8 minutes, 40 seconds<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This data is helpful in a number of ways; for instance, we discovered that a significant portion of memory was being consumed by keys containing old time series data that for some reason did not have associated TTLs. Thus, we were able to achieve that particular data (into <a href="http://localhost:4000/blog/categories/mongodb/">MongoDB</a>) and free up memory.</p>

<p>If you want to understand how memory is distributed across key patterns in a Redis instance, then I think you&#8217;ll find <a href="https://github.com/snmaynard/redis-audit">Redis-audit</a> quite helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile for the masses: Words and gestures with Overheard Word]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/01/mobile-for-the-masses-words-and-gestures-with-overheard-word/"/>
    <updated>2013-07-01T12:10:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/01/mobile-for-the-masses-words-and-gestures-with-overheard-word</id>
    <content type="html"><![CDATA[<p>The fourth article in <a href="http://www.ibm.com/developerworks/">IBM developerWorks</a>&#8217; series <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=mobile+for+the+masses">Mobile for the Masses</a> has been published! <a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html">This copasetic article</a> shows you how to take the Overheard Word demo app up a level with a JSON-based word engine and some prebaked, swipe-gesture functionality.</p>

<!-- more -->


<p>As the article summary states:</p>

<blockquote><p>You might feel like a kid in a candy store grabbing third-party code from GitHub or another repository, but there are still some tricks to integrating it with your Android UI. This month, Andrew Glover shows you how to take the Overheard Word demo app up a level with a JSON-based word engine and some prebaked, swipe-gesture functionality. As it turns out, Android easily accommodates third-party code, but you still have to do some careful logic if you want your app&#8217;s UI to run it smoothly.</p><footer><strong>IBM DeveloperWorks</strong> <cite><a href='http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html'>Mobile for the Masses: Words and Gestures With Overheard Word</a></cite></footer></blockquote>


<p>Check out &#8221;<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html">Mobile for the masses: Mobile for the masses: Words and gestures with Overheard Word</a>&#8221; and programmatically integrate third-party code into your Android UI! If you missed the first article, check out &#8221;<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses1/">Mobile for the masses: A gentle introduction to Android</a>&#8221;; what&#8217;s more, don&#8217;t forget to read my second article, entitled &#8221;<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Mobile for the masses: Take a swipe at it! Programming gestures in Android</a>&#8221; and the third article &#8221;<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses3/index.html">Mobile for the masses: Activities and icons in your Android application lifecycle</a>&#8221;.</p>

<p>Stay tuned for more articles in this series and don&#8217;t forget to watch for <a href="http://thediscoblog.com/blog/categories/mobile/">mobile focused articles on this blog</a> as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android tip: ListView becomes black when scrolling]]></title>
    <link href="http://thediscoblog.com/blog/2013/06/27/android-tip-listview-becomes-black-when-scrolling/"/>
    <updated>2013-06-27T13:15:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/06/27/android-tip-listview-becomes-black-when-scrolling</id>
    <content type="html"><![CDATA[<p>One of <a href="https://play.google.com/store/apps/details?id=com.b50.hoproll">my Android apps</a> recently suffered from a nefariously ugly UI glitch that, embarrassingly, a user reported to me.  Strangely, this phenomenon did not surface itself in local testing on either emulators or devices when I first wrote the app; nevertheless, I was able to reproduce the error after the bug report came in. I suspect that recent updates in the Android platform might have exacerbated the issue for my app as I&#8217;m fairly certain I never saw it before.</p>

<!-- more -->


<p></p>

<p><a href="http://www.amazon.com/Beacon50-Hop-Roll/dp/B00A9Z5P42/ref=sr_1_1?ie=UTF8&amp;qid=1370959609&amp;sr=8-1&amp;keywords=hoproll">HopRoll</a> displays a ListView of hops and has a custom background like so:</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/hop_roll_2.png"></p>

<p>When people scrolled through that list, however, they would see a nasty black partially rendered screen that made the app completely unusable as you can see below:</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/hop_roll_1.png"></p>

<p>If you start to notice that your <a href="http://developer.android.com/reference/android/widget/ListView.html">ListView</a> containing custom backgrounds become <a href="http://android-developers.blogspot.com/2009/01/why-is-my-list-black-android.html">horribly black</a> when scrolling then you&#8217;ve got the same issue.</p>

<p>Luckily, it&#8217;s quite easy to rectify. It turns out that when scrolling, there is some rendering magic going on that can obstruct the background in an ungainly way; you <a href="http://stackoverflow.com/questions/2833057/background-listview-becomes-black-when-scrolling">can fix it</a> by adding one line to the ListView&#8217;s layout definition:</p>

<figure class='code'><figcaption><span>Adding this to your ListView Layout definition will fix the issue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>android:cacheColorHint=&quot;@android:color/transparent&quot;
</span></code></pre></td></tr></table></div></figure>


<p>With that line in place, scrolling, once again, becomes clean and smooth.</p>

<p>You can find my app, Hop Roll, which is your go-to home brew resource for all hop related information on <a href="https://play.google.com/store/apps/details?id=com.b50.hoproll">Google Play</a> and <a href="http://www.amazon.com/Beacon50-Hop-Roll/dp/B00A9Z5P42/ref=sr_1_1?ie=UTF8&amp;qid=1370959609&amp;sr=8-1&amp;keywords=hoproll">Amazon&#8217;s Android App Store</a> &#8211; keep on trucking, baby!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB primary keys are your friend]]></title>
    <link href="http://thediscoblog.com/blog/2013/06/22/mongodb-primary-keys-are-your-friend/"/>
    <updated>2013-06-22T15:00:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/06/22/mongodb-primary-keys-are-your-friend</id>
    <content type="html"><![CDATA[<p>All documents in a <a href="http://www.mongodb.org/">MongoDB</a> collection have a primary key dubbed <code>_id</code>. This field is automatically assigned to a document upon insert, so there&#8217;s rarely a need to provide it. What&#8217;s interesting about the <code>_id</code> field is that it is <em>time based</em>. That is, the underlying type of <code>_id</code>, which is <code>ObjectId</code>, is a <a href="http://docs.mongodb.org/manual/reference/object-id/">12-byte BSON type</a>, and 4 of those bytes represent the seconds since Unix epoch.</p>

<!-- more -->


<p></p>

<p>What&#8217;s also special about the <code>_id</code> field is that it is automatically indexed as you can see below by calling <code>getIndexes</code> on any collection.</p>

<figure class='code'><figcaption><span>All MongoDB collections have an _id field as an index</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">things</span><span class="p">.</span><span class="nx">getIndexes</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;v&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;key&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="s2">&quot;ns&quot;</span> <span class="o">:</span> <span class="s2">&quot;test.things&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;_id_&quot;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as everyone remembers from traditional RDBMSs, <a href="http://en.wikipedia.org/wiki/Database_index">indexes are important</a> because they can make document retrieval faster; nevertheless, indexes do consume memory and there is a slight performance penalty when inserting documents as all corresponding indexes must be updated. Thus, while you should seriously consider using indexes, you need to be economical in their usage.</p>

<p>Naturally, searching by a document&#8217;s <code>_id</code> is only convenient when you <em>know</em> it. More often than not, documents are searched via other fields and if you find yourself searching <a href="http://cookbook.mongodb.org/patterns/date_range/">via a time series</a>, such as <code>created_at</code> then you are in for a treat.</p>

<p>Imagine a collection dubbed <code>logs</code> that contains simple documents capturing various log messages. A sample document could look like so:</p>

<figure class='code'><figcaption><span>A simple document in a logs collection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;51c4ab6d4d6906d494460728&quot;</span><span class="p">),</span>
</span><span class='line'>     <span class="s2">&quot;message&quot;</span> <span class="o">:</span> <span class="s2">&quot;crashed, no such method exception&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;crash&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;created_at&quot;</span> <span class="o">:</span> <span class="nx">ISODate</span><span class="p">(</span><span class="s2">&quot;2013-06-21T19:37:17.992Z&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What if I wanted to find all log messages for some date, like today? I could write my query like so:</p>

<figure class='code'><figcaption><span>finding all logs created since June 20th, 2013</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">logs</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">created_at</span><span class="o">:</span><span class="p">{</span><span class="s1">&#39;$gt&#39;</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">20</span><span class="p">)}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I throw an explain to that query, I can see that because I do not have an index on <code>created_at</code>, a basic cursor is leveraged and all documents in the collection were scanned in order to retrieve my result.</p>

<figure class='code'><figcaption><span>An explain plan attached to my find</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="nx">db</span><span class="p">.</span><span class="nx">logs</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">created_at</span><span class="o">:</span><span class="p">{</span><span class="s1">&#39;$gt&#39;</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">20</span><span class="p">)}}).</span><span class="nx">explain</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="s2">&quot;cursor&quot;</span> <span class="o">:</span> <span class="s2">&quot;BasicCursor&quot;</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;isMultiKey&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;n&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;nscannedObjects&quot;</span> <span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;nscanned&quot;</span> <span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;nscannedObjectsAllPlans&quot;</span> <span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;nscannedAllPlans&quot;</span> <span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;scanAndOrder&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;indexOnly&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;nYields&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;nChunkSkips&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;millis&quot;</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>     <span class="s2">&quot;indexBounds&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="s2">&quot;server&quot;</span> <span class="o">:</span> <span class="s2">&quot;ghome-computer.home:27017&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, searching via the <code>created_at</code> field can be inefficient; thus, you might be tempted to throw an index on that field. This would naturally make that particular query more efficient, however, you would incur the cost of a new index which is more memory consumed and inserts would be slightly slower due to an update to that newly created index.</p>

<p>As it turns out, because the <code>_id</code> field embeds Unix epoch in it, you can just as easily craft a find expression <em>without</em> including the <code>created_at</code> field. For example, the <a href="https://github.com/mongodb/mongo-ruby-driver">MongoDB Ruby driver</a> allows you to create <code>ObjectId</code>&#8217;s from a <code>Time</code> like so:</p>

<figure class='code'><figcaption><span>Creating a new ObjectId via the from_time factory method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">yesterday</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="p">(</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="p">(</span><span class="mi">24</span><span class="o">*</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">custom_id</span> <span class="o">=</span> <span class="no">BSON</span><span class="o">::</span><span class="no">ObjectId</span><span class="o">.</span><span class="n">from_time</span><span class="p">(</span><span class="n">yesterday</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">BSON</span><span class="o">::</span><span class="no">ObjectId</span><span class="p">(</span><span class="s1">&#39;51c397800000000000000000&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I&#8217;ve created a new <code>ObjectId</code> via the <code>from_time</code> factory method.  51c397800000000000000000 is a hexadecimal representation and the first 8 digits represent the time with everything else zeroed out. Note, you can create <code>ObjectId</code> types via some notion of time in other language drivers as well.</p>

<p>Now I can leverage my <code>custom_id</code> in any <code>find</code> expression. Via the Ruby driver, I can also attach an <code>explain</code>, which&#8217;ll demonstrate the usage of the free <code>_id</code> index.</p>

<figure class='code'><figcaption><span>Using a date derived ObjectId forces a find to use the _id index</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">mongodb</span><span class="o">[</span><span class="ss">:logs</span><span class="o">].</span><span class="n">find</span><span class="p">({</span><span class="n">_id</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;$gt&#39;</span> <span class="o">=&gt;</span> <span class="n">custom_id</span><span class="p">}})</span><span class="o">.</span><span class="n">explain</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;cursor&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;BtreeCursor _id_&quot;</span><span class="p">,</span> <span class="s2">&quot;isMultiKey&quot;</span><span class="o">=&gt;</span><span class="kp">false</span><span class="p">,</span> <span class="s2">&quot;n&quot;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;nscannedObjects&quot;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;nscanned&quot;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you see <code>BtreeCusor</code>, then you know you&#8217;re using an index; if you see <code>BasicCursor</code>, you know you&#8217;re not.</p>

<p>Thus, if you find yourself executing queries and creating indexes for some time or date field like <code>created_at</code>, you might be better off just using Mongo&#8217;s <code>_id</code> field as it already embeds the notion of <em>created at</em> and is indexed by default. Dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lickety-split custom validations in Rails]]></title>
    <link href="http://thediscoblog.com/blog/2013/06/12/lickety-split-custom-validations-in-rails/"/>
    <updated>2013-06-12T13:19:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/06/12/lickety-split-custom-validations-in-rails</id>
    <content type="html"><![CDATA[<p>Have a highly specific, yet custom validation for a particular field on one of your <a href="http://thediscoblog.com/blog/categories/rails/">Rails</a> model objects? Don&#8217;t want to create a <code>ActiveModel::Validator</code> type? Not a problem!</p>

<p>You can just as easily <a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html">create a method</a> that can be invoked as part of the validation process. For example, imagine a field dubbed <code>uri</code> in some model object; this field must begin with a protocol (i.e. http or https). You can create a validation method like so:</p>

<figure class='code'><figcaption><span>Custom validator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">uri_should_start_with_protocol</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="n">uri</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;http://&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">uri</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;https://&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:uri</span><span class="p">,</span> <span class="s1">&#39;Web Address should start with http:// or https://&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method resides in your model. You can then register this method as a validation for your model like so:</p>

<figure class='code'><figcaption><span>Wiring the validation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validate</span> <span class="ss">:uri_should_start_with_protocol</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if the <code>uri</code> field doesn&#8217;t contain http or https, <code>model.save</code> will return <code>false</code>. Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backgrounding tasks in Heroku with Delayed Job]]></title>
    <link href="http://thediscoblog.com/blog/2013/06/10/backgrounding-tasks-in-heroku-with-delayed-job/"/>
    <updated>2013-06-10T12:56:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/06/10/backgrounding-tasks-in-heroku-with-delayed-job</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/heroku-logo-light.png">Long running web requests are bad. They create resource contention among other waiting incoming requests; what&#8217;s more, with HTTP servers like <a href="https://github.com/defunkt/unicorn">Unicorn</a> (which is rapidly becoming the de facto HTTP server for Rails apps running on <a href="https://get.heroku.com/">Heroku</a>), long running requests are summarily terminated after some threshold (for example, 30 seconds) leaving users with a nasty timeout error (and, of course, other users complaining that it takes forever for your site to do anything). Luckily, with frameworks like <a href="https://github.com/collectiveidea/delayed_job">Delayed Job</a>, backgrounding long running tasks <a href="https://devcenter.heroku.com/articles/delayed-job">couldn&#8217;t be any easier</a>.</p>

<!-- more -->


<p>To leverage Delayed Job in Heroku, you&#8217;ll need for follow a few steps. In my case, since I&#8217;m using <a href="http://mongoid.org/en/mongoid/index.html">Mongoid</a>, I&#8217;m going to use an <a href="https://github.com/collectiveidea/delayed_job_mongoid">alternate Active Record Delayed Job tie-in</a> dubbed <code>delayed_job_mongoid</code>. The reason for this <a href="http://guides.rubyonrails.org/">Active Record</a> integration will become obvious once I show you how to actually force a long running task to be asynchronous. Regardless if you are using Mongoid or not, the Active Record integration is identical.</p>

<p>First and foremost, you&#8217;ll need to add <code>delayed_job_mongoid</code> to your <code>Gemfile</code> (or if you aren&#8217;t using Mongoid, add <code>delayed_job_active_record</code>).  Delayed Job stores jobs in your database; consequently, after you run <code>bundle install</code>, proceed to update your underlying MongoDB instance with a new index by running:</p>

<figure class='code'><figcaption><span>Adding an index and new collection to MongoDB</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> script/rails runner <span class="s1">&#39;Delayed::Backend::Mongoid::Job.create_indexes&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, if you&#8217;re using a normal RDMBS, your command will be slightly different (i.e. <code>rake db:migrate</code>).</p>

<p>After that step is complete, you&#8217;ll need to generate a <code>delayed_job</code> script via:</p>

<figure class='code'><figcaption><span>Generating the Delayed Job script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> rails generate delayed_job
</span></code></pre></td></tr></table></div></figure>


<p>This script allows to you execute the Delayed Job framework with a number of options. As it turns out, you don&#8217;t really need this script as Delayed Job hooks into Rake as well; it is via the Rake integration that Heroku will work with Delayed Job.</p>

<p>Now that you&#8217;ve set up 80% of the infrastructure required to support Delayed Job, you next need to background some long running task. This is the fun part and like everything else so far, it couldn&#8217;t be any easier.</p>

<p>Delayed Job hooks directly into Active Record and thus, you can background some unit of work on a model object by inserting a <code>delay</code> call. For example, in my case, I had a <code>Group</code> model object that when updated under certain circumstances required that <em>all associated</em> users also be updated (wouldn&#8217;t it be nice if <a href="https://jira.mongodb.org/browse/SERVER-124">MongoDB supported triggers</a>?). As you can imagine, updating hundreds of users is rather time intensive.</p>

<p>Thus, the user update logic was thrown into a special method (dubbed <code>aysnc_update_users</code>) and was then invoked like so:</p>

<figure class='code'><figcaption><span>Adding in a delay backgrounds the async_update_users call</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span><span class="o">.</span><span class="n">delay</span><span class="o">.</span><span class="n">async_update_users</span>
</span></code></pre></td></tr></table></div></figure>


<p>This call essentially serializes the logic here into a collection called <code>delayed_backend_mongoid_jobs</code> which can then be invoked asynchronously by another process. And therein lies your last few steps.</p>

<p>Heroku has the notion of <a href="https://devcenter.heroku.com/articles/background-jobs-queueing">worker dynos</a>, which are background processors &#8211; think of worker dynos as engines capable of doing what ever you want them to do. In the case of Delayed Job, you want those worker dynos to invoke jobs residing in the <code>delayed_backend_mongoid_jobs</code> collection (which is conceptually a queue).</p>

<p>To configure a worker dyno, you&#8217;ll need to do 2 things. First, provision one like so:</p>

<figure class='code'><figcaption><span>Using Heroku CLI to fire up a worker dyno</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> heroku ps:scale <span class="nv">worker</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll then need to update your <code>Procfile</code> to include the command the worker dyno should invoke:</p>

<figure class='code'><figcaption><span>Updated Procfile command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worker</span><span class="p">:</span>  <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="n">jobs</span><span class="ss">:work</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the worker dyno in this case is invoking a <a href="http://rake.rubyforge.org/">Rake task</a> (<code>jobs:work</code>) which is asynchronously polling for new jobs in your conceptual queue and invoking them as they are found.</p>

<p>Finally, deploy to Heroku and keep an eye on the queue for jobs &#8211; you can isolate the dyno workers logs via</p>

<figure class='code'><figcaption><span>Updated Procfile command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$&gt;</span> <span class="n">heroku</span> <span class="n">logs</span> <span class="o">-</span><span class="nb">p</span> <span class="n">worker</span> <span class="o">-</span><span class="n">t</span>
</span></code></pre></td></tr></table></div></figure>


<p>Was that easy or what?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB to CSV]]></title>
    <link href="http://thediscoblog.com/blog/2013/06/07/mongodb-to-csv/"/>
    <updated>2013-06-07T20:01:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/06/07/mongodb-to-csv</id>
    <content type="html"><![CDATA[<p>Every once in a while, I need to give a non-technical user (like a business analyst) data residing in <a href="http://www.mongodb.org/">MongoDB</a>; consequently, I export the target data as a <a href="http://en.wikipedia.org/wiki/Comma-separated_values">CSV file</a> (which they can presumably slice and dice once they import it into Excel or some similar tool). Mongo has a handy <a href="http://docs.mongodb.org/manual/reference/program/mongoexport/">export utility</a> that takes a bevy of options, however, there is an <a href="https://jira.mongodb.org/browse/SERVER-4224">outstanding bug</a> and some <a href="http://stackoverflow.com/questions/6814151/how-to-export-collection-to-csv-in-mongodb">general confusion</a> as to how to properly export data in CSV format.</p>

<!-- more -->


<p>Accordingly, if you need to export some specific data from MongoDB into CSV format, here&#8217;s how you do it. The key parameters are connection information to include authentication, an output file, and most important, a list of fields to export. What&#8217;s more, you can provide a query in escaped JSON format.</p>

<p>You can find the <code>mongoexport</code> utility in your Mongo installation <code>bin</code> directory. I tend to favor verbose parameter names and explicit connection information (i.e. rather than a URL syntax, I prefer to spell out the host, port, db, etc directly).  As I&#8217;m targeting specific data, I&#8217;m going to specify the collection; what&#8217;s more, I&#8217;m going to further filter the data via a query.</p>

<p><code>ObjectId</code>&#8217;s can be referenced via the <code>$oid</code> format; furthermore, you&#8217;ll need to escape all JSON quotes. For example, if my query is against a <code>users</code> collection and filtered by <code>account_id</code> (which is an <code>ObjectId</code>), the query via the <code>mongo</code> shell would be:</p>

<figure class='code'><figcaption><span>Mongo Shell Query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">account_id</span><span class="o">:</span><span class="nx">ObjectId</span><span class="p">(</span><span class="s1">&#39;5058ca07b7628c0002099006&#39;</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Via the command line &agrave; la <code>monogexport</code>, this translates to:</p>

<figure class='code'><figcaption><span>Collections and queries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> --collection users --query <span class="s2">&quot;{\&quot;account_id\&quot;: {\&quot;\$oid\&quot;: \&quot;5058ca07b7628c0002000006\&quot;}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, if you want to only export a portion of the fields in a <code>user</code> document, for example, <code>name</code>, <code>email</code>, and <code>created_at</code>, you need to provide them via the <code>fields</code> parameter like so:</p>

<figure class='code'><figcaption><span>Fields declaration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--fields name,email,created_at
</span></code></pre></td></tr></table></div></figure>


<p>Putting it all together yields the following command:</p>

<figure class='code'><figcaption><span>Puttin&#8217; it all together</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongoexport --host mgo.acme.com --port 10332 --username acmeman --password 12345  <span class="se">\</span>
</span><span class='line'>--collection users --csv --fields name,email,created_at --out all_users.csv --db my_db <span class="se">\</span>
</span><span class='line'>--query <span class="s2">&quot;{\&quot;account_id\&quot;: {\&quot;\$oid\&quot;: \&quot;5058ca07b7628c0999000006\&quot;}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, you can throw this into a bash script and parameterize the <code>collection</code>, <code>fields</code>, output file, and query with bash&#8217;s handy <code>$1</code>, <code>$2</code>, etc variables.</p>

<p>Got it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Callbacks in Appcelerator Titanium modules]]></title>
    <link href="http://thediscoblog.com/blog/2013/05/29/callbacks-in-appcelerator-titanium-modules/"/>
    <updated>2013-05-29T13:42:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/05/29/callbacks-in-appcelerator-titanium-modules</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/appc_stacked.png">I recently found myself implementing both an Android and iOS <a href="http://www.appcelerator.com/">Appcelerator</a> module for <a href="http://www.app47.com/">App47</a>&#8217;s <a href="https://github.com/App47/appcelerator-modules">respective Agent libraries</a>. Like <a href="https://github.com/App47/phonegap-plugins">PhoneGap plugins</a>, <a href="https://wiki.appcelerator.org/display/tis/Using+Titanium+Modules">Appcelerator modules</a> are a way to bridge an Appcelerator app with native code running on a device; in this case, the native code happens to be App47&#8217;s <a href="http://app47.com/wiki/doku.php?id=configure:androidapp">Android</a> and <a href="http://app47.com/wiki/doku.php?id=configure:iosapp">IOS</a> Agents, which capture <a href="http://www.app47.com/features/">usage analytics</a> and facilitate a few security features. Naturally, these Agent libraries are  coded in Java and Objective-C.</p>

<p>In the end, what I wanted to implement was a <a href="http://recurial.com/programming/understanding-callback-functions-in-javascript/">JavaScript-ish callback</a> associated with a native App47 Agent call. Alas, it took me a lot of digging to achieve this goal.</p>

<!-- more -->


<p>For example, for a timed event (which, as you&#8217;ve probably guessed, captures how long an event took), rather than the more traditional call which is inline:</p>

<figure class='code'><figcaption><span>Straightforward method invocation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">agent</span><span class="p">.</span><span class="nx">startTimedEvent</span><span class="p">(</span><span class="s2">&quot;openCrust 2.0.27&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">openCrust</span><span class="p">({});</span>
</span><span class='line'><span class="nx">agent</span><span class="p">.</span><span class="nx">endTimedEvent</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wanted a more JavaScript friendly call that wraps the timed code like so:</p>

<figure class='code'><figcaption><span>Callback invocation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">agent</span><span class="p">.</span><span class="nx">timedEvent</span><span class="p">(</span><span class="s2">&quot;openCrust 2.0.27&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">openCrust</span><span class="p">({});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has the benefit of wrapping a desired event &#8211; there is no explicit need for anyone to code the ending &#8211; it is automatically done via the <code>timedEvent</code> call after invoking the passed in function.</p>

<p>The Titanium module documentation is a bit hard to find (that is, finding up-to-date valid documentation is challenging); your best bet to see how to do something interesting is to look at the <a href="https://github.com/appcelerator/titanium_mobile/tree/master/android/modules">various code</a> repositories <a href="https://github.com/appcelerator/titanium_modules">on Github</a> followed by studying the API docs (i.e. JavaDocs and <a href="https://github.com/appcelerator/titanium_mobile/blob/master/iphone/Classes/KrollCallback.m">.h/.m files for iOS</a>).</p>

<p>It turns out, invoking a JavaScript callback in either Android or iOS is fairly straightforward. In the case of Android, you need to use the <code>KrollFunction</code> type like so:</p>

<figure class='code'><figcaption><span>Wrapped Timed Event</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Kroll.method</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">timedEvent</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">KrollFunction</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="n">EmbeddedAgent</span><span class="o">.</span><span class="na">startTimedEvent</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>  <span class="n">callback</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">getKrollObject</span><span class="o">(),</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;());</span>
</span><span class='line'>  <span class="n">EmbeddedAgent</span><span class="o">.</span><span class="na">endTimedEvent</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see in the above code, I&#8217;m not doing anything special like passing in any arguments to the <code>KrollFunction</code> instance. If you want to do that, say in the case of passing in some special value that the corresponding callback will use, then you can either pass in a <code>Map</code> or an <code>Object[]</code>.</p>

<p>For example, you can implement this style of callback where a custom value is passed in for a timed event like so:</p>

<figure class='code'><figcaption><span>Callback with Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Kroll.method</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">startTimedEvent</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">KrollFunction</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="n">EmbeddedAgent</span><span class="o">.</span><span class="na">startTimedEvent</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>  <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>  <span class="n">callback</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">getKrollObject</span><span class="o">(),</span> <span class="n">map</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This results in a JavaScript call like so:</p>

<figure class='code'><figcaption><span>Using a callback but not wrapping the event</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">agent</span><span class="p">.</span><span class="nx">startTimedEvent</span><span class="p">(</span><span class="s2">&quot;openCrust 2.0.27&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">result</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">openCrust</span><span class="p">({});</span>
</span><span class='line'>  <span class="nx">agent</span><span class="p">.</span><span class="nx">endTimedEvent</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In iOS land, invoking a callback is a bit different, but certainly as easy. The same <code>timedEvent</code> JavaScript method that takes a callback to be wrapped by the timed event can be implemented as follows:</p>

<figure class='code'><figcaption><span>Wrapped event by callback</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">timedEvent:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">args</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span><span class="o">*</span> <span class="n">eventName</span> <span class="o">=</span> <span class="p">[</span><span class="n">args</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span><span class="o">*</span> <span class="n">eventID</span> <span class="o">=</span> <span class="p">[</span><span class="n">EmbeddedAgent</span> <span class="nl">startTimedEvent:</span><span class="n">eventName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">KrollCallback</span><span class="o">*</span> <span class="n">callback</span> <span class="o">=</span> <span class="p">[</span><span class="n">args</span> <span class="nl">objectAtIndex:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">callback</span><span class="p">){</span>
</span><span class='line'>    <span class="p">[</span><span class="n">callback</span> <span class="nl">call:</span><span class="nb">nil</span> <span class="nl">thisObject:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">EmbeddedAgent</span> <span class="nl">endTimedEvent:</span><span class="n">eventID</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, I&#8217;m using the <code>KrollCallback</code> type, which appears to be analogous to Appcelerator&#8217;s Android <code>KrollFunction</code>.</p>

<p>If you need to pass values to a corresponding JavaScript function, they need to be in <code>NSArray</code> form, thus, you can do something like this to pass in parameters to the underlying JavaScript function:</p>

<figure class='code'><figcaption><span>With callback parameter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startTimedEvent:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">args</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span><span class="o">*</span> <span class="n">eventName</span> <span class="o">=</span> <span class="p">[</span><span class="n">args</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSString</span><span class="o">*</span> <span class="n">eventID</span> <span class="o">=</span> <span class="p">[</span><span class="n">EmbeddedAgent</span> <span class="nl">startTimedEvent:</span><span class="n">eventName</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">KrollCallback</span><span class="o">*</span> <span class="n">callback</span> <span class="o">=</span> <span class="p">[</span><span class="n">args</span> <span class="nl">objectAtIndex:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">callback</span><span class="p">){</span>
</span><span class='line'>    <span class="n">NSDictionary</span><span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithObjectsAndKeys:</span><span class="s">@&quot;id&quot;</span><span class="p">,</span> <span class="n">eventID</span><span class="p">,</span> <span class="nb">nil</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSArray</span><span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span> <span class="n">dict</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">callback</span> <span class="nl">call:</span><span class="n">array</span> <span class="nl">thisObject:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see in the above code, a callback instance takes as a parameter an <code>NSArray</code>, thus, I have to covert my <code>NSDictionary</code> into an array via Objective-C&#8217;s handy <code>arrayWithObjects</code> function.</p>

<p>The default module examples <a href="http://docs.appcelerator.com/titanium/latest/#!/guide/Titanium_Mobile_Module_API">provided by Appcelerator naturally work</a>, but alas, the non-callback style of invocation was less than appealing, especially if you are going to be coding an <a href="http://en.wikipedia.org/wiki/Appcelerator_Titanium">Appcelerator</a> app in JavaScript. Nevertheless, you can do it easily enough provided you are willing to dig through myriad repositories&#8230;or you could save yourself the headache and read this blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile for the Masses: Activities and icons in your Android application lifecycle]]></title>
    <link href="http://thediscoblog.com/blog/2013/05/28/mobile-for-the-masses-activities-and-icons-in-your-android-application-lifecycle/"/>
    <updated>2013-05-28T15:28:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/05/28/mobile-for-the-masses-activities-and-icons-in-your-android-application-lifecycle</id>
    <content type="html"><![CDATA[<p>My third article in <a href="http://www.ibm.com/developerworks/">IBM developerWorks</a>&#8217; series <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=mobile+for+the+masses">Mobile for the Masses</a> is now out! <a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses3/index.html">This hip article</a> covers the lifecycle events associated with <code>Activity</code> classes and then shows you how to implement menus and/or activity bars (for newer devices) along with associating icons for an app itself and its corresponding activity items.</p>

<p>As the article summary states:</p>

<blockquote><p>The Activity class is the workhorse of an Android mobile app, and it&#8217;s also where you can fine-tune your app&#8217;s interactions with both the user and the mobile device. Get things working exactly the way you want them in your app&#8217;s lifecycle, then use icons and action bars to guide users through UI navigation and other app features.</p><footer><strong>IBM DeveloperWorks</strong> <cite><a href='http://www.ibm.com/developerworks/java/library/j-mobileforthemasses3/index.html'>Mobile for the Masses: Activities and Icons in Your Android Application Lifecycle</a></cite></footer></blockquote>


<p>Check out &#8221;<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses3/index.html">Mobile for the masses: Activities and icons in your Android application lifecycle</a>&#8221; and add navigation with style to your Android mobile apps! If you missed the first article, check out &#8221;<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses1/">Mobile for the masses: A gentle introduction to Android</a>&#8221;; what&#8217;s more, don&#8217;t forget to read my second article, entitled &#8221;<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Mobile for the masses: Take a swipe at it! Programming gestures in Android</a>&#8221;.</p>

<p>Stay tuned for more articles in this series and don&#8217;t forget to watch for <a href="http://thediscoblog.com/blog/categories/mobile/">mobile focused articles on this blog</a> as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ElasticSearch on EC2 in less than 60 seconds]]></title>
    <link href="http://thediscoblog.com/blog/2013/05/17/elasticsearch-on-ec2-in-less-than-60-seconds/"/>
    <updated>2013-05-17T17:24:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/05/17/elasticsearch-on-ec2-in-less-than-60-seconds</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/es-bonzai.jpg">Curious to see what all the <a href="http://www.elasticsearch.org/">ElasticSearch</a> hubbub is about? Wanna see it in action without a lot of elbow grease? Then look no further, friend &#8211; in less than 60 seconds, I&#8217;ll show you how to install <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-24/">ElasticSearch</a> on an <a href="http://aws.amazon.com/">AWS AMI</a>.</p>

<p>You&#8217;ll first <a href="http://www.drdobbs.com/web-development/getting-started-with-the-cloud-amazon-we/231601598">need an AWS account</a> along with an SSH key pair. If you don&#8217;t already have those two steps done, go ahead and do that. The steps that follow suggest a particular AMI; however, you are free to select the <a href="http://aws.amazon.com/ec2/instance-types/">instance type</a>. <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Micro instance types</a> are free to use; consequently, you can get <a href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/">up and running with ElasticSearch</a> in less than a minute <em>for free</em>.</p>

<!-- more -->


<p>Now that you&#8217;ve got an <a href="http://www.ibm.com/developerworks/web/library/j-s3/">AWS</a> account and an SSH key pair, go ahead and create a new security group (or edit an existing one). It&#8217;s important that the <a href="http://www.elasticsearch.org/tutorials/elasticsearch-on-ec2/">following ports</a> are open:</p>

<ul>
<li>22 (required for SSH)</li>
<li>80 (ElasticSearch uses HTTP for standard API calls)</li>
<li>9200 (required for ElasticSearch)</li>
<li>9300 (required for ElasticSearch)</li>
</ul>


<p>Next, fire up a Linux AMI. I, for example, prefer <a href="http://cloud-images.ubuntu.com/locator/ec2/">ami-c30360aa</a> (this is Ubuntu Server version 13.04) and I configure the AMI to use the security group that I just covered.</p>

<p>Now, SSH to your newly instantiated AMI.  Once on the AMI, you&#8217;ll need to install Java. Never fear though, I&#8217;ve got you covered. All you need to do is run a handy script via the <a href="https://github.com/aglover/ubuntu-equip">Ubuntu-Equip project</a>, that I use frequently just for this sorta thing:</p>

<figure class='code'><figcaption><span>installing Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_java.sh <span class="o">&amp;&amp;</span> bash equip_java.sh
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll need to accept the license from Oracle. Once that script completes, go ahead and type  <code>java -version</code> and you should see Oracle&#8217;s JDK (i.e Java version &#8220;1.7.0_21&#8221;).</p>

<p>Next, download and install ElasticSearch via another nifty <a href="https://github.com/aglover/ubuntu-equip">Ubuntu-Equip</a> script:</p>

<figure class='code'><figcaption><span>installing elasticsearch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_elasticsearch.sh <span class="o">&amp;&amp;</span> bash equip_elasticsearch.sh
</span></code></pre></td></tr></table></div></figure>


<p>This script doesn&#8217;t start ElasticSearch for you; thus, go ahead and change directories into the <code>elasticsearch</code> directory and fire it up like so:</p>

<figure class='code'><figcaption><span>starting elasticsearch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/elasticsearch<span class="nv">$ </span>bin/elasticsearch -f
</span></code></pre></td></tr></table></div></figure>


<p>Take a deep breath (but not too deep, as I need you to finish in less than 60 seconds) and find the Public DNS of the AMI you&#8217;ve been working on. Go ahead and copy it, then fire up a browser on your local machine and go to http://YOUR_AMI_DNS_NAME.com:9200/_plugin/inquisitor/ (be sure to note the port).</p>

<p>By the way, <a href="https://github.com/polyfractal/elasticsearch-inquisitor">Inquisitor</a> is a handy web application that lets you query your indexes. It was installed via the Ubuntu-Equip script &#8211; this tool is invaluable in figuring out how to properly query your indexes.</p>

<p>And that is it. In less than 60 seconds you&#8217;ve got ElasticSearch running in the cloud for you. Want to create a cluster? No problem, just follow these steps again to fire up another ElasticSearch instance and then <a href="http://www.elasticsearch.org/videos/three-nodes-and-one-cluster/">configure the cluster accordingly</a>.</p>

<p>I&#8217;ve not gone over <a href="http://www.elasticsearch.org/guide/reference/setup/configuration/">configuring ElasticSearch</a> nor have I showed you how to create ElasticSearch as a service on a Linux instance, but for one minute, what do you expect?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile-isticly optimized in 10 seconds]]></title>
    <link href="http://thediscoblog.com/blog/2013/05/15/mobile-isticly-optimized-in-10-seconds/"/>
    <updated>2013-05-15T13:20:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/05/15/mobile-isticly-optimized-in-10-seconds</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/unoptmobile.png">Anyone ever told you that your website isn&#8217;t mobile optimized? Or have you ever seen a lilliputian-looking website on your device? You know, one that renders so small you are forced to squint as you enlarge various parts of the site with your fingers just to read it?</p>

<p>Websites render this way on mobile devices because they lack a simple <code>meta</code> tag. While the subject of mobile website optimization can be rather involved (especially when dealing with <a href="http://css-tricks.com/css-media-queries/">CSS media queries</a>, which take longer than 10 seconds to understand), there is a simple trick that can at least can make your website render normally on a mobile device. And it can be done in 10 seconds.</p>

<!--more-->


<p>Simply add the following <code>meta</code> tag in the <code>head</code> element of your website&#8217;s index page:</p>

<figure class='code'><figcaption><span>viewport definition</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The viewport <code>meta</code> tag is supported by browsers on both iOS, Android, and by other device browsers including Internet Explorer Mobile on Windows Phone 8. This tag instructs a browser on how to properly display a webpage; without it, a webpage is, unfortunately, displayed mini-style on device browsers, which have a narrow width.</p>

<p>Thus, the viewport tag essentially zooms in the display of a webpage. In the case of the example tag above, the width of the website is set to the device&#8217;s width and the scale is set to 100% &#8211; this&#8217;ll allow the website to be displayed normally on a mobile device. Website visitors won&#8217;t have to squint or pinch and expand to just to read the site&#8217;s relevant text.</p>

<p><a href="http://www.paulund.co.uk">Paulund.co.uk</a> has a really <a href="http://www.paulund.co.uk/understanding-the-viewport-meta-tag">good write up</a> regarding the usage of the viewport <code>meta</code> tag as well as CSS media queries; what&#8217;s more, the good folks who created <a href="http://html5boilerplate.com/mobile/">HTML5boilerplate.com</a> have a <a href="http://t.co/dKP3o1e">nifty presentation</a> that&#8217;s worth a read too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The democratization of search]]></title>
    <link href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/"/>
    <updated>2013-05-14T11:33:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/democracy.jpg">Over the past year and a half, I&#8217;ve watched <a href="http://www.elasticsearch.org/">ElasticSearch</a> grow from a seemingly part-time code experiment into a thriving ecosystem. Not only has the number of <a href="http://www.elasticsearch.org/guide/clients/">client libraries</a> grown from 1 to over 25 (and counting!); it&#8217;s now a <a href="http://www.elasticsearch.com/">commercially sponsored project</a> to the tune of <a href="http://www.whiteboardmag.com/youre-hot-or-not-why-elasticsearch-raised-24-million-just-3-months-after-a-10-million-round/">$34 million</a> (a <a href="http://www.zdnet.com/elasticsearch-raises-24-million-big-data-analytics-7000011496/">$10M series A</a> and a <a href="http://gigaom.com/2013/02/19/open-source-search-tool-elasticsearch-gets-24m/">$24M series B</a>) with 200,000 downloads a month.</p>

<p>Search is the touchstone of the Internet; without search the Internet wouldn&#8217;t be all that useful. Google&#8217;s meteoric rise and its resultant eponymous name for search is clear evidence as to the importance of search. Search, however, hasn&#8217;t always been that easy nor affordable to implement.</p>

<!--more-->


<p>Before the likes of open source projects like <a href="http://lucene.apache.org/">Lucene</a>, implementing search in an application involved an expensive commercial product or a series of SQL <code>like</code> statements that were never really good enough. Lucene, however, isn&#8217;t a simple hobbyist&#8217;s pursuit. Lucene requires a lot of expertise; what&#8217;s more, successful projects within the Lucene ecosystem, like <a href="http://lucene.apache.org/solr/">Solr</a> lack a key feature that is defining modern architectures: <a href="http://www.searchblox.com/solr-vs-elasticsearch">distributed</a>.</p>

<p>The continued low cost of storage combined with cheap rent-able infrastructures like <a href="http://www.drdobbs.com/web-development/getting-started-with-the-cloud-amazon-we/231601598">AWS</a> has made it convenient to store a plethora of data, thus bringing to bear the importance that applications must support searching vast amounts of data, do it quickly, and affordably. This is where <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-24/">ElasticSearch shines</a>.</p>

<p><a href="http://www.elasticsearch.org/overview/">ElasticSearch sits on top of Lucene</a> and adds not only a simple API for adding and searching content, but does it in a distributed manner. With infinitesimal arm grease, you can set up a search cluster that smears your data and resultant queries across a series of nodes. Not only is this resultant architecture fast, but it&#8217;s easy to set up and extremely affordable as search nodes can run on commodity hardware. In essence, ElasticSearch brings search to the masses.</p>

<p>Google and its resultant ease of search has changed the mindset of application users. Searching content is a <em>presumed feature</em> and if you don&#8217;t provide it, you&#8217;re already a few steps behind your competition. ElasticSearch is clearly a path to constructing a viable, easy to install, affordable, distributed search infrastructure for any application. If you don&#8217;t believe me, take a look at some of the innovative companies with substantial amounts of users using it: <a href="https://github.com/">Github</a>, <a href="https://foursquare.com/">foursquare</a>, and <a href="http://stackoverflow.com/">Stack Overflow</a> are just a few.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hold your horses! It's still only a two horse race.]]></title>
    <link href="http://thediscoblog.com/blog/2013/05/09/hold-your-horses-its-still-only-a-two-horse-race/"/>
    <updated>2013-05-09T12:49:00-07:00</updated>
    <id>http://thediscoblog.com/blog/2013/05/09/hold-your-horses-its-still-only-a-two-horse-race</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/2horsesracesm.jpg">There has been a lot of excitement in recent months regarding a few new entrants to the mobile operating systems arena including <a href="http://www.mozilla.org/en-US/firefox/partners/">Firefox OS</a>, <a href="https://www.tizen.org/">Tizen</a>, and <a href="https://wiki.ubuntu.com/Touch">Ubuntu Touch</a>. These relatively nascent projects, which are all built on top of a Linux kernel, appear to have fully embraced HTML 5 apps; indeed, HTML 5 apps on these operating systems are first class citizens that can run without a browser. Moreover, the ubiquity of HTML 5 means the same app can run on all 3 of these operating systems plus Android and iOS!</p>

<p>What&#8217;s also exciting is that there are some major players behind these projects &#8211; Mozilla is, of course behind Firefox OS, Canonical is behind Ubuntu Touch, and quite a few large players are behind Tizen, including Samsung. <a href="http://www.forbes.com/sites/haydnshaughnessy/2013/04/13/how-mozillas-firefox-os-will-open-up-the-smartphone-market/">Firefox OS even appears to be courting carriers with an opportunity to run their own app stores</a>. This app store opportunity naturally has carriers foaming at the mouth to re-assert some semblance of control: behold the Verizon app store! All apps are $0.99 and we&#8217;ll just bill you at the end of the month (like we used to do for all those ringtones you were accustomed to download back when we were in control of all things device-related before Apple destroyed that cash cow).</p>

<!--more-->


<p>Naturally, we&#8217;re all eager to see how these new entrants fair. It reminds me of how interested I was in learning more about <a href="http://www.windowsphone.com/en-us/how-to/wp8/start/whats-new-in-windows-phone">Windows Phone 8</a> and even <a href="http://global.blackberry.com/blackberry-10.html">Blackberry&#8217;s latest and greatest attempt</a> at regaining some composure.</p>

<p>But then I remember this stunning fact: Apple and Google</p>

<blockquote><p>together control nearly 9 out of 10 smartphones sold globally.</p><footer><strong>Tomi Ahonen</strong> <cite><a href='http://www.forbes.com/sites/haydnshaughnessy/2013/04/09/ios-vs-android-can-competitors-break-apple-and-googles-stranglehold/'>Can These Competitors Break Apple and Google&#8217;s Stranglehold on the Mobile OS?</a></cite></footer></blockquote>


<p>Even with industry heavyweight contenders (who are not new to mobile!) like <a href="http://www.windowsphone.com/en-us">Microsoft</a> and <a href="http://us.blackberry.com/">Blackberry</a> (who, we all should remember, <em>owned</em> the smartphone market before Apple got involved) haven&#8217;t really made a dent. Granted, it&#8217;s early to rush to conclusions, however, preliminary signs don&#8217;t bode well for either company.</p>

<p>The co-CEO of Samsung had some stinging criticism for Microsoft:</p>

<blockquote><p>Smartphones and tablets based on Microsoft&#8217;s Windows operating system aren&#8217;t selling very well. There is a preference in the market for Android. In Europe, we&#8217;re also seeing lackluster demand for Windows-based products.</p><footer><strong>JK Shin</strong> <cite><a href='http://www.theverge.com/2013/3/15/4106980/samsung-ceo-jk-shin-says-windows-isnt-selling-very-well'>New Samsung CEO Says There Is &#8216;Lackluster Demand&#8217; for Windows Tablets and Phones</a></cite></footer></blockquote>


<p>Blackberry appears to have some demand in the UK and Canada, a recently analyst T. Michael Walkley had this to say:</p>

<blockquote><p>While we anticipate stronger near-term results for BlackBerry as higher margin BB10 smartphones sell into the channel, we do not believe BlackBerry can achieve sell-through market share levels to return to sustained profit levels</p><footer><strong>T. Michael Walkley</strong> <cite><a href='http://business.financialpost.com/2013/05/06/blackberry-estimates-cut-despite-q10-strength-likely-offsetting-z10-weakness/'>BlackBerry Sales Forecast Cut Despite Strong Demand for Q10</a></cite></footer></blockquote>


<p>The salient point, nevertheless, is that neither Microsoft or Blackberry have yet to make a dent into the Google-Apple duopoly. And so while it&#8217;s easy to get excited about new entrants like Ubuntu Touch, the reality, at least for the time being, is that these operating systems will have little impact in the smartphone market.</p>

<p>After all, when your competition essentially owns 9 out of every 10 smartphones, evolutionary enhancements aren&#8217;t enough to break that stranglehold: you have to do something <em>revolutionary</em>. Besides, we&#8217;ve already seen this before: the iPhone was not an evolutionary offshoot of the Blackberry. It was revolutionary. Sadly, neither Ubuntu Touch, Tizen, nor Firefox OS appear revolutionary.</p>
]]></content>
  </entry>
  
</feed>
