<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Disco Blog]]></title>
  <link href="http://thediscoblog.com/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2013-11-18T18:41:24-05:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Provisioning Ubuntu with Java in 3 steps]]></title>
    <link href="http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps/"/>
    <updated>2013-11-18T17:34:00-05:00</updated>
    <id>http://thediscoblog.com/blog/2013/11/18/provisioning-ubuntu-with-java-in-3-steps</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/ubuntu.png"> <a href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/">As I&#8217;ve written about before</a>, <a href="http://www.vagrantup.com/">Vagrant</a> is handy tool for creating <a href="http://www.vagrantbox.es/">localized VMs</a>. It&#8217;s a lot like firing up <a href="http://thediscoblog.com/blog/categories/aws/">EC2</a> images, but, for the most part, things are localized (you can, by the way, use Vagrant to <a href="https://github.com/mitchellh/vagrant-aws">fire up EC2 images</a>). If you&#8217;ve ever used VMWare before, its the same thing, except Vagrant is free. You can create VMs of various operating systems, fire them up, and tear them down all with ease.</p>

<p>Vagrant plays nicely with hip DevOps frameworks like <a href="http://www.opscode.com/chef/">Chef</a> and <a href="http://puppetlabs.com/">Puppet</a> and if your installations require a number of components, then these tools are defiantly the way to go. Sometimes, however, a simple Bash script is good enough as in the case for auto-installing some base component, like <a href="http://thediscoblog.com/blog/categories/java/">Java</a>, <a href="http://thediscoblog.com/blog/categories/node/">Node.js</a> or <a href="http://thediscoblog.com/blog/categories/ruby/">Ruby</a>.</p>

<p>Using Vagrant&#8217;s configuration file, aptly dubbed <code>Vagrantfile</code>, you can instruct a VM instance to run a series of steps &#8211; these steps can be simple shell scripts, Chef cookbooks, or the analogous Puppet equivalent.</p>

<!-- more -->


<p>Accordingly, the first step to provision an Ubuntu box with Java is to initialize a 64-bit <a href="http://thediscoblog.com/blog/categories/linux/">Ubuntu</a> 12.04 LTS (<a href="https://wiki.ubuntu.com/PrecisePangolin">Precise Pangolin</a>) instance. You can do this via the <code>vagrant init</code> command like so:</p>

<figure class='code'><figcaption><span>Initializing a Vagrant box</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> vagrant init ubuntu.lts.64 http://files.vagrantup.com/precise64.box
</span></code></pre></td></tr></table></div></figure>


<p>This creates a <code>Vagrantfile</code> in the directory where you ran the command and creates a named VM (i.e. &#8220;ubuntu.lts.64&#8221;) that is based off of Ubuntu 12.04 LTS.</p>

<p>Base Ubuntu installations do not come with Java; if you&#8217;d like to install a particular JDK, say Oracle&#8217;s JDK 7, you can leverage <a href="https://github.com/aglover/ubuntu-equip">ubuntu-equip</a>, which is series of Bash scripts that install various components like Java, Node.js, MongoDB, Redis, Ruby, etc.</p>

<p>Thus, for step 2, open up the newly created <code>Vagrantfile</code> and you should see two lines like so:</p>

<figure class='code'><figcaption><span>A basic VagrantFile contains the box and box_url attributes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s1">&#39;ubuntu.lts.64&#39;</span>
</span><span class='line'><span class="c1"># a few comments...</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_url</span> <span class="o">=</span> <span class="s1">&#39;http://files.vagrantup.com/precise64.box&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the <code>vm.box_url</code> declaration, insert the following line:</p>

<figure class='code'><figcaption><span>Installing Java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:shell</span><span class="p">,</span> <span class="n">inline</span><span class="p">:</span> <span class="s1">&#39;wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_java7_64.sh &amp;&amp; bash equip_java7_64.sh&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command instructs the instance to run an inline Bash command once it is up and running, which in this case auto-installs Oracle&#8217;s Java 7 JDK (see the <a href="https://github.com/aglover/ubuntu-equip">ubuntu-equip</a> project for more information).</p>

<p>Save your <code>VagrantFile</code> and then, for step 3, run the following command in the same directory:</p>

<figure class='code'><figcaption><span>Firing up a new VM</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>If this is the first time firing up this particular VM, you should see some text indicating that a particular box is being downloaded. Once the download is complete, the instance will boot up and subsequently invoke the inline provision command that kicks off the installation of Java.</p>

<p>If all goes well, you should see a lot of text scroll by ending with:</p>

<figure class='code'><figcaption><span>Java is installed!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java version <span class="s2">&quot;1.7.0_25&quot;</span>
</span><span class='line'>Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment <span class="o">(</span>build 1.7.0_25-b15<span class="o">)</span>
</span><span class='line'>Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM <span class="o">(</span>build 23.25-b01, mixed mode<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it. To use the VM, <a href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/">simply SSH to it</a>. Go ahead and type <code>java -version</code> just to convince yourself. Go ahead, I&#8217;ll wait for you&#8230;there, are you happy now?  Wasn&#8217;t that easy? Provisioning Ubuntu VMs with Vagrant couldn&#8217;t be any easier with <a href="https://github.com/aglover/ubuntu-equip">ubuntu-equip</a>, dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH &amp; Vagrant]]></title>
    <link href="http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant/"/>
    <updated>2013-10-16T15:55:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/10/16/ssh-and-vagrant</id>
    <content type="html"><![CDATA[<p><a href="http://www.vagrantup.com/">Vagrant</a> is a handy tool for creating VMs. It&#8217;s a lot like firing up an <a href="http://thediscoblog.com/blog/categories/aws/">EC2</a> instance, but in Vagrant&#8217;s case, everything is localized. And best of all, it&#8217;s free.</p>

<p>I tend to favor <a href="https://github.com/aglover/ubuntu-equip">Ubuntu</a> as my preferred flavor of linux; consequently, all production EC2 instances use a customized Ubuntu AMI. Testing various aspects of this system with various software libraries, however, is initially tested locally using Vagrant VMs. What&#8217;s more, you can install localized VMs of <a href="http://www.vagrantbox.es/">other operating systems</a> ranging from Debian to OpenSuse to <a href="https://devcenter.heroku.com/articles/stack">Heroku&#8217;s Cedalon</a>.</p>

<!-- more -->


<p>Firing up a local instance of <a href="http://thediscoblog.com/blog/categories/heroku/">Heroku</a>&#8217;s Cedalon (which is a version of Ubuntu 10.04 with Ruby and Node.js installed) is as easy as typing:</p>

<figure class='code'><figcaption><span>Firing up Heroku&#8217;s Cedalon locally</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant init heroku http://dl.dropbox.com/u/1906634/heroku.box
</span><span class='line'>vagrant up
</span></code></pre></td></tr></table></div></figure>


<p>Then you can SSH to that running VM like so:</p>

<figure class='code'><figcaption><span>SSHing to a local VM</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant ssh
</span></code></pre></td></tr></table></div></figure>


<p>The command <code>vagrant ssh</code> can be problematic, though, especially if you are automating some aspect of SSH &#8211; for example, you are using some library on top of SSH. In that case, you need to use SSH <em>directly</em> rather than through Vagrant.</p>

<p>Luckily, you can SSH normally to local Vagrant instances easily enough. You&#8217;ll need to tell SSH which key to use (Vagrant creates one for you), which user to connect as (usually vagrant), and what port to connect to (usually 2222).  All of this information can be found via the command <code>vagrant ssh-config</code>.</p>

<p>To use plain Jane SSH when working with Vagrant instances, you&#8217;ll first need to execute this command:</p>

<figure class='code'><figcaption><span>Printing out the location of Vagrant&#8217;s key</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant ssh-config | grep IdentityFile  | awk <span class="s1">&#39;{print $2}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <a href="https://groups.google.com/forum/#!topic/vagrant-up/B5WIfDcIRtE">3 pronged command</a> ultimately tells you where Vagrant has created a key file. The command <a href="http://www.thegeekstuff.com/2010/01/awk-introduction-tutorial-7-awk-print-examples/"><code>awk '{print $2}'</code></a> prints the second column of the line in the <code>ssh-config</code> string that starts with <code>IdentityFile</code> (which points to its location).</p>

<p>Now that you know where the key file is, you can ssh (assuming the default port hasn&#8217;t changed from 2222 &#8211; double check your <code>ssh-config</code> to make sure) like so:</p>

<figure class='code'><figcaption><span>Using normal SSH</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -i /some/dir/.vagrant.d/insecure_private_key -l vagrant -p 2222 127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>If you happen to fire up different VMs &#8211; for example, I have both Heroku Cedalon and normal Ubuntu instances, SSH will probably complain that the remote host identification has changed. This is a valid warning as the RSA fingerprint associated with the local host has indeed changed.</p>

<p>You can suggest that <a href="http://linuxcommando.blogspot.com/2008/10/how-to-disable-ssh-host-key-checking.html">SSH ignore this warning</a> by adding two additional flags. I highly recommend you only do this via the command line and <em>not with some SSH config file</em> as the warning SSH throws is completely legitimate and could be saving you from a man-in-the-middle attack.</p>

<p>Nevertheless, if you are working with localized VMs and need to bypass that warning, use these two flags:</p>

<figure class='code'><figcaption><span>Two additional flags to SSH</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-o <span class="nv">UserKnownHostsFile</span><span class="o">=</span>/dev/null -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no
</span></code></pre></td></tr></table></div></figure>


<p>Consequently, when I SSH to a local Vagrant instance, I type something along the lines of:</p>

<figure class='code'><figcaption><span>SSHing to Vagrant instances</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -i /some/dir/.vagrant.d/insecure_private_key -l vagrant -p 2222 -o <span class="nv">UserKnownHostsFile</span><span class="o">=</span>/dev/null -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no 127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>Finally, to shut down a Vagrant instance, just issue the command:</p>

<figure class='code'><figcaption><span>SSHing to Vagrant instances</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant destroy
</span></code></pre></td></tr></table></div></figure>


<p>Vagrant makes it super easy to fire up localized development environments &#8211; Vagrant instances boot up faster than EC2 instances and they&#8217;re free. And now you know how to use normal SSH to connect to them. Can you dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS EBS in 4 steps]]></title>
    <link href="http://thediscoblog.com/blog/2013/10/12/aws-ebs-in-4-steps/"/>
    <updated>2013-10-12T17:47:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/10/12/aws-ebs-in-4-steps</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/4fingers.jpg">When you fire up an AWS AMI, you are given a small partition of disk space that survives reboots. For example, the base <a href="https://github.com/aglover/ubuntu-equip">Ubuntu AMI</a> I tend to favor comes with an 8GB primary partition; however, 8GB is often not enough, especially if you&#8217;re running a database or something that requires a lot of disk space.</p>

<p>If you poke around on an AMI instance, you&#8217;ll notice some AMI instances will have additional partitions and in many cases, these partitions will be huge; nevertheless, they&#8217;re transient and any data on those disks will disappear after a reboot.</p>

<p>Accordingly, if you need to gain some more permanent space on an AMI instance, you&#8217;ll need to leverage an <a href="http://aws.amazon.com/ebs/">Elastic Block Store (or EBS)</a>, which is basically a permanent hard disk that you can attach to a running AMI instance. The data on an EBS will survive a reboot.</p>

<!-- more -->


<p>Attaching an <a href="http://aws.amazon.com/articles/1667">EBS is super simple</a> and can be done in 4 steps. These steps assume you&#8217;ve got a running AMI; accordingly, if you don&#8217;t have one up and running, go ahead and do that first. Finally, these instructions are for Linix/Unix systems.</p>

<p>First, you&#8217;ll need to create an EBS volume in the same zone as the AMI instance. In my case, the instance I&#8217;d like to augment with a beefy hard drive resides in us-east-1b. What&#8217;s more, you&#8217;ll need to configure how much space you&#8217;ll want &#8211; you can also select if you&#8217;d like to have <a href="http://aws.amazon.com/about-aws/whats-new/2012/07/31/announcing-provisioned-iops-for-amazon-ebs/">provisioned IOPS</a> &#8211; this is a high performance I/O feature of AWS and is intended for databases.</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/ebs1.png"></p>

<p>Once the EBS is created, you&#8217;ll need to <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">attach it</a> to your running AMI &#8211; you can do this by right clicking on the EBS in the AWS Management Console and selecting Attach Volume. You&#8217;ll need to pick your instance from a drop down. Once you&#8217;ve picked your instance, AWS will suggest a Device &#8211; I suggest you keep it. Click the &#8220;Yes, Attach&#8221; button.</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/ebs2.png"></p>

<p>SSH onto your running instance and take a peek at the <code>/proc/partitions</code> file &#8211; you should see at least 2 partitions with your newly attached one on the bottom.  The blocks are listed in kilobytes and pay special attention to the name &#8211; you&#8217;ll need it for the next few steps.</p>

<figure class='code'><figcaption><span>The contents of /proc/partitions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ubuntu@ip-10-194-97-73:~<span class="nv">$ </span>cat /proc/partitions
</span><span class='line'>major minor  <span class="c">#blocks  name</span>
</span><span class='line'>
</span><span class='line'> 202        1    8388608 xvda1
</span><span class='line'> 202       80    8388608 xvdf
</span></code></pre></td></tr></table></div></figure>


<p>As you can see above, there is an 8GB EBS volume named <code>xvdf</code> in the <code>partitions</code> file.</p>

<p>Next, you&#8217;ll want to format the volume &#8211; I&#8217;m going to format the EBS volume as ext4. The command to do this is:</p>

<figure class='code'><figcaption><span>Foratting an EBS volume</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mke2fs -F -t ext4 /dev/xvdf
</span></code></pre></td></tr></table></div></figure>


<p>Now that the volume is formatted, I can mount it &#8211; I&#8217;m going to mount it to a directory called <code>/ebs</code>; accordingly, I need to create the <code>/ebs</code> directory and then mount the <code>xvdf</code> device like so:</p>

<figure class='code'><figcaption><span>Creating and mounting the device to the ebs directory</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /ebs
</span><span class='line'>sudo mount /dev/xvdf /ebs
</span></code></pre></td></tr></table></div></figure>


<p>At this point, you are 98% done; however, the volume will not be reattached if this instance is rebooted.</p>

<p>To make this EBS volume automatically reattach after a reboot, you&#8217;ll need to add it to the <code>fstab</code> file (it&#8217;s in the <code>/etc</code> directory). When you edit that file, the file system will be
what ever you mounted (i.e <code>/dev/xvdf</code>), the mount point will be the directory you mounted it to &#8211; in my case, it&#8217;s <code>/ebs</code>. The type will be ext4 (if you formatted it that way) and for options, put default. The last two values can be 0 as well.</p>

<p>If you need to remove your EBS volume, on the attached instance, run</p>

<figure class='code'><figcaption><span>Unmounting a device</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo umount -d /dev/xvdf
</span></code></pre></td></tr></table></div></figure>


<p>And then go into the AWS Management Console, find your EBS volume, right click on it and select detach volume.</p>

<p>That&#8217;s it &#8211; you&#8217;re done! You&#8217;ve got a permanent store. In 4 steps, you&#8217;ve created an EBS volume, attached it to a running AMI, formatted and mounted it. And you&#8217;ve made it attach automatically after a reboot.  Can you dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All other metrics are useless]]></title>
    <link href="http://thediscoblog.com/blog/2013/10/09/all-other-metrics-are-useless/"/>
    <updated>2013-10-09T18:04:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/10/09/all-other-metrics-are-useless</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/time1.jpg">When it comes to queues, whether they&#8217;re implemented as <a href="http://en.wikipedia.org/wiki/Java_Message_Service">JMS</a>, database tables (i.e. what Ruby&#8217;s <a href="http://thediscoblog.com/blog/2013/06/10/backgrounding-tasks-in-heroku-with-delayed-job/">Delayed::Job</a> uses for a queue), or even <a href="http://aws.amazon.com/sqs/">Amazon&#8217;s SQS</a>, the most common metric used to evaluate the state of a queue is its length. In essence, one derives an efficiency metric based upon how many messages are residing in a queue at any given time. If there are just a few messages, the queue is operating efficiently. If there are numerous messages, things are inefficient and alarms must be sounded.</p>

<!-- more -->


<p>But what if you&#8217;re in a consistently busy environment with extreme bursts where queues have the tendency to rapidly fill up? If you have sufficient workers <em>already running</em> to handle that burst, do you need to fire up more?</p>

<p>You can fire up more workers, but doing so might cost you. That is, you might have to provision new worker instances, such as <a href="https://devcenter.heroku.com/articles/dynos">Heroku worker dynos</a> or AWS AMIs, which will end up costing you tangible money. And sometimes those worker instances take a few moments to fire up and when they&#8217;re operational, the burst of activity is over and the queue is back to normal &#8211; the initially available workers handled the load adequately.</p>

<p>It turns out that the queue&#8217;s length was a lagging indicator. You spun up unneeded resources. False alarm!</p>

<p>If you already have sufficient capacity to handle the influx of messages on a queue, then monitoring a queue&#8217;s length isn&#8217;t too helpful. In fact, it&#8217;s a misleading metric and can cause you to take unneeded actions.</p>

<p>Consequently, a queue&#8217;s length <em>is not indicative of a system&#8217;s efficiency</em> when there&#8217;s already sufficient workers present. Rather, the metric that means something in a high capacity environment is <em>how long a message resides in a queue</em>. That is an actionable metric: if messages are stuck in a queue waiting to be processed then you need more processors!</p>

<h2>Moo over queue length and let queue wait time in</h2>

<p>By default, <a href="http://www.ibm.com/developerworks/library/j-javadev2-17/">Amazon&#8217;s SQS</a> doesn&#8217;t provide the ability to query how long a message has been residing in a queue. Therefore, <a href="https://github.com/aglover/moo">I wrote Moo</a>.</p>

<p>Moo provides an interface for clients to obtain and take action on the message time in queue metric. This is done by augmenting an SQS message with a time stamp. That time stamp is then checked when a message is popped off of an SQS queue. If a threshold difference is exceed, then a callback is invoked.</p>

<p>Users of Moo will find its usage similar to <a href="https://github.com/aglover/ahoy">Ahoy!</a>, which is an asynchronous callback oriented facade on top of <a href="http://aws.amazon.com/sdkforjava/">AWS&#8217;s Java SDK</a>. In fact, Moo uses Ahoy! underneath, with the added feature of attaching a &#8220;maximum time in queue&#8221; asynchronous callback.</p>

<p>Moo supports multiple time in queue thresholds and setting a maximum time in queue threshold is done like so:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//adds a 1 second max threshold</span>
</span><span class='line'><span class="n">sqs</span><span class="o">.</span><span class="na">addQueueWaitTimeCallback</span><span class="o">(</span><span class="mi">1000</span><span class="o">,</span> <span class="k">new</span> <span class="n">QueueWaitTimeCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onThresholdExceeded</span><span class="o">(</span><span class="kt">long</span> <span class="n">waitTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//waitTime is the actual time in queue</span>
</span><span class='line'>    <span class="c1">//do something... like fire off a web hook, etc</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>addQueueWaitTimeCallback</code> method takes a millisecond maximum time in queue value and an accompanying <code>QueueWaitTimeCallback</code> callback implementation. The <code>onThresholdExceeded</code> method will be invoked asynchronously during a message receive if the maximum threshold value is exceeded; what&#8217;s more, the <code>onThresholdExceeded</code> will receive as a parameter the actual queue wait time.</p>

<h4>Show me the Moo</h4>

<p>To fire up an instance of Moo, you have a number of options, including configuring an instance of AWS&#8217;s <code>AmazonSQS</code> or just passing along a key, secret, and queue name like so:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SQS</span> <span class="n">sqs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SQS</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;key&quot;</span><span class="o">),</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;secret&quot;</span><span class="o">),</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;queue&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Next, you can attach zero to many <code>QueueWaitTimeCallback</code> instances like so:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sqs</span><span class="o">.</span><span class="na">addQueueWaitTimeCallback</span><span class="o">(</span><span class="mi">600000</span><span class="o">,</span> <span class="k">new</span> <span class="n">QueueWaitTimeCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onThresholdExceeded</span><span class="o">(</span><span class="kt">long</span> <span class="n">actualWaitTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//do something -- fire off SNS message?</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, I&#8217;ve added a callback to be invoked if messages are in a queue longer than 10 minutes. Note, these <code>QueueWaitTimeCallback</code> callbacks are fired by the <em>queue reader</em> instance; accordingly, a <code>QueueWaitTimeCallback</code> can certainly fire up more instances of itself, for example.</p>

<p>Here&#8217;s a sample JSON document that you might want to throw onto an SQS queue:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span> <span class="s">&quot;employees&quot;</span><span class="o">:[</span>
</span><span class='line'>      <span class="o">{</span> <span class="s">&quot;firstName&quot;</span><span class="o">:</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;lastName&quot;</span><span class="o">:</span><span class="s">&quot;Doe&quot;</span> <span class="o">},</span>
</span><span class='line'>      <span class="o">{</span> <span class="s">&quot;firstName&quot;</span><span class="o">:</span><span class="s">&quot;Anna&quot;</span><span class="o">,</span> <span class="s">&quot;lastName&quot;</span><span class="o">:</span><span class="s">&quot;Smith&quot;</span> <span class="o">},</span>
</span><span class='line'>      <span class="o">{</span> <span class="s">&quot;firstName&quot;</span><span class="o">:</span><span class="s">&quot;Peter&quot;</span><span class="o">,</span> <span class="s">&quot;lastName&quot;</span><span class="o">:</span><span class="s">&quot;Jones&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sending and receiving this message are exactly like you&#8217;d do if you were using Ahoy!. For example, to send a message, just pass along a <code>String</code> to the <code>send</code> method:</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sqs</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="k">new</span> <span class="n">SendCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSend</span><span class="o">(</span><span class="n">String</span> <span class="n">messageId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//messageId is from SQS</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, the <code>send</code> method takes an optional <code>SendCallback</code>.</p>

<p>Receiving a message is via the <code>receive</code> method, which takes a mandatory <code>ReceiveCallback</code> &#8211; this callback will be invoked asynchronously <em>for each</em> message received off of a queue. Each instance will receive the message placed upon the queue and the message&#8217;s SQS id.</p>

<figure class='code'><figcaption><span>Adding a maximum threshold for time in queue</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">sqs</span><span class="o">.</span><span class="na">receive</span><span class="o">(</span><span class="k">new</span> <span class="n">ReceiveCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">String</span> <span class="n">messageId</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//do something w/the message -- in this case it&#39;s JSON</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, if upon the receive of a message, Moo notices that a message has been waiting in a queue for more than the max queue wait time threshold configured for an associated <code>QueueWaitTimeCallback</code>, Moo will invoke it. Note, Moo can invoke more than one instance; thus, you can set up a chain to take various actions as times increase.</p>

<p>Remember, a queue&#8217;s length is usually a lagging indicator.  The metric that actually means something is how long a message resides in a queue. That&#8217;s an actionable metric and <a href="https://github.com/aglover/moo">Moo</a> gives you the ability to do something about it! Can you dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The significance of HTML5]]></title>
    <link href="http://thediscoblog.com/blog/2013/10/05/the-significance-of-html5/"/>
    <updated>2013-10-05T21:18:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/10/05/the-significance-of-html5</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/no-flash.jpg"><a href="http://thediscoblog.com/blog/categories/html5/">HTML5</a> is important for three reasons. And its importance starts with the end of browser plugins. That&#8217;s right. With HTML5, rich media aspects that were formally handled by plugins (think Flash), are now built-in. That&#8217;s why there are <a href="http://www.w3schools.com/html/html5_new_elements.asp">new media tags</a> like <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code>.</p>

<p>Think about it for a second &#8211; when&#8217;s the last time you visited a site on your tablet that asked you to install a plugin? Never.</p>

<p>That&#8217;s also why some older plugin laden sites do not work on your mobile device. Remember the whole &#8221;<a href="http://www.apple.com/hotnews/thoughts-on-flash/">Steve Jobs no flash</a>&#8221; kerfuffle years ago? Yep, Mr. Jobs was adamant that the iPhone would support HTML5 and not fall into the plugin trap. Incidentally, Google and other major vendors have since followed suit. <a href="http://en.wikipedia.org/wiki/HTML5">HTML5 has the support of all major browser vendors now</a> &#8211; Apple, Google, Firefox, Opera, and yes, even Microsoft.</p>

<!-- more -->


<p></p>

<p><img class="left" src="http://thediscoblog.com/images/mine/alotofdevices.jpg">HTML5 is important because now that <a href="http://thediscoblog.com/blog/2012/12/02/comprehending-the-mobile-development-landscape/">all major vendors support it</a> &#8211; including those in the mobile space &#8211; you get a universal experience across a wide spectrum of devices. While particular features of HTML5 might <a href="http://thediscoblog.com/blog/2012/09/24/a-tale-of-three-browsers/">vary by device platform</a>, there are enough common ground features to build a compelling web app that looks and feels similar across the gamut of devices.</p>

<p>And as HTML5 <a href="http://thediscoblog.com/blog/2013/04/05/crowd-think-often-lacks-clarity/">continues to evolve</a>, the differences between various implementations should narrow. Accordingly, with HTML5, you get device ubiquity. You get a chance to build something once and have it work across a wide spectrum of browsers.</p>

<p>What&#8217;s more, while the mobile market is still dominated by Apple and Google, as other players, <a href="http://thediscoblog.com/blog/2013/09/09/8-percent-is-itty-bitty-but-it-matters/">like Microsoft</a>, begin to establish a beachhead, app developers will have to contend with more than two platforms. For a variety of apps, like those being built for the enterprise, the promise of HTML5&#8217;s device ubiquity starts to become quite appealing &#8211; after all, building an app once, as <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">opposed to three or more times</a>, is less expensive.</p>

<p><img class="right" src="http://thediscoblog.com/images/mine/amazonappstore.jpg">Finally, HTML5 is important because <a href="http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters/">Amazon recently announced support for HTML5</a> apps in their App Store for Android. Previous to this announcement, pure HTML5 apps had no real mass distribution model. HTML5 app developers relied on a search engine, while native app developers have a direct channel to consumers that cuts through a lot of noise and makes it easy to find specific apps.</p>

<p>Consequently, a lot of HTML5 apps ended up being <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">wrapped in native code</a> so as to get a chance to compete in the app stores. Amazon&#8217;s support of HTML5 is a much needed <a href="http://thediscoblog.com/blog/2013/03/04/its-a-question-of-wow/">shot-in-the-arm for HTML5</a> because it means a direct channel to mass consumers; what&#8217;s more, Amazon also is offering a chance to monetize HTML5 apps <a href="https://developer.amazon.com/sdk/webapps/iap/understanding.html">via a JavaScript In-App purchase API</a>. While Amazon isn&#8217;t the first In-App purchase API for HTML5, it&#8217;s the first one linked to a major e-commerce platform and mass consumer channel.</p>

<p>HTML5 is by no means a silver bullet for mobile app development. There&#8217;s a time and a place for HTML5 apps, just as there&#8217;s still a need to create native apps. Nevertheless, HTML5 continues to gain favor as app stores (like Amazon&#8217;s App store for Android) begin to distribute HTML5 apps and other platforms begin to capture market share.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ahoy there callbacks!]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/29/ahoy-there-callbacks/"/>
    <updated>2013-09-29T16:30:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/29/ahoy-there-callbacks</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/callback.jpg">Because it&#8217;s my bag, I like <a href="http://thediscoblog.com/blog/categories/javascript/">JavaScript</a>. In fact, I&#8217;ve grown to love JavaScritp&#8217;s asynchronous <a href="http://en.wikipedia.org/wiki/Callback_(computer_programming">callback oriented style of programming</a>. Consequently, when I find myself in a non-JavaScript environment, say, like <a href="http://thediscoblog.com/blog/categories/java/">Java</a>, I tend to miss using callbacks.</p>

<p>The good news is that you can <em>emulate</em> asynchronous callbacks in Java. In fact, I did just that recently with a library I&#8217;ve dubbed <a href="https://github.com/aglover/ahoy">Ahoy!</a>, which is an asynchronous <a href="http://www.ibm.com/developerworks/library/j-javadev2-17/">SQS adapter</a> for AWS&#8217;s Java <a href="http://aws.amazon.com/sqs/">SQS</a> library.</p>

<!-- more -->


<p>For the uninitiated, <a href="http://www.ibm.com/developerworks/library/j-javadev2-17/">SQS is a cloud based messaging platform</a> &#8211; with SQS you can create queues and put messages onto those queues, which can then be read &#8211; later or immediately by some other process or the same exact process. All of this leverages Amazon’s massively redundant architecture to offer extremely high availability in the face of concurrent access.</p>

<p>Asynchronous callbacks in Java can be achieved with two features: anonymous classes (containing one method) and Java&#8217;s <code>java.util.concurrent</code> package.</p>

<p>Because Java doesn&#8217;t allow you to pass functions (or methods) <em>easily</em> as a parameter, to simulate a callback, you can create an interface that contains one method, which basically mimics a function. In the case of Ahoy, there are two interfaces: <code>MessageSendCallback</code> and <code>MessageReceivedCallback</code> &#8211; both have one method: <code>onSend</code> and <code>onReceive</code> respectively. Accordingly, Ahoy!&#8221;s primary class, dubbed <code>SQSAdapter</code> exposes two simple methods: <code>send</code> and <code>receive</code> and both take their related callback interface.</p>

<p>The most straightforward callback to understand is the <code>receive</code> method. As you can imagine, <code>receive</code> is intended to handle behavior when a message is received off of a particular queue. Thus, the <code>receive</code> method is defined as follows:</p>

<figure class='code'><figcaption><span>SQSAdapter&#8217;s receive method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">receive</span><span class="o">(</span><span class="kd">final</span> <span class="n">MessageReceivedCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>MessageReceivedCallback</code> interface looks like this:</p>

<figure class='code'><figcaption><span>The MessageReceivedCallback interface</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MessageReceivedCallback</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">String</span> <span class="n">messageId</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, the <code>onReceive</code> method takes a message id (which is particular to SQS) and the message itself &#8211; which in the case of SQS is always a <code>String</code> (that <code>String</code> can hold anything you want, keep in mind: JSON, XML, byte sequence, etc).</p>

<p>Thus, clients of Ahoy! provide the intended behavior for a message when it is received. This behavior could be to write something to a database, generate another message and send it on another queue, you name it.</p>

<p>Now the interesting part is the implementation of Ahoy!&#8217;s <code>receive</code> method. To achieve asynchronocity, I employed Java&#8217;s <code>java.util.concurrent</code> package, which sadly, seems to be under appreciated.</p>

<figure class='code'><figcaption><span>The receive method&#8217;s implementation with callback being invoked</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">receive</span><span class="o">(</span><span class="kd">final</span> <span class="n">AmazonSQS</span> <span class="n">sqs</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">queueURL</span><span class="o">,</span> <span class="kd">final</span> <span class="n">MessageReceivedCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">sqs</span><span class="o">.</span><span class="na">receiveMessage</span><span class="o">(</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">ReceiveMessageRequest</span><span class="o">(</span><span class="n">queueURL</span><span class="o">).</span><span class="na">withMaxNumberOfMessages</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">withWaitTimeSeconds</span><span class="o">(</span><span class="mi">20</span><span class="o">)).</span><span class="na">getMessages</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">messages</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Message</span> <span class="n">message</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">callback</span><span class="o">.</span><span class="na">onReceive</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">getMessageId</span><span class="o">(),</span> <span class="n">message</span><span class="o">.</span><span class="na">getBody</span><span class="o">());</span>
</span><span class='line'>            <span class="n">sqs</span><span class="o">.</span><span class="na">deleteMessage</span><span class="o">(</span><span class="k">new</span> <span class="n">DeleteMessageRequest</span><span class="o">(</span><span class="n">queueURL</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">getReceiptHandle</span><span class="o">()));</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a fixed Thread pool, a thread is created, which waits for messages to arrive on a particular queue; when one shows up, the passed in <code>MessageReceivedCalledback</code> is invoked for each message.</p>

<p>For an example of how this works for clients of Ahoy!, here&#8217;s a test case that verifies the execution of the callback:</p>

<figure class='code'><figcaption><span>The receive method implemented</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">wasReceived</span> <span class="o">=</span> <span class="o">{</span><span class="kc">false</span><span class="o">};</span>
</span><span class='line'><span class="n">ahoy</span><span class="o">.</span><span class="na">receive</span><span class="o">(</span><span class="k">new</span> <span class="n">MessageReceivedCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">String</span> <span class="n">messageId</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">wasReceived</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="s">&quot;message id was null&quot;</span><span class="o">,</span> <span class="n">messageId</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;message wasn&#39;t &quot;</span> <span class="o">+</span> <span class="n">origMessage</span><span class="o">,</span> <span class="n">origMessage</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Likewise, sending a message is similar &#8211; a new <code>Runnable</code> instance is created, which sends a particular message and invokes the passed in <code>MessageSentCallback</code>&#8217;s <code>onSend</code> method, passing in the newly sent messages&#8217;s id.</p>

<figure class='code'><figcaption><span>The send method is also asynchronous</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">send</span><span class="o">(</span><span class="kd">final</span> <span class="n">AmazonSQS</span> <span class="n">sqs</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">queueURL</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">message</span><span class="o">,</span> <span class="kd">final</span> <span class="n">MessageSentCallback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SendMessageResult</span> <span class="n">res</span> <span class="o">=</span> <span class="n">sqs</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="k">new</span> <span class="n">SendMessageRequest</span><span class="o">(</span><span class="n">queueURL</span><span class="o">,</span> <span class="n">message</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">callback</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">callback</span><span class="o">.</span><span class="na">onSend</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="na">getMessageId</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Incidentally, the AWS Java SDK <em>does provide an asynchronous client</em>; however, this client&#8217;s implementation leverages Java&#8217;s <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html">Futures</a>. While <a href="http://nurkiewicz.blogspot.com/2013/02/javautilconcurrentfuture-basics.html">Futures are a neat concept</a>, Ahoy!&#8217;s implementation is more convenient (<em>at least for me and in the patterns of how I employ SQS</em>) than Futures as there isn&#8217;t any polling involved once a message is sent or received.</p>

<p>While callbacks aren&#8217;t <a href="http://en.wikipedia.org/wiki/Function_object#In_Java">necessarily supported</a> natively in Java, you can emulate them quite nicely and achieve the same level of code conciseness as what&#8217;s common in JavaScript. And if you need a handy way to interface with AWS SQS, <a href="https://github.com/aglover/ahoy">then give Ahoy! a try</a>! Can you dig it, man?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App signing: iOS versus Android]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/26/app-signing-ios-versus-android/"/>
    <updated>2013-09-26T10:16:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/26/app-signing-ios-versus-android</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/sealed.jpg">Apple&#8217;s app signing process can be a real pain-in-the-neck; nevertheless, it works to keep apps trusted. You know when you download a Bank of America app from iTunes that it&#8217;s the real thing. You know that the app comes from <em>the</em> Bank of America.</p>

<p>On the other hand, Android allows apps to be self-signed. This has a fundamental flaw: an Android developer can claim to be anyone they want, <em>including Bank of America</em>. Thus, when you download an app from an Android App store, there&#8217;s a real possibility that the app was submitted by a charlatan. What&#8217;s more, those charlatan apps can actually be malicious!</p>

<!-- more -->


<p><a href="http://twitter.com/danieleran">Daniel Eran Dilger</a> has written an excellent article that features the differences between Apple&#8217;s signing process and Google&#8217;s. I highly recommend you read his article entitled &#8221;<a href="http://appleinsider.com/articles/13/07/14/editorial-googles-android-haunted-by-steve-jobs-warnings-on-app-signing-security">Google&#8217;s Android haunted by Steve Jobs&#8217; warnings on app signing security</a>&#8221; as it sheds a bright light on the differences between the two mobile platforms; moreover, the article does a great job of outlining the evolution of iOS and its app security policies.</p>

<p>And while you are at it, check out my article entitled &#8221;<a href="http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html">Mobile for the masses: Sign, seal, and deliver your Android app</a>&#8221; and learn how to sign your Android app in preparation for submitting it to an app store!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I like my ElasticSearch a la Node.js]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/21/i-like-my-elasticsearch-a-la-node-dot-js/"/>
    <updated>2013-09-21T08:57:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/21/i-like-my-elasticsearch-a-la-node-dot-js</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/320px-Pie_A_La_Mode.jpg">While <a href="http://thediscoblog.com/blog/categories/elasticsearch/">ElasticSearch</a> is easy enough to work with via its RESTful HTTP API, there are <a href="http://www.elasticsearch.org/guide/clients/">myriad client libraries</a> available in almost every conceivable programming language. If <a href="http://thediscoblog.com/blog/categories/node/">Node.js</a> is your language of choice, then there&#8217;s at least two actively supported libraries available.</p>

<p>My favorite is dubbed, albeit rather dully, &#8221;<a href="https://github.com/phillro/node-elasticsearch-client">Elastic Search Client</a>&#8221;, but don&#8217;t let the library&#8217;s unimaginative name fool you: this is a handy library that allows you to do everything you could do via cURL with the added benefit of JavaScript callbacks. Best of all, you can use the Node Elastic Search Client in <a href="http://thediscoblog.com/blog/categories/coffeescript/">Coffeescript</a>, which is a handy language that makes JavaScript less verbose and that ultimately compiles into JavaScript.</p>

<!-- more -->


<p>Accordingly, if you&#8217;re familiar with the typical RESTful API calls for creating and mapping indexes, plus indexing and searching documents, then you&#8217;ll find Elastic Search Client easy enough to pick up.</p>

<p>To get started, add the library as a dependency in your NPM <code>package.json</code> file like so:</p>

<figure class='code'><figcaption><span>My package.json file that lists the latest version of elasticsearchclient.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;dependencies&quot;</span><span class="err">:</span><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;elasticsearchclient&quot;</span> <span class="p">:</span> <span class="s2">&quot;latest&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;mocha&quot;</span> <span class="p">:</span> <span class="s2">&quot;latest&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;should&quot;</span> <span class="p">:</span> <span class="s2">&quot;latest&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;coffee-script&quot;</span> <span class="p">:</span> <span class="s2">&quot;latest&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I happen to prefer <a href="http://coffeescript.org/">CoffeeScript</a> over JavaScript, I&#8217;ve also included CoffeeScript as a dependency.</p>

<p>Like any Node library, you&#8217;ll need to include a library it via a <code>require</code> statement to make use of it. In this case, I&#8217;ll require <code>'elasticsearchclient'</code> and then connect to a local instance like so:</p>

<figure class='code'><figcaption><span>Initalizing a new client</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ElasticSearchClient</span> <span class="o">=</span> <span class="nx">require</span> <span class="s1">&#39;elasticsearchclient&#39;</span>
</span><span class='line'><span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ElasticSearchClient</span> <span class="p">{</span> <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="nx">port</span><span class="o">:</span> <span class="mi">9200</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Going forward, I&#8217;m going to reference a few variables, namely <code>indexName</code>, which is &#8220;beer_recipes&#8221; and <code>objName</code>, which is &#8220;beer&#8221;. What&#8217;s more, this code is using <a href="http://visionmedia.github.io/mocha/">Mocha</a> and <a href="https://github.com/visionmedia/should.js/">should</a>, so that&#8217;ll explain the various specification related statements in the examples below.</p>

<p>With a connection to an Elasticsearch server, I can consequently create an index like so:</p>

<figure class='code'><figcaption><span>Creating an index in a before clause</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span> <span class="s1">&#39;Create and update an index&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">before</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">client</span><span class="p">.</span><span class="nx">createIndex</span><span class="p">(</span><span class="nx">indexName</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span> <span class="nx">data</span>
</span><span class='line'>          <span class="nx">data</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">ok</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I can update the index&#8217;s mapping too. Just use the <code>putMapping</code> call:</p>

<figure class='code'><figcaption><span>Updating an Index mapping</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span> <span class="s1">&#39;should support a mapping put which changes the analyzer&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">snowball</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;mappings&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;beer&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;properties&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;ingredients&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;analyzer&quot;</span> <span class="o">:</span> <span class="s2">&quot;snowball&quot;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}}</span>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">putMapping</span><span class="p">(</span><span class="nx">indexName</span><span class="p">,</span> <span class="nx">objName</span><span class="p">,</span> <span class="nx">snowball</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span> <span class="nx">data</span>
</span><span class='line'>      <span class="nx">data</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">ok</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the actual mapping JSON document is identical to what I&#8217;d have to pass via cURL, for instance.</p>

<p>You should start to notice a pattern with respect to how the Elastic Search Client deals with callbacks &#8211; using an <code>on</code> method, you can register a callback for <code>'data'</code>, which essentially entails the response from the server; moreover, you can also register a listener for <code>'error'</code>, which as you can imagine, gets invoked if there is a problem.</p>

<p>Deleting an index is just as easy as creating one too:</p>

<figure class='code'><figcaption><span>Deleting an index</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">after</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">deleteIndex</span><span class="p">(</span><span class="nx">indexName</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span> <span class="nx">data</span>
</span><span class='line'>      <span class="nx">data</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">ok</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>To index a document, you simply use the <code>index</code> function like so:</p>

<figure class='code'><figcaption><span>Indexing a document</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">beer</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Todd Enders&#39; Witbier&quot;</span><span class="p">,</span> <span class="s2">&quot;style&quot;</span><span class="o">:</span> <span class="s2">&quot;wit, Belgian ale, wheat beer&quot;</span><span class="p">,</span> <span class="s2">&quot;ingredients&quot;</span><span class="o">:</span> <span class="s2">&quot;4.0 ...&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="nx">indexName</span><span class="p">,</span> <span class="nx">objName</span><span class="p">,</span> <span class="nx">beer</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span> <span class="nx">data</span>
</span><span class='line'>  <span class="nx">data</span><span class="p">.</span><span class="nx">ok</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span> <span class="kc">true</span>
</span><span class='line'><span class="p">.</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Note in this case, I pass along an index name, and object name, and a JSON document to index. Because JSON marries so nicely with JavaScript, this library is quite nice, don&#8217;t you think?</p>

<p>Searching is just as easy (as I&#8217;m sure you already guessed). You create a query JSON document and pass it along to the <code>search</code> method like so:</p>

<figure class='code'><figcaption><span>Searching is just as easy!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">iquery</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;query&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;term&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;ingredients&quot;</span> <span class="o">:</span> <span class="s2">&quot;lemons&quot;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">indexName</span><span class="p">,</span> <span class="nx">objName</span><span class="p">,</span> <span class="nx">iquery</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">idata</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span> <span class="nx">idata</span>
</span><span class='line'>  <span class="nx">result</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">total</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">()</span>
</span><span class='line'><span class="p">.</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resultant response from the server is a JSON document that must be parsed and dealt with accordingly.</p>

<p>Of course, you can grab an individual document via its id just as easily:</p>

<figure class='code'><figcaption><span>Getting an individual document via its document id</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">indexName</span><span class="p">,</span> <span class="nx">objName</span><span class="p">,</span> <span class="nx">doc_id</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">getData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">doc</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span> <span class="nx">getData</span>
</span><span class='line'>  <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span> <span class="s2">&quot;Todd Enders&#39; Witbier&quot;</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">()</span>
</span><span class='line'><span class="p">.</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Node&#8217;s Elastic Search Client is a breeze to pick up; plus, the natural union of JSON and JavaScript make Node a perfect language for interfacing with ElasticSearch. Dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile for the masses: Sign, seal, and deliver your Android app]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/17/mobile-for-the-masses-sign-seal-and-deliver-your-android-app/"/>
    <updated>2013-09-17T15:20:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/17/mobile-for-the-masses-sign-seal-and-deliver-your-android-app</id>
    <content type="html"><![CDATA[<p>The fifth article in <a href="http://www.ibm.com/developerworks/">IBM developerWorks</a>&#8217; series <a href="http://www.ibm.com/developerworks/views/java/libraryview.jsp?search_by=mobile+for+the+masses">Mobile for the Masses</a> has been published! <a href="http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html">This hip article</a> shows you how to add a multiple-choice quiz to your Android mobile app, then sign it with a secure digital certificate.</p>

<!-- more -->


<p>As the article summary states:</p>

<blockquote><p>By web logic, content is king; but for mobile users, interaction rules. Static information design is out for mobile apps, and gamification is in. This month Andrew Glover concludes his introduction to Android mobile development by adding a multiple-choice quiz feature to the example app, Overheard Word, introduced in a previous article. Then he shows you how to generate a digital signature and publish and promote your signed app on Google Play or Amazon Appstore for Android.</p><footer><strong>IBM DeveloperWorks</strong> <cite><a href='http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html'>Mobile for the Masses: Sign, Seal, and Deliver Your Android App</a></cite></footer></blockquote>


<p>Check out &#8221;<a href="http://www.ibm.com/developerworks/java/library/mo-mobileforthemasses5/index.html">Mobile for the masses: Sign, seal, and deliver your Android app</a>&#8221; and learn how to sign your app in preparation for submitting it to an app store! If you missed the first article, check out &#8221;<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses1/">Mobile for the masses: A gentle introduction to Android</a>&#8221;; what&#8217;s more, don&#8217;t forget to read my second article, entitled &#8221;<a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Mobile for the masses: Take a swipe at it! Programming gestures in Android</a>&#8221; and the third article &#8221;<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses3/index.html">Mobile for the masses: Activities and icons in your Android application lifecycle</a>&#8221;. Finally, don&#8217;t forget to read article number four: &#8221;<a href="http://www.ibm.com/developerworks/java/library/j-mobileforthemasses4/index.html">Mobile for the masses: Mobile for the masses: Words and gestures with Overheard Word</a>&#8221; and programmatically integrate third-party code into your Android UI!</p>

<p>Stay tuned for more articles in this series and don&#8217;t forget to watch for <a href="http://thediscoblog.com/blog/categories/mobile/">mobile focused articles on this blog</a> as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding ElasticSearch analyzers]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/14/understanding-elasticsearch-analyzers/"/>
    <updated>2013-09-14T08:37:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/14/understanding-elasticsearch-analyzers</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/old-beer.jpg">Sadly, lots of early Internet beer recipes aren&#8217;t necessarily in an easily digestible format; that is, these recipes are <em>unstructured</em> intermixed lists of directions and ingredients often originally composed in an email or forum post.</p>

<p>So while it&#8217;s hard to easily put these recipes into traditional data stores (ostensibly for easier searching), they&#8217;re perfect for <a href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/">ElasticSearch</a> in their current form.</p>

<p>Accordingly, imagine an <a href="http://thediscoblog.com/blog/2013/05/17/elasticsearch-on-ec2-in-less-than-60-seconds/">ElasticSearch</a> index full of beer recipes, since&#8230;well&#8230;I enjoy making beer (and drinking it too).</p>

<!-- more -->


<p>First, I&#8217;ll add some beer recipes into ElasticSearch using <a href="https://github.com/phillro/node-elasticsearch-client">Node&#8217;s ElasticSearch Client</a>(note that the code is <a href="http://thediscoblog.com/blog/categories/coffeescript/">CoffeeScript</a> though). I&#8217;ll be adding these beer recipes into a <code>beer_recipes</code> index like so:</p>

<figure class='code'><figcaption><span>Adding a beer recipe </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">beer_1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Todd Enders&#39; Witbier&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">style</span><span class="o">:</span> <span class="s2">&quot;wit, Belgian ale, wheat beer&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">ingredients</span><span class="o">:</span> <span class="s2">&quot;4.0 lbs Belgian pils malt, 4.0 lbs raw soft red winter wheat, 0.5 lbs rolled oats, 0.75 oz coriander, freshly ground Zest from two table oranges and two lemons, 1.0 oz 3.1% AA Saaz, 3/4 corn sugar for priming, Hoegaarden strain yeast&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="s1">&#39;beer_recipes&#39;</span><span class="p">,</span> <span class="s1">&#39;beer&#39;</span><span class="p">,</span> <span class="nx">beer_1</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'><span class="p">).</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how the interesting part of a recipe JSON document, dubbed <code>beer_1</code> is found in the <code>ingredients</code> field. This field is basically a big string of valuable text (you can imagine how this string was essentially the body of an email). So while the <code>ingredients</code> field is unstructured, it&#8217;s something clearly that people will want to search on.</p>

<p>I will add one more recipe for good measure:</p>

<figure class='code'><figcaption><span>Adding a second beer recipe</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">beer_2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Wit&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">style</span><span class="o">:</span> <span class="s2">&quot;wit, Belgian ale, wheat beer&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">ingredients</span><span class="o">:</span> <span class="s2">&quot;4 lbs DeWulf-Cosyns &#39;Pils&#39; malt, 3 lbs brewers&#39; flaked wheat (inauthentic; will try raw wheat nest time), 6 oz rolled oats, 1 oz Saaz hops (3.3% AA), 0.75 oz bitter (Curacao) orange peel quarters (dried), 1 oz sweet orange peel (dried), 0.75 oz coriander (cracked), 0.75 oz anise seed, one small pinch cumin, 0.75 cup corn sugar (priming), 10 ml 88% food-grade lactic acid (at bottling), BrewTek &#39;Belgian Wheat&#39; yeast&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">index</span><span class="p">(</span><span class="s1">&#39;beer_recipes&#39;</span><span class="p">,</span> <span class="s1">&#39;beer&#39;</span><span class="p">,</span> <span class="nx">beer_2</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'><span class="p">).</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s a hot summers day and I&#8217;m thinking I&#8217;d like to make a beer with <em>lemon</em> as an ingredient (to be clear: I want to use lemon zest, which is obtained from a lemon peel). So naturally, I need to find (i.e. <em>search for</em>) a recipe with lemons in it.</p>

<p>Consequently, I&#8217;ll search my index for recipes that contain the word &#8220;lemon&#8221; like so:</p>

<figure class='code'><figcaption><span>Searching for lemon</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;query&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;term&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;ingredients&quot;</span> <span class="o">:</span> <span class="s2">&quot;lemon&quot;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;beer_recipes&#39;</span><span class="p">,</span> <span class="s1">&#39;beer&#39;</span><span class="p">,</span> <span class="nx">query</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">doc</span> <span class="k">in</span> <span class="nx">data</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">hits</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">style</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">ingredients</span>
</span><span class='line'><span class="p">).</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>But nothing shows up &#8211; there are no results! Why is that?</p>

<p>If you look closely in the earlier code example (specifically, the <code>beer_1</code> JSON document), you can see that the word &#8220;lemons&#8221; is in the text (i.e. &#8220;&#8230;two table oranges and two lemons&#8230;&#8221;). It turns out, by default, the way values are indexed by ElasticSearch, <em>lemon</em> doesn&#8217;t necessarily match &#8211; <em>lemons</em> does though.</p>

<figure class='code'><figcaption><span>Searching for lemons</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;query&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;term&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;ingredients&quot;</span> <span class="o">:</span> <span class="s2">&quot;lemons&quot;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;beer_recipes&#39;</span><span class="p">,</span> <span class="s1">&#39;beer&#39;</span><span class="p">,</span> <span class="nx">query</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">doc</span> <span class="k">in</span> <span class="nx">data</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">hits</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">style</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">ingredients</span>
</span><span class='line'><span class="p">).</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lo and behold, this search returns a hit! But that&#8217;s inconvenient, to say the least. Basically the words in the <code>ingredients</code> field are tokenized <em>as is</em>. Hence, a search for &#8220;lemons&#8221; works while &#8220;lemon&#8221; doesn&#8217;t. Note: there are various mechanisms for searching, and a search on &#8220;lemon*&#8221; should have returned a result.</p>

<p>When a document is added into an <a href="http://thediscoblog.com/blog/2013/01/02/scalable-searching-with-elasticsearch/">ElasticSearch</a> index, its fields are analyzed and converted into <em>tokens</em>. When you execute a search against an index, you search against those tokens. How ElasticSearch tokenizes a document is configurable.</p>

<p>There are different ElasticSearch analyzers available &#8211; from language analyzers that allow you to support non-English language searches to the <a href="http://snowball.tartarus.org/">snowball</a> analyzer, which converts a word into its root (or stem and that process of creating a stem from a word is called <em><a href="http://snowball.tartarus.org/algorithms/english/stemmer.html">stemming</a></em>), yielding a simpler token. For example, a snowball of &#8220;lemons&#8221; would be &#8220;lemon&#8221;. Or if the words &#8220;knocks&#8221; and &#8220;knocking&#8221; were in a snowball analyzed document, both terms would have &#8220;knock&#8221; as a stem.</p>

<p>You can change how documents are tokenized via the index mapping API like so:</p>

<figure class='code'><figcaption><span>Changing the mapping for an index using cURL</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XPUT <span class="s1">&#39;http://localhost:9200/beer_recipes&#39;</span> -d <span class="s1">&#39;{ &quot;mappings&quot; : {</span>
</span><span class='line'><span class="s1">  &quot;beer&quot; : {</span>
</span><span class='line'><span class="s1">    &quot;properties&quot; : {</span>
</span><span class='line'><span class="s1">      &quot;ingredients&quot; : { &quot;type&quot; : &quot;string&quot;, &quot;analyzer&quot; : &quot;snowball&quot; }</span>
</span><span class='line'><span class="s1">    }</span>
</span><span class='line'><span class="s1">   }</span>
</span><span class='line'><span class="s1"> }</span>
</span><span class='line'><span class="s1">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how the above mapping specifies that the <code>ingredients</code> field will be analyzed via the snowball analyzer. Also note, you have to change the mapping of an index <em>before</em> you begin to add documents to it! So, in this case, I&#8217;ll need to drop the index, run the mapping call above, and then re-add those two recipes.</p>

<p>Now I can begin searching recipes for the ingredient &#8220;lemon&#8221;  or &#8220;lemons&#8221;.</p>

<figure class='code'><figcaption><span>Searching for lemon now works!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;query&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;term&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;ingredients&quot;</span> <span class="o">:</span> <span class="s2">&quot;lemon&quot;</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;beer_recipes&#39;</span><span class="p">,</span> <span class="s1">&#39;beer&#39;</span><span class="p">,</span> <span class="nx">query</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">doc</span> <span class="k">in</span> <span class="nx">data</span><span class="p">.</span><span class="nx">hits</span><span class="p">.</span><span class="nx">hits</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">style</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">_source</span><span class="p">.</span><span class="nx">ingredients</span>
</span><span class='line'><span class="p">).</span><span class="nx">exec</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind that <a href="http://stackoverflow.com/questions/3875382/lucene-standard-analyzer-vs-snowball">snowballing can inadvertently</a> make your search results <em>less relevant</em>. Long words can be stemmed into more common but completely different words. For example, if you snowball a document that contains the word &#8220;sextant&#8221;, the word &#8220;sex&#8221; will result as a stem. Thus, searches for &#8220;sextant&#8221; will also return documents that contain the word &#8220;sex&#8221; (and vice versa).</p>

<p>ElasticSearch puts a powerful search engine into your clutches; plus, with a little forethought into how a document&#8217;s contents are analyzed, you&#8217;ll make searches event more relevant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8% is itty-bitty, but it matters]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/09/8-percent-is-itty-bitty-but-it-matters/"/>
    <updated>2013-09-09T15:49:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/09/8-percent-is-itty-bitty-but-it-matters</id>
    <content type="html"><![CDATA[<p>I saw some news related to <a href="http://thediscoblog.com/blog/2012/12/02/comprehending-the-mobile-development-landscape/">Microsoft Windows Phone</a> that gave me pause for thought. Specifically, <a href="http://www.zdnet.com/ios-up-android-down-in-the-us-as-windows-phone-hits-eight-percent-in-europe-7000020117/">I read an article</a> that stated:</p>

<blockquote><p>Microsoft&#8217;s mobile platform reached new heights in the three months to July 2013 in Europe, making up 8.2 percent of sales across UK, France, Germany, Italy and Spain</p><footer><strong>Liam Tung</strong> <cite><a href='http://www.zdnet.com/ios-up-android-down-in-the-us-as-windows-phone-hits-eight-percent-in-europe-7000020117/'>iOS Up, Android Down in the US as Windows Phone Hits Eight Percent in Europe</a></cite></footer></blockquote>




<!-- more -->


<p>While <a href="http://www.expertreviews.co.uk/smartphones/1301902/windows-phone-market-share-growing-in-europe">8.2% market share</a> might seem insignificant, what&#8217;s interesting is that</p>

<blockquote><p>At the same time last year, Windows Phone accounted for 4.9 percent of sales</p><footer><strong>Liam Tung</strong> <cite><a href='http://www.zdnet.com/ios-up-android-down-in-the-us-as-windows-phone-hits-eight-percent-in-europe-7000020117/'>iOS Up, Android Down in the US as Windows Phone Hits Eight Percent in Europe</a></cite></footer></blockquote>


<p>That is, <a href="http://wmpoweruser.com/kantar-windows-phone-hits-record-high-of-8-2-market-share-in-europe/">Windows Phone market share</a> for the same five markets has increased by a little more than 3% over the last year. Accordingly, Windows Phone is a <a href="http://thediscoblog.com/blog/2013/05/09/hold-your-horses-its-still-only-a-two-horse-race/">growing platform (in some markets)</a>, which means developers will eventually need to start considering it as a <a href="http://thediscoblog.com/blog/2013/05/09/hold-your-horses-its-still-only-a-two-horse-race/">third platform</a>. And throwing a third platform into the mix does change the variables in a native versus <a href="http://thediscoblog.com/blog/2013/04/05/crowd-think-often-lacks-clarity/">non-native</a> argument <em>in favor of an HTML5 approach</em>.</p>

<p>Microsoft has deep pockets and has <a href="http://www.latimes.com/business/technology/la-fi-tn-microsoft-ceo-steve-ballmers-failures-20130823,0,5988522,full.story">shown before</a> that it will fight (and hang on) to create a market for itself (i.e. Xbox and Bing). I suspect that Windows Phone will continue to gain market share, albeit slowly, mostly at the expense of nominal platforms like Blackberry.</p>

<p>Consequently, HTML5 will continue on its path as an advantageous development platform; moreover, HTML5&#8217;s rise will <em>most likely be at the expense of hybrid frameworks</em> as there&#8217;s a point of diminishing returns for <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">frameworks</a> to support 100% of all native features across multiple native platforms. Plus, Amazon&#8217;s recent announcement that their <a href="http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters/">Appstore for Android supports the submission of HTML5 apps</a> only adds to the pro-HTML5 argument.</p>

<p>8% is an itty-bitty number, but I&#8217;ll be keeping an eye on Microsoft&#8217;s Windows Phone market share. And I&#8217;ll be watching the world of HTML5 closely. How about you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effortless ElasticSearch clustering]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/03/effortless-elasticsearch-clustering/"/>
    <updated>2013-09-03T07:50:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/03/effortless-elasticsearch-clustering</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/cluster.jpg"><a href="http://thediscoblog.com/blog/categories/elasticsearch/">ElasticSearch</a> supports <a href="http://www.elasticsearch.org/guide/reference/modules/cluster/">clustering</a>; that is, you can have a series of distinct <a href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/">ElasticSearch</a> instances work in a coordinated manner without much administrative intervention at all. Clustering ElasticSearch instances (or nodes) provides data redundancy as well as data availability.</p>

<p>Best of all, clustering in ElasticSearch, by default, doesn&#8217;t require <em>any</em> configuration &#8211; nodes discover each other. You can set up a cluster in about 60 seconds. Let me show you how!</p>

<!-- more -->


<p></p>

<p>First, download and unzip or untar the <a href="http://thediscoblog.com/blog/2013/01/02/scalable-searching-with-elasticsearch/">latest version of ElasticSearch</a>. Next, copy the resultant ElasticSearch install directory (for example, mine is dubbed <code>elasticsearch-0.90.3</code>) into 3 different directories; for example, I&#8217;ve called my directories <code>node-1</code>, <code>node-2</code>, and <code>node-3</code>.</p>

<p>Next, open up three terminal windows and in each, change directories to a sequential node. Start the instance in the <code>node-1</code> directory like so:</p>

<figure class='code'><figcaption><span>Starting up ElasticSearch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bin/elasticsearch -f
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-f</code> forces the process to run in the foreground.</p>

<p>By default, ElasticSearch nodes will name themselves if you don&#8217;t provide a name (via the <code>elasticsearch.yml</code> configuration file). Thus, after you start the first instance, you should see something along the lines of:</p>

<figure class='code'><figcaption><span>A master node is created!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>cluster.service<span class="o">]</span> <span class="o">[</span>Dionysus<span class="o">]</span> new_master <span class="o">[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]</span>, reason: zen-disco-join <span class="o">(</span>elected_as_master<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above log output, &#8220;Dionysus&#8221; is the automatic name chosen by ElasticSearch. Note the part about &#8220;new_master&#8221; for the <code>cluster.service</code>.</p>

<p>Next, go into the next terminal window, say <code>node-2</code>, and start that instance the same way (via the <code>-f</code> flag). You should see the 2nd instance (in my case, named <code>Caiera</code>) discover the master:</p>

<figure class='code'><figcaption><span>Node #2 discovers the master node</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>cluster.service<span class="o">]</span> <span class="o">[</span>Caiera<span class="o">]</span> detected_master <span class="o">[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]</span>, added <span class="o">{[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]</span>,<span class="o">}</span>, reason: zen-disco-receive<span class="o">(</span>from master <span class="o">[[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>See the <code>detected_master</code> statement above?  And you should see the master, &#8220;Dionysus&#8221;, add the 2nd instance, &#8220;Caiera&#8221;, too (via the first terminal window):</p>

<figure class='code'><figcaption><span>The master node adds node #2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>cluster.service<span class="o">]</span> <span class="o">[</span>Dionysus<span class="o">]</span> added <span class="o">{[</span>Caiera<span class="o">][</span>Eh3DHlcRQhGxatGnUG8smA<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9301<span class="o">]]</span>,<span class="o">}</span>, reason: zen-disco-receive<span class="o">(</span>join from node<span class="o">[[</span>Caiera<span class="o">][</span>Eh3DHlcRQhGxatGnUG8smA<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9301<span class="o">]]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, start the 3rd instance in the 3rd window.</p>

<p>In this case, my 3rd node is dubbed &#8220;Phantom Rider&#8221; and it&#8217;ll discover the master:</p>

<figure class='code'><figcaption><span>Node #3 discovers the master</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>cluster.service<span class="o">]</span> <span class="o">[</span>Phantom Rider<span class="o">]</span> detected_master <span class="o">[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]</span>, added <span class="o">{[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]</span>,<span class="o">[</span>Caiera<span class="o">][</span>Eh3DHlcRQhGxatGnUG8smA<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9301<span class="o">]]</span>,<span class="o">}</span>, reason: zen-disco-receive<span class="o">(</span>from master <span class="o">[[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the master, will in turn, add &#8220;Phantom Rider&#8221; into the cluster:</p>

<figure class='code'><figcaption><span>The master node adds node #3</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>cluster.service<span class="o">]</span> <span class="o">[</span>Dionysus<span class="o">]</span> added <span class="o">{[</span>Phantom Rider<span class="o">][</span>Sw1bDSbFQqeTq4M45qbNpg<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9302<span class="o">]]</span>,<span class="o">}</span>, reason: zen-disco-receive<span class="o">(</span>join from node<span class="o">[[</span>Phantom Rider<span class="o">][</span>Sw1bDSbFQqeTq4M45qbNpg<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9302<span class="o">]]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that you have 3 ElasticSearch instances running, you can run a few RESTful commands to verify your cluster is operational.</p>

<p>First, in a new terminal window, run this command:</p>

<figure class='code'><figcaption><span>cURL to ascertain cluster nodes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET <span class="s1">&#39;http://localhost:9200/_cluster/nodes?pretty=true&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You should see a nicely formatting JSON response. It&#8217;ll look something like:</p>

<figure class='code'><figcaption><span>ElasticSearch nodes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;cluster_name&quot;</span> <span class="p">:</span> <span class="s2">&quot;elasticsearch&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;nodes&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Eh3DHlcRQhGxatGnUG8smA&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;hostname&quot;</span> <span class="p">:</span> <span class="s2">&quot;new-host-5.home&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;http_address&quot;</span> <span class="p">:</span> <span class="s2">&quot;inet[/192.168.1.12:9201]&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Caiera&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;transport_address&quot;</span> <span class="p">:</span> <span class="s2">&quot;inet[/192.168.1.12:9301]&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;version&quot;</span> <span class="p">:</span> <span class="s2">&quot;0.90.3&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;Sw1bDSbFQqeTq4M45qbNpg&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;hostname&quot;</span> <span class="p">:</span> <span class="s2">&quot;new-host-5.home&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;http_address&quot;</span> <span class="p">:</span> <span class="s2">&quot;inet[/192.168.1.12:9202]&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Phantom Rider&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;transport_address&quot;</span> <span class="p">:</span> <span class="s2">&quot;inet[/192.168.1.12:9302]&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;version&quot;</span> <span class="p">:</span> <span class="s2">&quot;0.90.3&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;r7gbosdKSWGfTCgRPrS6vw&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;hostname&quot;</span> <span class="p">:</span> <span class="s2">&quot;new-host-5.home&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;http_address&quot;</span> <span class="p">:</span> <span class="s2">&quot;inet[/192.168.1.12:9200]&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Dionysus&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;transport_address&quot;</span> <span class="p">:</span> <span class="s2">&quot;inet[/192.168.1.12:9300]&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;version&quot;</span> <span class="p">:</span> <span class="s2">&quot;0.90.3&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;ok&quot;</span> <span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>cluster_name</code> is by default elasticsearch &#8211; you can change this name as well. Also, by default, the master node will claim the 9200 port, however, you can run that same command against any node (for example, <code>http://localhost:9201/_cluster/nodes?pretty=true</code> will respond with the same exact response).</p>

<p>You can check the health of a cluster, as well, by running this command:</p>

<figure class='code'><figcaption><span>cURL to ascertain cluster health</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -XGET <span class="s1">&#39;http://localhost:9200/_cluster/health?pretty=true&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you should see another JSON response like:</p>

<figure class='code'><figcaption><span>ElasticSearch cluster health</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;active_primary_shards&quot;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;active_shards&quot;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;cluster_name&quot;</span> <span class="p">:</span> <span class="s2">&quot;elasticsearch&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;initializing_shards&quot;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;number_of_data_nodes&quot;</span> <span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;number_of_nodes&quot;</span> <span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;relocating_shards&quot;</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;status&quot;</span> <span class="p">:</span> <span class="s2">&quot;green&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;timed_out&quot;</span> <span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;unassigned_shards&quot;</span> <span class="p">:</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nodes a cluster will elect a new master if your master node goes down. For example, if you go into the master node terminal window and control-c the process, you should see the two other nodes quickly recognize the master&#8217;s failure and consequently elect one of themselves as the new master:</p>

<figure class='code'><figcaption><span>A new master is elected</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>discovery.zen<span class="o">]</span> <span class="o">[</span>Caiera<span class="o">]</span> master_left <span class="o">[[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]]</span>, reason <span class="o">[</span>shut_down<span class="o">]</span>
</span><span class='line'><span class="o">[</span>cluster.service<span class="o">]</span> <span class="o">[</span>Caiera<span class="o">]</span> master <span class="o">{</span>new <span class="o">[</span>Caiera<span class="o">][</span>Eh3DHlcRQhGxatGnUG8smA<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9301<span class="o">]]</span>, previous <span class="o">[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]}</span>, removed <span class="o">{[</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]]</span>,<span class="o">}</span>, reason: zen-disco-master_failed <span class="o">([</span>Dionysus<span class="o">][</span>r7gbosdKSWGfTCgRPrS6vw<span class="o">][</span>inet<span class="o">[</span>/192.168.1.12:9300<span class="o">]])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember, ElasticSearch will make intelligent defaults for you, however, you should most likely look closely at the various aspects you can configure when it comes to clustering. For example, cluster name and node names are something you should consider implementing.</p>

<p>What&#8217;s more, the process of discovery can be configured. For instance, multicast is used for auto-discovery, however, there are other options available, such as unicast, which allows you to specify which nodes can be a part of a cluster (that is, unknown nodes cannot join).</p>

<p>Finally, you can control how nodes operate in a cluster. You can explicitly forbid a node from being a master, for example, and you can also configure nodes to not hold data (thus, those nodes become veritable routers for searches). These options allow you to create an interesting topology that has some intelligent routing built in.</p>

<p>Regardless of how you configure an ElasticSearch cluster, I hope you&#8217;ve seen that it couldn&#8217;t be any easier. Can you dig it, man?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whiskered Node views]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/13/whiskered-node-views/"/>
    <updated>2013-08-13T12:00:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/13/whiskered-node-views</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/mustache_template.png">As we draw closer to the glorious month of <a href="http://us.movember.com/">Movember</a>, I find myself pondering the <a href="http://paularmstrong.github.io/node-templates/">myriad template engines</a> available for Node apps. The most popular is still probably <a href="http://jade-lang.com/">Jade</a> as its syntax is <a href="http://haml.info/">Haml</a>-like and results in quite clean views, lacking in HTMLish clutter.</p>

<p>While Jade is handy, it takes some time to get used to. Plus, if you find yourself working with a UI person who prefers to speak in HTML, you&#8217;ll find yourself translating between HTML and Jade (which isn&#8217;t that hard with web apps like <a href="http://html2jade.aaron-powell.com/">HTML2Jade</a>, but nevertheless involves an extra <em>translation</em> step).</p>

<!-- more -->


<p>There are other template engines that map more closely to pure HTML. <a href="http://mustache.github.io/">Mustache</a>, for instance, forgoes reducing HTML entirely and introduces <code>{}</code>&#8217;s (i.e. mustaches) as a substitution delimiter. Thus, you can take normal HTML files and add some <code>{}</code>&#8217;s to make pages dynamic.</p>

<p>In the world of Node, there are <a href="https://github.com/raycmorgan/Mu">a few</a> Mustache implementations. One of the more interesting ones that I&#8217;ve used is <a href="https://github.com/gsf/whiskers.js/">Whiskers</a>. Whiskers is fairly lightweight and doesn&#8217;t offer a lot of bells and whistles. As the project&#8217;s README states</p>

<blockquote><p>Whiskers is focused on template readability. By limiting template logic, careful preparation of the context is encouraged, and the processing and formatting of data is kept separate from the design of the display.</p><footer><strong>https://github.com/gsf/whiskers.js/</strong> <cite><a href='https://github.com/gsf/whiskers.js/'>About Whiskers.js</a></cite></footer></blockquote>


<p>Accordingly, you can do variable substitution, conditional logic, and looping out-of-the-box easily. But that&#8217;s about all.</p>

<p>To get started with Whiskers, you&#8217;ll need to add it as a dependency to your project&#8217;s NPM file like so:</p>

<figure class='code'><figcaption><span>package.json NPM file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;whiskers&quot;</span> <span class="err">:</span> <span class="s2">&quot;latest&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, I&#8217;ll always be grabbing the latest version.</p>

<p>I prefer <a href="http://localhost:4000/blog/categories/coffeescript/">CoffeeScript</a> when writing Node apps; consequently, the code examples I show you will be in <a href="http://thediscoblog.com/blog/2012/12/10/sinatra-coffeescript-and-haml-swinging-in-4-steps/">CoffeeScript</a>. Accordingly, in my <code>App.coffee</code> file, I need to then require Whiskers:</p>

<figure class='code'><figcaption><span>Requiring whiskers in your Node app</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">whiskers = </span><span class="nx">require</span> <span class="s">&#39;whiskers&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll need to configure Express to leverage Whiskers; luckily, Express makes plugging in alternate template engines quite easy.</p>

<figure class='code'><figcaption><span>Configuring a template engine with Express</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span> <span class="s">&#39;view engine&#39;</span><span class="p">,</span> <span class="s">&#39;html&#39;</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">engine</span> <span class="s">&#39;html&#39;</span><span class="p">,</span> <span class="nx">whiskers</span><span class="p">.</span><span class="nx">__express</span>
</span></code></pre></td></tr></table></div></figure>


<p>This indicates that your template files will end in <code>.html</code> and that for those file types, use the Whiskers framework.</p>

<p>You can then render a Whiskers template like normal. For example, if I want to pass an <code>allWords</code> collection as the variable <code>words</code> to a template file dubbed <code>index.html</code>, I can do it like so:</p>

<figure class='code'><figcaption><span>Rending a view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">render</span> <span class="s">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nv">words: </span><span class="nx">allWords</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, <code>allWords</code> is an array full of <code>Word</code> classes.</p>

<p>Inside my <code>index.html</code> file, I can access the <code>words</code> variable inside a bracketed <code>for</code> loop like so:</p>

<figure class='code'><figcaption><span>Mustached HTML</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  {for word in words}
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">data-role=</span><span class="s">&quot;page&quot;</span> <span class="na">id=</span><span class="s">&quot;page_{word.id}&quot;</span> <span class="na">data-theme=</span><span class="s">&#39;c&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">data-theme=</span><span class="s">&quot;g&quot;</span> <span class="na">data-role=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h3&gt;</span>
</span><span class='line'>            Overheard Word
</span><span class='line'>        <span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">data-role=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;center-wrapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>           <span class="nt">&lt;h2&gt;</span>{word.spelling} <span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>           <span class="nt">&lt;p&gt;&lt;em&gt;</span>{word.partOfSpeech}<span class="nt">&lt;/em&gt;</span> - {word.definition}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>           <span class="nt">&lt;p&gt;</span>&quot;{word.exampleSentence}&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  {/for}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note inside the <code>for</code> loop, I have access to a <code>word</code> instance. I can call properties on it as well. Note, with Whiskers, you can&#8217;t invoke methods on passed in objects. Only properties (i.e. <code>word.definition</code> isn&#8217;t a function).</p>

<p>Jade certainly produces more elegant, less verbose view code. But Jade&#8217;s whitespace delimiting coupled with the fact that basic HTML knowledge is near universal, make template frameworks like Whiskers, which permit normal HTML with <code>{}</code> delimiters appealing from time to time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Amazon Appstore's support of HTML5 matters]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters/"/>
    <updated>2013-08-07T21:09:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/07/why-amazon-appstores-support-of-html5-matters</id>
    <content type="html"><![CDATA[<p><img class="right" src="https://images-na.ssl-images-amazon.com/images/G/01/mobile-apps/devportal2/content/sdk/images/webapps_icon-final-114._V379662584_.png">Today, Amazon announced that their <a href="http://www.amazon.com/mobile-apps/b?ie=UTF8&amp;node=2350149011">Appstore for Android</a> <a href="https://developer.amazon.com/post/Tx2HGWRGOW5YG8/Amazon-is-Now-Accepting-HTML5-Web-Apps-Making-it-Easy-for-You-to-Reach-Millions.html">now supports the submission of HTML5 apps</a>. This is a game changer for <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a> because now there is a direct channel to consumers.</p>

<p>As I wrote almost a year ago:</p>

<blockquote><p>software delivery on the mobile platform is, at least for the foreseeable future, firmly established via app stores. And app stores cater to native apps (100% native and/or hybrid) only. The average person will not look for useful apps via their device’s browser: that route is still a jungle. And, at this point, there is no viable pure play mobile web app delivery channel.</p><footer><strong>thediscoblog.com</strong> <cite><a href='http://thediscoblog.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results/'>Past Performance Is No Guarantee of Future Results</a></cite></footer></blockquote>


<p>Today, it&#8217;s still true that the most convenient mechanism  for app delivery on mobile devices (and increasingly desktops) is via various app stores. And until today, HTML5 apps were not included in these app stores (unless they were wrapped by some hybrid-web container like <a href="http://thediscoblog.com/blog/2013/04/14/hybrid-inappropriateness/">PhoneGap</a>).</p>

<!-- more -->


<p>But now with Amazon&#8217;s announcement, <a href="http://thediscoblog.com/blog/categories/html5/">HTML5</a> apps <em>without any native container</em> can be submitted into their Appstore. What&#8217;s more, these apps can take advantage of monetization features like <a href="https://developer.amazon.com/sdk/webapps/iap/understanding.html">In-App purchasing</a> using Amazon&#8217;s API.</p>

<p>Now HTML5 apps have a direct channel to consumers along with an API to make HTML5 app developers money. HTML5 apps are now icon-ized and people don&#8217;t have to use a search engine to find them!</p>

<p>As <a href="https://developer.amazon.com/blog/author/Mike+Hines.html">Mike Hines</a> of Amazon puts it:</p>

<blockquote><p>Starting today, you can submit your web apps and mobile optimized web sites and have them merchandised alongside native apps on Amazon and Kindle Fire in nearly 200 countries worldwide, without any third-party software or doing any native app development.</p><footer><strong>https://developer.amazon.com/blog/</strong> <cite><a href='https://developer.amazon.com/post/Tx2HGWRGOW5YG8/Amazon-is-Now-Accepting-HTML5-Web-Apps-Making-it-Easy-for-You-to-Reach-Millions.html'>Amazon Is Now Accepting HTML5 Web Apps—Making It Easy for You to Reach Millions of Kindle Fire and Android Customers Worldwide</a></cite></footer></blockquote>


<p>This is big news for HTML5 developers. A direct channel to the masses and monetization APIs to boot &#8211; what more could you ask for? Standby folks because it&#8217;s about to get even more interesting, as I&#8217;m willing to bet that Google and Apple will follow suit in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes TDD requires a hammer]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer/"/>
    <updated>2013-08-04T11:08:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/04/sometimes-tdd-requires-a-hammer</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/hammerj.jpg">While there are myriad mocking libraries available for the Java platform, only a select few of these nifty frameworks is capable of mocking the non-mock-friendly modifiers of <code>static</code> and <code>final</code>. Static (or class) methods, while handy for factories, become a nuisance for a framework like <a href="https://code.google.com/p/mockito/">Mockito</a>, however, with the inclusion of <a href="https://code.google.com/p/powermock/">PowerMock</a>, you&#8217;ve got yourself a proverbial hammer.</p>

<p><a href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/">As I wrote about previously</a>, I had to deal with a 3rd party library that is used to integrate with a networked service. This library is essentially hardwired to interact with homebase, which naturally provides some challenges when trying to test ones code that relies on this library. Moreover, the said library contained a <code>static</code> method for creating instances of a specialized class, which, naturally, my code depended on.</p>

<!-- more -->


<p>PowerMock is made to work in concert with either <a href="http://easymock.org/">EasyMock</a> or <a href="https://code.google.com/p/powermock/wiki/MockitoUsage13">Mockito</a>; what&#8217;s more, it comes with a custom runner for inclusion in <a href="https://github.com/junit-team/junit">JUnit</a>. I&#8217;m going to show you how to use PowerMock with Mockito as I happen to find Mockito&#8217;s syntax much more fluent than EasyMock&#8217;s.</p>

<p>For starters, you&#8217;ll need to use two class level annotations &#8211; <code>@RunWith</code> for specifying the <code>PowerMockRunner</code> class (this is a JUnit annotation) and another dubbed <code>@PrepareForTest</code>, which takes the class with <code>static</code> methods you wish to mock. <code>@PrepareForTest</code> is provided by PowerMock.</p>

<p>In my case, the class containing a <code>static</code> method is named <code>QTP</code>, accordingly; my test class looks like this:</p>

<figure class='code'><figcaption><span>JUnit test class with class level annotations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">PowerMockRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@PrepareForTest</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CreateCommandTest</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCreateRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, in your test method, you use <code>PowerMokito</code>&#8217;s <code>mockStatic</code> method, which takes the class (again) with static methods you wish to mock.</p>

<figure class='code'><figcaption><span>JUnit test case using PowerMock & Mockito</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCreateRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">PowerMockito</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then mock a static method on the class you&#8217;ve been passing around to <code>mockStatic</code> and the <code>@PrepareForTest</code> annotation like you would normally do with Mockito. For instance, I can use the <code>when</code> method to specify what I want to happen when this static method is invoked.</p>

<figure class='code'><figcaption><span>Using normal Mockito actions for mocking</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCreateRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">PowerMockito</span><span class="o">.</span><span class="na">mockStatic</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">QTP</span> <span class="n">qtpThing</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">//normal Mockito mocking</span>
</span><span class='line'>  <span class="c1">//QTP.create is static</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;dm2q&quot;</span><span class="o">,</span> <span class="s">&quot;0C4F7501UDC8C1EB43B06C988&quot;</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//QTP.createRecord isn&#39;t static</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">.</span><span class="na">createRecord</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Tckt</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span><span class="na">thenReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">Long</span><span class="o">(</span><span class="mi">1000000L</span><span class="o">));</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, you can use <a href="http://metlos.wordpress.com/2012/09/14/the-dark-powers-of-powermock/">PowerMock</a> to ensure your mocked static method is actually invoked. The requirements here are a bit funky; that is, it requires you <em>first</em> specify how many times with one line of code and then you <em>actually call the static method</em>.</p>

<figure class='code'><figcaption><span>Verifying your mocked static method was invoked</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCreateRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="n">PowerMockito</span><span class="o">.</span><span class="na">verifyStatic</span><span class="o">(</span><span class="n">Mockito</span><span class="o">.</span><span class="na">times</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>  <span class="n">QTP</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;dm2q&quot;</span><span class="o">,</span> <span class="s">&quot;0C4F7501UDC8C1EB43B06C988&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah, that&#8217;s sorta confusing, I know.</p>

<p>Nevertheless, as most people in the world of Java figured out long ago, <a href="http://stackoverflow.com/questions/2671496/java-when-to-use-static-methods">static methods</a> are <a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/">somewhat difficult</a> when it <a href="http://blog.codecentric.de/en/2011/11/testing-and-mocking-of-static-methods-in-java/">comes to testing</a>. That is, while a method that conceptually has no state, at first glance, seems straightforward enough to test, the <a href="http://stackoverflow.com/questions/2472690/in-java-is-there-any-disadvantage-to-static-methods-on-a-class">issues arise</a> when that static method does something like hit a database or in my case, call a web service to a networked asset. There is no easy way to override such behavior (unless, of course, you pull out a hammer).</p>

<p>Static methods have a place. But when it comes to testing code, whether it be legacy or some 3rd party library, the <code>static</code> modifier requires a hammer and as I hope I&#8217;ve shown you, <a href="https://code.google.com/p/powermock/">PowerMock</a> is that hammer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imbibing the fluency of Mockito]]></title>
    <link href="http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito/"/>
    <updated>2013-08-01T15:37:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/08/01/imbibing-the-fluency-of-mockito</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/Mockito.jpg">I recently found myself writing some code to integrate two disparate platforms. One of these systems is Java based and the other, while not written in Java, offers a Java API. I&#8217;ll call these systems Foo and Bar, respectively.</p>

<p>It became obvious before I had written a line of code, however, that testing the eventual adapter would require I explicitly mock the later system&#8217;s API (i.e. Foo&#8217;s) as all I had to go with was a jar file whose classes and methods made it clear they communicated with a live instance.</p>

<!-- more -->


<p></p>

<p>I spent a few cycles to see what&#8217;s new in the world of Java mocking and I was pleased to see that my old friend <a href="https://code.google.com/p/mockito/">Mockito</a> is still active and is indeed, still an <a href="http://www.javaworld.com/community/node/3772">excellent tool</a> for general purpose mocking. For the uninitiated, <a href="http://refcardz.dzone.com/refcardz/mockito">Mockito</a> is Java based mocking framework that:</p>

<blockquote><p>&#8230;tastes really good. It lets you write beautiful tests with [a] clean & simple API. Mockito doesn&#8217;t give you hangover because the tests are very readable and they produce clean verification errors.</p><footer><strong>Google code mockito project page</strong> <cite><a href='https://code.google.com/p/mockito/'>Why Drink It?</a></cite></footer></blockquote>


<p>Indeed, Mockito offers a <a href="https://code.google.com/p/easyb/wiki/UsingMockito">simple, fluent API</a> that allows you to precisely mock behaviors without a lot of fuss. For instance, the main facade to interface with Bar is via a <code>QTP</code> class that has methods like <code>logIn</code>, <code>logOut</code>, etc. Rather than relying on classes under test to actually invoke these methods, I can easily create mock instances of <code>QTP</code> with Mockito like so:</p>

<figure class='code'><figcaption><span>Mocking an instance of QTP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">QTP</span> <span class="n">qtpThing</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>mock</code> is a statically imported method from <code>org.mockito.Mockito</code>. With a mock instance, I can then dictate how I wish certain methods to behave, <em>provided I pass along this mocked instance to my classes under test</em>.</p>

<p>For example, the method <code>logIn</code> doesn&#8217;t return anything; in fact, one must invoke that method first and then call another method to generate a ticket (or token), which will be used on subsequent method invocations. Thus, the adapter that I&#8217;m writing will receive some input values (from Foo in the form of XML) and the adapter will return a ticket (in the form of an XML document as per Foo&#8217;s required XML schema).</p>

<p>Accordingly, the test this interaction, I need to do two things:</p>

<ul>
<li>ensure that the <code>logIn</code> method was invoked with specific parameters</li>
<li>mock the response of a valid ticket, via the <code>getTicket</code> method</li>
</ul>


<p>What&#8217;s more, I&#8217;d also like to verify that a <code>logIn</code> failure results in a particular interaction from within my adapter code. Therefore, I&#8217;ll need to mock out some exceptional behavior as well.</p>

<p>In the case of mocking out a particular method, you simply chain together a few methods; in my case, <code>when</code> and <code>thenReturn</code> do the trick like so:</p>

<figure class='code'><figcaption><span>Mocking the behavior of getTicket</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">.</span><span class="na">getTicket</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;test-ticket&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, when the <code>getTicket</code> method is invoked on my mock instance, the <code>String</code> &#8220;test-ticket&#8221; will be returned.</p>

<p>Next, to ensure that <code>logIn</code> was invoked with parameters obtained from an incoming XML document, I can use Mockito&#8217;s <code>verify</code> method.</p>

<figure class='code'><figcaption><span>Using Mockito&#8217;s verify to ensure proper interaction</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;some_value&quot;</span><span class="o">,</span> <span class="s">&quot;some_user_name&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the <code>verify</code> method checks that <code>logIn</code> is invoked one time and that three particular <code>String</code> values are passed in. If these expectations are not met, Mockito will throw an exception (and your corresponding test case will fail).</p>

<p>Thus, my test case for verifying my adapter is quite simple, yet highly readable.</p>

<figure class='code'><figcaption><span>JUnit test case for verifying logIn behavior</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testLoginRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">QTP</span> <span class="n">qtpThing</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">.</span><span class="na">getTicket</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;test-ticket&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AdapterRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AdapterRequest</span><span class="o">(</span><span class="n">XML</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;etc/test-login-req.xml&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">QbosAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QbosAdapter</span><span class="o">();</span>
</span><span class='line'>  <span class="n">adapter</span><span class="o">.</span><span class="na">setQtpInstance</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AdapterResponse</span> <span class="n">adapterResponse</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">performAction</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertNotNull</span><span class="o">(</span><span class="n">adapterResponse</span><span class="o">);</span>
</span><span class='line'>  <span class="n">verify</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;some_value&quot;</span><span class="o">,</span> <span class="s">&quot;some_user_name&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;test-ticket&quot;</span><span class="o">,</span> <span class="n">adapterResponse</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What if I need to simulate an exception thrown by the <code>QTP</code> object, ostensibly from an invalid parameter or incorrect credentials during a log in? Again, Mockito&#8217;s fluent API makes this a breeze.</p>

<p>In my case, I&#8217;d like the <code>logIn</code> method to throw one of the checked methods in its method signature named <code>UnknownQtpException</code>. You can do this via the <code>doThrow</code> and <code>when</code> methods.</p>

<figure class='code'><figcaption><span>Mocking out exceptions in Mockito</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">doThrow</span><span class="o">(</span><span class="k">new</span> <span class="n">UnknownQtpException</span><span class="o">()).</span><span class="na">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above, I&#8217;m explicitly declaring that if the first parameter to the <code>logIn</code> command is blank, then my mocked <code>QTP</code> instance should throw <code>UnknownQtpException</code>. Putting everything together yields the following test case:</p>

<figure class='code'><figcaption><span>Testing exceptional circumstances with JUnit & Mockito</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFailureLoginRequest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">QTP</span> <span class="n">qtpThing</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">QTP</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">doThrow</span><span class="o">(</span><span class="k">new</span> <span class="n">UnknownQtpException</span><span class="o">()).</span><span class="na">when</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">XML</span> <span class="n">xml</span> <span class="o">=</span> <span class="n">XML</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;etc/test-login-req-err.xml&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AdapterRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AdapterRequest</span><span class="o">(</span><span class="n">xml</span><span class="o">);</span>
</span><span class='line'>  <span class="n">QbosAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QbosAdapter</span><span class="o">();</span>
</span><span class='line'>  <span class="n">adapter</span><span class="o">.</span><span class="na">setQtpInstance</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">);</span>
</span><span class='line'>  <span class="n">AdapterResponse</span> <span class="n">adapterResponse</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">performAction</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertNotNull</span><span class="o">(</span><span class="n">adapterResponse</span><span class="o">);</span>
</span><span class='line'>  <span class="n">verify</span><span class="o">(</span><span class="n">qtpThing</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">logIn</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">,</span> <span class="s">&quot;blah&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;FAILURE&quot;</span><span class="o">,</span> <span class="n">adapterResponse</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The beauty, of course, is that my test cases effectively test my adapter code without relying on a third party system (in this case, Bar). This is naturally a time honored testing technique employable in any language with a mocking framework worth its salt!</p>

<p>If you find yourself writing some integration code in Java, then I can&#8217;t recommend Mockito enough. <a href="http://www.javaworld.com/community/node/3772">Mockito&#8217;s API</a> is quite straightforward and it makes tests easy to comprehend. I mean, it makes tests easy to imbibe.  Dig it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swipe gestures in jQuery Mobile apps]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/30/adding-swipe-gestures-to-jquery-mobile-apps/"/>
    <updated>2013-07-30T12:52:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/30/adding-swipe-gestures-to-jquery-mobile-apps</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://thediscoblog.com/images/mine/swipe-right.png">I find that <a href="http://thediscoblog.com/blog/2013/04/07/painless-android-swipe-detection/">swipe gestures</a> for navigating between screens in a mobile app <a href="http://thediscoblog.com/blog/2013/07/01/mobile-for-the-masses-words-and-gestures-with-overheard-word/">quite nice</a>. <a href="http://www.ibm.com/developerworks/library/j-mobileforthemasses2/">Early on</a> in my mobile development journey, I found myself instinctively adding navigation buttons, but quickly found them cumbersome for users to tap; plus, those buttons took up precious screen real estate! Gestures, on the other hand, free up screen space by removing needless buttons and give users a more interactive experience.</p>

<p>Implementing right and left swipes in an <a href="http://jquerymobile.com/">jQuery Mobile</a> app is fairly straightforward, but there are a few gotchas that I was able to piece together via multiple <a href="http://stackoverflow.com/questions/7533772/how-to-swipe-between-several-jquery-mobile-pages">stackoverflow threads</a>, blogs, and finally <a href="http://api.jquerymobile.com/">jQuery Mobile&#8217;s own documentation</a>.</p>

<!-- more -->


<p>In a jQuery Mobile app, you <a href="http://the-jquerymobile-tutorial.org/jquery-mobile-tutorial-CH02.php">define pages</a> within <code>div</code> tags that represent a UI screen &#8211; you can then declare transitions between pages well &#8211; slide, flip, etc.  The key aspect with swiping between page <code>div</code>s is the selector for them, which is <code>div[data-role='page']</code>.</p>

<p>Once you have a handle to that <code>div</code>, you can proceed forward with a left swipe via jQuery&#8217;s <a href="http://api.jquery.com/next/"><code>next</code></a> function. Conversely, swiping right with the intent of going back is facilitated by finding the previous matching <code>div[data-role='page']</code> via jQuery&#8217;s <a href="http://api.jquery.com/prev/"><code>prev</code></a> function.</p>

<p>Also note, going backwards via a swipe requires that you <em>reverse</em> the slide transition, otherwise it looks misleading to the user (i.e. the transition is from left to right rather than the other way around!).</p>

<p>Accordingly, the JavaScript for swipe gestures should be placed within a <a href="http://jquerymobile.com/demos/1.2.0/docs/api/events.html"><code>pageinit</code> event</a> like so:</p>

<figure class='code'><figcaption><span>Enabling swipe between page divs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;pageinit&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.ui-page&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;swipeleft&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">nextpage</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;div[data-role=&quot;page&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">nextpage</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">mobile</span><span class="p">.</span><span class="nx">changePage</span><span class="p">(</span><span class="nx">nextpage</span><span class="p">,</span> <span class="s2">&quot;slide&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;div.ui-page&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;swiperight&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">prevpage</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">prev</span><span class="p">(</span><span class="s1">&#39;div[data-role=&quot;page&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">prevpage</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">mobile</span><span class="p">.</span><span class="nx">changePage</span><span class="p">(</span><span class="nx">prevpage</span><span class="p">,</span> <span class="p">{</span> <span class="nx">transition</span><span class="o">:</span> <span class="s2">&quot;slide&quot;</span><span class="p">,</span> <span class="nx">reverse</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, this script should be referenced in your DOM <em>before</em> you pull in the jQuery mobile js file. That is, put the code above where you add jQuery mobile in your document&#8217;s header (but <em>after</em> you load jQuery itself):</p>

<figure class='code'><figcaption><span>Including jQuery Mobile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://d10ajoocuyu32n.cloudfront.net/jquery-1.9.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- add pageinit swipe initialization here --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://d10ajoocuyu32n.cloudfront.net/mobile/1.3.1/jquery.mobile-1.3.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&#8217;ve done that, you&#8217;ll be able to swipe between page <code>div</code>s.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Android migrations]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations/"/>
    <updated>2013-07-24T09:46:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/24/introducing-android-migrations</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/android_platform.png">Have you ever worked with <a href="http://guides.rubyonrails.org/migrations.html">Rails&#8217; migrations</a>? They make <a href="http://www.tutorialspoint.com/ruby-on-rails/rails-migrations.htm">database changes a breeze</a>, don&#8217;t they?  While every software release doesn&#8217;t necessarily involve a migration, when one does happen to make use of one, <a href="http://thediscoblog.com/blog/2013/02/18/testing-rails-migrations/">I&#8217;m always pleased</a> on how easily things work out. Whether it&#8217;s to add new data or alter existing data structures, Rails migrations make evolving a datastore (be it an RDMBS or NoSQL one like MongoDB) painless.</p>

<p>When I recently found myself altering the data structure of a SQLite database for <a href="https://play.google.com/store/apps/details?id=com.b50.hoproll&amp;hl=en">one of my Android apps</a>, I found myself wishing there was some similar migration mechanism for Android as there is in Rails. Alas, I could fine none, so I did what any other developer would do: <a href="https://github.com/aglover/droid-migrate">I wrote one</a>.</p>

<!-- more -->


<p><a href="https://github.com/aglover/droid-migrate">Droid Migrate</a> is a simple command line framework that generates and runs database migrations for your Android apps that use <a href="http://www.sqlite.org/">SQLite</a>. A migration is encapsulated by a <code>DBVersion</code> class that contains an <code>up</code> and <code>down</code> method. The <code>up</code> method is called for an upgrade and <code>down</code> for a rollback. What those methods do is entirely up to you.</p>

<p>In addition, Droid Migrate generates a <code>DatabaseHelper</code> class through which you obtain underlying connections to a SQLite instance &#8211; this is <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html">the canonical way</a> to <a href="http://www.stevenmcmillan.co.uk/blog/2012/java-sqlite-database-helper-class-for-android/">interact with SQLite</a> in <a href="http://www.androidhive.info/2011/11/android-sqlite-database-tutorial/">an Android app</a> anyway, but with Droid Migrate, you get a specially enhanced <code>DatabaseHelper</code> that determines which version of a target database instance is the most current and runs the appropriate migrations to bring the database to that version.</p>

<p>Thus, with your newly minted <code>DatabaseHelper</code> class, you can still interact with your app&#8217;s database like you would normally, however, by using this class, all migrations are handled for you. Allow me to demonstrate.</p>

<p><a href="https://github.com/aglover/tidbit">I&#8217;ve created a simple app</a> that doesn&#8217;t interact with any database at this point &#8211; it simply creates a <code>ListView</code> that is intended to hold a list of records for viewing. You can find this app on <a href="https://github.com/aglover/tidbit">Github</a> if you&#8217;d like to follow along. Nevertheless, the app&#8217;s main Activity is shown below.</p>

<figure class='code'><figcaption><span>Simple Android app w/o any SQLite logic</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>    <span class="n">TextView</span> <span class="n">textView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;This would be a list from a DB if there was a DB&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I&#8217;d like to do is add the ability to interact with a SQLite database; plus, I&#8217;d like to be able to evolve the data model on subsequent releases. This is where Droid Migrate shines.</p>

<p>After I&#8217;ve installed Droid Migrate (simply clone or download the code, build it, and put it into your <code>PATH</code> and create new environment variable dubbed <code>DROID_MIGRATE_HOME</code>), I can initialize my app to use Droid Migrate by opening up a terminal in the root of my app and typing:</p>

<figure class='code'><figcaption><span>Initializing Droid Migrate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> droid-migrate init -d a_catalog
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-d</code> flag specifies the name of my desired database. I can optionally provide a package name via the <code>-p</code> flag if I&#8217;d like my newly generated classes in a separate package from my main app.</p>

<p>If you take a look at your app&#8217;s code, you should notice a number of new things. First, you&#8217;ll see two new classes and a new jar file. The classes are the aforementioned <code>DatabaseHelper</code> and a class dubbed <code>DBVersion1</code>. The newly added jar file in your app&#8217;s <code>libs</code> folder contains a few classes that correspond to Droid Migrate&#8217;s runtime dependencies &#8211; this jar is extremely compact at 4KB.</p>

<p>The <code>DatabaseHelper</code> class is brutally simple:</p>

<figure class='code'><figcaption><span>DatabaseHelper couldn&#8217;t be any easier</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.db.ex.R</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.migrations.MigrationsDatabaseHelper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DatabaseHelper</span> <span class="kd">extends</span> <span class="n">MigrationsDatabaseHelper</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">DatabaseHelper</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">context</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">database_name</span><span class="o">),</span> <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">getResources</span><span class="o">().</span><span class="na">getInteger</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">integer</span><span class="o">.</span><span class="na">database_version</span><span class="o">),</span>
</span><span class='line'>      <span class="n">context</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">package_name</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class extends Droid Migrate&#8217;s <code>MigrationsDatabaseHelper</code>, which ultimately extends Android&#8217;s <code>SQLiteOpenHelper</code> so as I mentioned earlier, you&#8217;ve got everything you need to interact with SQLite at your fingertips via <code>DatabaseHelper</code>. If you look closely, you&#8217;ll see that this class makes use of a specialized XML file (that is ultimately generated into your <code>R</code> class).</p>

<p>Take a look in the <code>res/values</code> folder and open up the newly created <code>migrations.xml</code> file. It should look something like this:</p>

<figure class='code'><figcaption><span>migrations.xml contains database version, package name and database name</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;resources&gt;</span>
</span><span class='line'>    <span class="nt">&lt;integer</span> <span class="na">name=</span><span class="s">&quot;database_version&quot;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">&quot;database_name&quot;</span><span class="nt">&gt;</span>a_catalog<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">&quot;package_name&quot;</span><span class="nt">&gt;</span>com.b50.db.ex<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the value of <code>database_version</code> &#8211; it&#8217;s 1. This corresponds to the <code>DBVersion1</code> class that was generated. Take a look at that class:</p>

<figure class='code'><figcaption><span>DBVersion1 is your initial migration class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.migrations.AbstractMigration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBVersion1</span> <span class="kd">extends</span> <span class="n">AbstractMigration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">up</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//execSQL(&quot;some sql create stmts&quot;);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">down</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//execSQL(&quot;some delete sql stmts&quot;);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class is where you implement your initial migration, which would create various tables and populate them. Use the <code>execSQL</code> method to pass in a valid SQL <code>String</code>. For example, I&#8217;ll create an initial migration like so:</p>

<figure class='code'><figcaption><span>DBVersion1 is now implemented</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.migrations.AbstractMigration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBVersion1</span> <span class="kd">extends</span> <span class="n">AbstractMigration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">up</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">create</span> <span class="o">=</span> <span class="s">&quot;CREATE TABLE hops (_id integer  PRIMARY KEY AUTOINCREMENT DEFAULT NULL, name TEXT, description TEXT, substitutions TEXT DEFAULT &#39;&#39;, alpha_acid TEXT DEFAULT &#39;&#39;, beer_styles TEXT DEFAULT &#39;&#39;, type TEXT DEFAULT &#39;&#39;, user_notes TEXT DEFAULT &#39;&#39;);&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="n">create</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">oneThing</span> <span class="o">=</span> <span class="s">&quot;INSERT INTO &#39;hops&#39; VALUES(1,&#39;Amarillo&#39;,&#39;Spicy hop with mild bitterness and a noble aroma.  Good all around hop.&#39;,&#39;Cascade, Centennial&#39;,&#39;7 to 10&#39;,&#39;Ale, IPA&#39;,&#39;Aroma&#39;, &#39;&#39;);&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="n">oneThing</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">down</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="s">&quot;DROP TABLE hops;&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, my <code>up</code> method creates a table and inserts one record. My <code>down</code> method rolls things back, which in this case means dropping the created table.</p>

<p>Now all I have to do is make use of my app&#8217;s <code>DatabaseHelper</code> instance and Droid Migrate will ensure things are properly initialized. Therefore, I&#8217;ll update the original Activity to display a list of what&#8217;s in the database, which I know only to be one record based upon my initial migration.</p>

<figure class='code'><figcaption><span>Updated Activity to interact with SQLite</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.database.Cursor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.database.sqlite.SQLiteDatabase</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ListAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ListView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.SimpleCursorAdapter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">protected</span> <span class="n">SQLiteDatabase</span> <span class="n">db</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">db</span> <span class="o">=</span> <span class="o">(</span><span class="k">new</span> <span class="n">DatabaseHelper</span><span class="o">(</span><span class="k">this</span><span class="o">)).</span><span class="na">getWritableDatabase</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ListView</span> <span class="n">list</span> <span class="o">=</span> <span class="o">(</span><span class="n">ListView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">list</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ListAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">getAdaptorForQuery</span><span class="o">(</span><span class="s">&quot;SELECT _id, name, description FROM hops ORDER BY name ASC&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ListAdapter</span> <span class="nf">getAdaptorForQuery</span><span class="o">(</span><span class="n">String</span> <span class="n">queryString</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">parameters</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">rawQuery</span><span class="o">(</span><span class="n">queryString</span><span class="o">,</span> <span class="n">parameters</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">SimpleCursorAdapter</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">list_item</span><span class="o">,</span> <span class="n">cursor</span><span class="o">,</span>
</span><span class='line'>              <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;description&quot;</span> <span class="o">},</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">hopName</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">description</span> <span class="o">},</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the code above, the app now makes a query to the underlying SQLite instance and builds a <code>ListView</code> from the result set of the query.</p>

<p>The key line is how the <code>SQLiteDatabase</code> instance is obtained: <code>this.db = (new DatabaseHelper(this)).getWritableDatabase();</code> &#8211; that is where all the magic takes place. Droid Migrate passes along the version number to the Android platform and if there is a change, the Android platform will call a series of life-cycle methods, which Droid Migrate wires up with your migrations.</p>

<p>For instance, let&#8217;s imagine that a subsequent release of this app adds more data to the <code>hops</code> table. Therefore, I&#8217;ll generate a new migration. This is done by typing the following command within the root directory of your project like so:</p>

<figure class='code'><figcaption><span>Generating a new migration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> droid-migrate generate up
</span></code></pre></td></tr></table></div></figure>


<p>The <code>up</code> flag signifies an increase in the database version (i.e. version++) and <code>down</code> indicates a rollback (i.e. version&#8211;). If you take a look at your app&#8217;s code, you&#8217;ll notice a new class: <code>DBVersion2</code> and your <code>migrations.xml</code> file has been updated: the <code>database_version</code> value is now 2.</p>

<p>I&#8217;ll implement my <code>DBVersion2</code> class like so:</p>

<figure class='code'><figcaption><span>Implementing DBVersion2 to add one more row of data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">b50</span><span class="o">.</span><span class="na">db</span><span class="o">.</span><span class="na">ex</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.b50.migrations.AbstractMigration</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBVersion2</span> <span class="kd">extends</span> <span class="n">AbstractMigration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">up</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="s">&quot;INSERT INTO &#39;hops&#39; VALUES(100,&#39;Zythos&#39;,&#39;New IPA style hop blend created to optimize and exceed the aroma characteristics of the traditional, and sometimes hard to get, IPA hops.&#39;,&#39;Amarillo, Columbus, Cascade&#39;,&#39;9.5 to 12&#39;,&#39;IPAs&#39;,&#39;Bittering and Aroma&#39;, &#39;&#39;);&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">down</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">execSQL</span><span class="o">(</span><span class="s">&quot;DELETE from &#39;hops&#39; where _id = 100&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if I fire up my app, the <code>ListView</code> will have 2 items in it!</p>

<p><img class="center" src="http://thediscoblog.com/images/mine/migrate_2.png"></p>

<p>What about if you need to rollback? That&#8217;s just as easy. Imagine that the addition of that second row of data was a gigantic mistake and instead I really only want one row (i.e. I only want the data originally created in <code>DBVersion1</code>). All I have to do is type within the root of my project:</p>

<figure class='code'><figcaption><span>Rollbacks in Droid Migrate are just as easy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> droid-migrate generate down
</span></code></pre></td></tr></table></div></figure>


<p>After typing the above command, you should see the following output:</p>

<figure class='code'><figcaption><span>Rollback to version 1!</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Generating a rollback migration...
</span><span class='line'>Rolling back your migrations.xml file to indicate database version 1
</span><span class='line'>Done!
</span></code></pre></td></tr></table></div></figure>


<p>The only thing that&#8217;ll change in your project is the <code>migrations.xml</code> file &#8211; the <code>database_version</code> value will be rolled back to 1 (or what ever 1 minus the current version is).</p>

<p>Fire the app back up, and behold: one value is displayed because <code>DBVersion2</code>&#8217;s <code>down</code> method was executed!</p>

<p>Droid Migrate makes upgrades and rollbacks to your underlying SQLite database a breeze; what&#8217;s more, it can handle upgrades or rollbacks beyond just one version. That is, if an app instance is upgraded from version 2 to version 6, each migration will be run in order (3, 4, 5, and 6). The same is true of a rollback.</p>

<p>If you are working with SQLite in an Android app, I highly recommend you take a look at <a href="https://github.com/aglover/droid-migrate">Droid Migrate</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB pro tip: field projections]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/15/mongodb-pro-tip-field-projections/"/>
    <updated>2013-07-15T15:07:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/15/mongodb-pro-tip-field-projections</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/mongodb_icon.png">Did you ever learn that <code>select * from table</code> in RDBMS-land is bad? Of course, you did! If you&#8217;re only looking for the email address of a user and not the other 15 columns worth of data, then why ask for that data and incur a penalty? The query <code>select email from user where user_id = 1;</code> is far more efficient for the database and the corresponding application that issued it, because there is <em>less data to fetch and consume</em>.</p>

<!-- more -->


<p>As it turns out, the same rule of thumb is true in <a href="http://www.mongodb.org/">MongoDB-land</a>. That is, <code>db.users.find({user_id:1})</code> is just as inefficient as the <code>select *</code> query if all you want is the user&#8217;s email address. With MongoDB, you can specify a <a href="http://docs.mongodb.org/manual/reference/method/db.collection.find/">projection</a> as a part of your query that ultimately can limit what fields come back.</p>

<p>Thus, if I only want the <code>email</code> field on a user, I can issue a query like so:</p>

<figure class='code'><figcaption><span>MongoDB field projection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">user_id</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">email</span><span class="o">:</span><span class="mi">1</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second clause specifies that you only want the <code>email</code> field returned. You can also negate fields by issuing a 0, which means false. To negate <code>first_name</code> and <code>last_name</code>, you would type:</p>

<figure class='code'><figcaption><span>MongoDB field negation with 0 or false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span><span class="nx">user_id</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="nx">first_name</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span> <span class="nx">last_name</span><span class="o">:</span><span class="mi">0</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, I&#8217;d get all fields on that user document <em>except</em> <code>first_name</code> and <code>last_name</code>. Note, you cannot issue both an include and exclude in the same statement.</p>

<p>For you <a href="http://mongoid.org/en/mongoid/index.html">Mongoid</a> users, including specific fields translates to <code>only</code> and excluding them translates to <code>without</code> &#8211; each clause can be attached to a criteria (but not both at the same time). For example, if <code>User</code> is a Mongoid document and I only want an underlying query to grab the <code>email</code> field, then the corresponding Mongoid query would be:</p>

<figure class='code'><figcaption><span>Mongoid field projection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">only</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Field projection reduces document sizes on a fetch &#8211; this decreases memory consumption (for example, in the case of Mongoid your models aren&#8217;t fully populated with data) as well as bandwidth (that is, document retrieval is faster). Both MongoDB and the calling application benefit from field projection &#8211; it&#8217;s a win-win all the way around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sampling Redis keys for memory consumption]]></title>
    <link href="http://thediscoblog.com/blog/2013/07/03/sampling-redis-keys/"/>
    <updated>2013-07-03T14:05:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/07/03/sampling-redis-keys</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://thediscoblog.com/images/mine/redis_logo.png"><a href="http://www.app47.com">We</a> run a farm of <a href="http://redis.io/">Redis</a> instances for storing real time analytics. Because Redis stores objects in memory, it happens to be an extremely fast way to retrieve data; thus, most of our charts and graphs pull data from various Redis instances that contain desired data.</p>

<p>Our Redis boxes are running in <a href="http://thediscoblog.com/blog/categories/aws/">AWS</a> on <a href="http://aws.amazon.com/ec2/instance-types/instance-details/">m2.2xlarge instances</a>, which contain a bit over 30GB of memory. Every once in awhile, it&#8217;s helpful to get an idea of how much memory various key <em>patterns</em> are consuming because we hold over 20GB across several hundred thousand keys in some cases. There&#8217;s a nifty gem dubbed <a href="https://github.com/snmaynard/redis-audit">redis-audit</a> (<a href="https://github.com/aglover/redis-audit">my fork</a> of it adds <a href="http://bundler.io/">Bundler</a>) that is quite helpful in painting a broad picture of memory usage across a sampling of key patterns.</p>

<!-- more -->


<p>Redis-audit works by sampling a configurable portion of keys residing in a Redis database. It then prints out a report of key patterns that delineates, among other things, memory usage. The summary portion of the output report looks something like:</p>

<figure class='code'><figcaption><span>redis-audit summary</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>------------------------------------+--------------+-------------------+---------------------------------------------------
</span><span class='line'>Key                                 | Memory Usage | Expiry Proportion | Last Access Time
</span><span class='line'>------------------------------------+--------------+-------------------+---------------------------------------------------
</span><span class='line'>se::4f733211e::02/03/13::model::SGT | 19.03%    | 14.81%   | 1 days, 8 hours, 8 minutes, 40 seconds
</span><span class='line'>se::4f7332a3e::03/08/13::manufactur | 8.76%     | 71.43%   | 6 hours, 14 minutes, 50 seconds
</span><span class='line'><span class="c"># more keys omitted</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also get more details on individual key patterns; for example, the key above using 19% of Redis&#8217;s memory is detailed like so:</p>

<figure class='code'><figcaption><span>redis-audit details for a key pattern</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">==============================================================================</span>
</span><span class='line'>Found 27 keys containing hashs, like:
</span><span class='line'>se::4f7332a300011e::02/03/13::model::SGT SMA2+::aggregations,
</span><span class='line'>se::4f7332a300011e::06/06/13::model::SGH-M919V::aggregations,
</span><span class='line'>se::4f7332a300011e::05/19/13::model::vivo S7::aggregations,
</span><span class='line'>se::4f7332a300011e::02/15/13::model::PAD707::aggregations,
</span><span class='line'>se::4f7332a300011e::06/12/13::model::Rise::aggregations,
</span><span class='line'>se::4f7332a300011e::04/12/13::model::Micromax A91::aggregations,
</span><span class='line'>se::4f7332a300011e::06/11/13::model::900TPCII::aggregations,
</span><span class='line'>se::4f7332a300011e::07/01/13::model::HUAWEI U8825D::aggregations,
</span><span class='line'>se::4f7332a300011e::02/20/13::model::AT7D-TE25DA::aggregations,
</span><span class='line'>se::4f7332a300011e::02/14/13::model::HUAWEI G510-0010::aggregations
</span><span class='line'>
</span><span class='line'>These keys use 19.03% of the total sampled memory <span class="o">(</span>990 bytes<span class="o">)</span>
</span><span class='line'>14.81% of these keys expire <span class="o">(</span>4<span class="o">)</span>, with maximum ttl of 28 days, 15 hours, 51 minutes, 20 seconds
</span><span class='line'>Average last accessed <span class="nb">time</span>: 69 days, 19 hours, 14 minutes, 15 seconds - <span class="o">(</span>Max: 95 days, 23 hours, 10 minutes, 10 seconds Min:1 days, 8 hours, 8 minutes, 40 seconds<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This data is helpful in a number of ways; for instance, we discovered that a significant portion of memory was being consumed by keys containing old time series data that for some reason did not have associated TTLs. Thus, we were able to achieve that particular data (into <a href="http://localhost:4000/blog/categories/mongodb/">MongoDB</a>) and free up memory.</p>

<p>If you want to understand how memory is distributed across key patterns in a Redis instance, then I think you&#8217;ll find <a href="https://github.com/snmaynard/redis-audit">Redis-audit</a> quite helpful!</p>
]]></content>
  </entry>
  
</feed>
