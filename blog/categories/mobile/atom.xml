<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | The Disco Blog]]></title>
  <link href="http://aglover.github.com/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://aglover.github.com/"/>
  <updated>2012-11-29T19:43:59-05:00</updated>
  <id>http://aglover.github.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The essence of mobile app performance]]></title>
    <link href="http://aglover.github.com/blog/2012/11/28/the-essence-of-mobile-app-performance/"/>
    <updated>2012-11-28T16:59:00-05:00</updated>
    <id>http://aglover.github.com/blog/2012/11/28/the-essence-of-mobile-app-performance</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/binoculars.png">Are you pumped that you just published an app? Yep, me too. But guess what? Once you've built, tested, and deployed a mobile app, you'll find yourself concerned with two factors:</p>

<ul>
<li>visibility</li>
<li>engagement</li>
</ul>


<p>The view app stores like <a href="http://www.apple.com/itunes/">iTunes</a> and <a href="https://play.google.com/store?hl=en">Google Play</a> provide for you regarding app usage is fairly blurry. Downloads, the metric you get for free, doesn't really tell you anything about how your app is being used.</p>

<p>While, at this point, there are essentially two platforms (<a href="http://en.wikipedia.org/wiki/IOS">iOS</a> &amp; <a href="http://en.wikipedia.org/wiki/Android_(operating_system">Android</a>)), it's a big big world out there with a <a href="http://www.androidpit.com/mobile-world-congress">ton of different devices</a>! What's more, these devices, whether <a href="http://bgr.com/2012/05/16/android-fragmentation-visualized-opensignalmaps/">Android</a> <em>or <a href="http://bgr.com/2012/06/12/apple-ios-fragmentation-iphone/">iOS</a></em> are fragmented, which means your app will behave in some manner you haven't tested. Plus, the spectrum of varied users almost guarantees they are going to do something with your app that you've never even considered.  In an app world, you can't assume who will use your app!</p>

<p>When's the last time you downloaded an app that has a measly one or two star rating? Me, neither. Once your app is live, you'll want to know what's happening. You'll want to know how your app is behaving and you'll want to know as quickly as possible before a landslide of negative feedback.</p>

<p>Behavior can be ascertained in two ways:</p>

<ul>
<li>logging</li>
<li>events</li>
</ul>


<p>Logging is a no-brainer -- but remember, crash logs are not enough sometimes! While you can get these in some form or another from app stores, oftentimes monitoring error and/or warning logs can bring to light that future crash. On that same note, don't over log either -- the loquacious logger usually ends up being a nuisance by flooding you with too much information. Think <a href="http://en.wikipedia.org/wiki/Signal-to-noise_ratio">signal-to-noise</a> ratio here.</p>

<p>Events are like log messages, but they're more typed -- rather than describing geek-speak information like a JSON parsing warning at line 43, they capture succinct actions like a button click, a picture taken, a video download. The sky's the limit when it comes to what behavior you wish to capture with an event!</p>

<p>Events come in a lot of flavors -- they can have a timer associated with them and, in some respects, they can also be categorized as a session. Either which way you spin it though, events tell you <em>how your app is being used</em>. Combine these tools with dimension data like device information and geo-location and you start to see what's happening with your app in real time -- your view is certainly less cloudy!</p>

<p>Another question: are you giving your app away for free <em>without any monetization strategy</em>?  I didn't think so. You wouldn't have read this far otherwise. <a href="http://www.insidefacebook.com/2009/01/12/application-insights-how-exactly-is-mau-calculated/">Engagement</a> is about understanding the lifetime value of a user. You want some sort of return on your investment (and if it isn't money, then it is certainly engaged eyeballs), otherwise you wasted your time building the app.</p>

<p>When's the last time you downloaded an app, launched it, decided it was terrible and uninstalled it immediately? Yeah, me too (it happened while I was writing this post). I recently spoke with a government agency that disclosed to me that they had over 500,000 downloads of their app. That's great news! Unfortunately, they had no idea if the app was being used. I bet the app I just deleted is happy they had another download too.</p>

<p>What everyone wants to know, in addition to <em>how</em> their app is being used, is <em>whether it is being used at all</em>. Are people engaged in actively using your app or do they <a href="http://www.nuance.com/ucmprod/groups/enterprise/@web-enus/documents/collateral/nc_020218.pdf">abandon</a> it? A telling metric here is <em>active users</em> -- this accurately discloses how often someone uses your app. And if your monetization strategy relies on ads, for example, this metric means everything to you.</p>

<p>Just like with visibility, if you add dimension data like device information, geo-location, and even duration, a fairly vivid picture of user engagement is painted for you. You can ascertain if your app is actually delivering value.</p>

<p>Building, testing, and deploying your app is no easy feat. Congrats on getting that far! But don't forget about what happens after that effort finishes. Putting an app out into the wild without some sort of monitoring is like driving your car from the back seat while sitting backwards. All you see is outdated and you have no view as to where you're headed.  Visibility and engagement. If they don't matter to you now, they will.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MoDevTablet 2012 video: Mobile Web Realities]]></title>
    <link href="http://aglover.github.com/blog/2012/09/25/modevtablet-2012-video-mobile-web-realities/"/>
    <updated>2012-09-25T12:51:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/25/modevtablet-2012-video-mobile-web-realities</id>
    <content type="html"><![CDATA[<p>Recently, I had the distinct pleasure of speaking at <a href="http://modevtablet.com/">MoDevTablet</a> where I gave a presentation entitled "Mobile Web Realities" and the <a href="http://www.meetup.com/modevdc/">good folks who put on the conference</a> recorded it.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/rqfJS3F_YYk "></iframe></div></p>

<p></p>


<p>In summary: a year ago, hybrid development frameworks like <a href="http://phonegap.com/">PhoneGap</a> that leverage HTML5 were poised to radically alter mobile app development, but the potential has failed to live up to the promise: Faster/Easier/Cheaper <em>doesn't always mean</em> Better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A tale of three browsers]]></title>
    <link href="http://aglover.github.com/blog/2012/09/24/a-tale-of-three-browsers/"/>
    <updated>2012-09-24T15:39:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/24/a-tale-of-three-browsers</id>
    <content type="html"><![CDATA[<p>I recently spent time evaluating various mobile browsers' HTML5 compatibility in an effort to understand the state of the mobile web. Along the way, I discovered that the good folks at Facebook, <a href="http://www.zdnet.com/facebooks-mark-zuckerberg-knocks-html5-in-favor-of-native-apps-7000004082/">who happen to have quite a lot of experience with HTML5</a> and <a href="http://gantdaily.com/2012/09/12/facebook-ceo-mark-zuckerberg-promises-better-mobile-strategy/">mobility</a> put together a handy website called <a href="http://www.rng.io/">Ringmark</a>.</p>

<p>As the Facebook development team puts it, Ringmark</p>

<p><blockquote><p>helps you understand which mobile browsers support the functionality your app needs.</p><footer><strong>Facebook HTML5 Blog</strong> <cite><a href='http://developers.facebook.com/html5/blog/post/2012/02/27/announcing-ringmark--a-mobile-browser-test-suite/'>developers.facebook.com/html5/&hellip;</a></cite></footer></blockquote></p>

<p>Thus, with Ringmark you can ascertain a particular browser's compatibility with HTML5 by simply going to <a href="http://www.rng.io/">rng.io</a>.</p>

<p>Needless to say, I had some fun comparing Mobile Safari on my iPad to my Android 2.3.2 device. Interestingly enough, the fun really started when I decided to see what the feature functionality gap was between three browsers <em>on my desktop</em>.</p>

<p><img class="center" src="/images/mine/rng_io_3_browsers.png">For the test, I used Chrome, Safari, and Firefox -- all three browsers are up to date as of the writing of this entry as well. The center browser is Chrome, left is Safari and right is Firefox.</p>

<p>As you can see, all 3 browsers score <em>differently</em> -- Chrome scoring best with only 29 failures in Ring 1 and Safari, the worst with over 40 failures. None even made it to Ring 2.</p>

<p>If you think HTML5 poses some compatibility issues for mobile devices, you need to widen your scope: HTML5 support varies across <em>everything</em>. Indeed, the <a href="http://en.wikipedia.org/wiki/Browser_wars">Browser Wars</a> are still being fought. The big difference now is that the wars are on multiple fronts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Past performance is no guarantee of future results]]></title>
    <link href="http://aglover.github.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results/"/>
    <updated>2012-09-07T11:25:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/07/past-performance-is-no-guarantee-of-future-results</id>
    <content type="html"><![CDATA[<p>In the early days of the desktop computing, software delivery was a matter of going to a store <em>and buying a box</em>. Subsequently, you then went home and manually inserted install disks into a computer. It was, in retrospect, a real pain in the neck. Accordingly, for most people, the software that was loaded on the PC they bought was basically what they only used for the life of the machine. Adding new software to your home PC was an event.</p>

<p><img class="right" src="/images/mine/4047547668_f46315f196_m.jpg">What's more, finding out what to buy and where to buy it was tedious -- if you were lucky and knew someone really into computers, you'd get the scoop on some super useful software worth the effort to jump in a car, drive to the store, purchase, jump back into your car, get home and install it. A few hours later (assuming the store had the box you were looking for), you'd be up and running.</p>

<p>The Web changed this state of software stagnancy for the typical computer user -- now interesting and useful things could be rapidly done on a computer in an on-demand fashion <em>without</em> the need to go somewhere and pick up a box! Need to look up the definition of a word? No problem, go to <a href="http://dictionary.reference.com/">dictionary.com</a>. Need to write a document and share it with various people? <a href="http://www.google.com/enterprise/apps/business">Google Apps</a> to the rescue! Need to a way to manage your complex sales process? Look no further than <a href="http://www.salesforce.com/">Salesforce.com</a>. In essence, in the last decade, the web has become an <em>effective software delivery channel for consumers</em>. And in the process that channel has virtually wiped out desktop applications. I can't remember the last time I bought a software product box from a store. Can you?</p>

<p>Finding out what to use on the web can be daunting though. We all discover something useful on a daily basis; in many respects, the means for learning about new and useful websites is facilitated via social media, but finding web apps is like wading through a jungle for the average consumer. Google, for the most part, is the web's product catalog, yet, you the consumer are left to determine a particular product's efficacy if someone in your social network hasn't already vouched for it.  Consequently, the breadth of web applications the average consumer uses regularly is probably as narrow as it was before the advent of the web.</p>

<p>It's easy then to look at the rapidly evolving mobile landscape and the ever growing popularity of HTML5 and predict a similar result: native mobile apps will go the route of the web because <em>that's what has happened already</em>. Web apps will destroy native apps just like they destroyed desktop ones! Yet, there is one thing missing in this equation: <em>software delivery via curated app stores</em>. You see, what was absent in the early days of the desktop was an accessible online app store.</p>

<p><img class="left" src="/images/mine/AppStore_icon.png">All major mobile platforms offer app stores: Apple has its <a href="http://www.apple.com/apps">App Store</a>, Google as <a href="https://play.google.com/store">Play</a>, Amazon has its <a href="http://www.amazon.com/mobile-apps/b?ie=UTF8&amp;node=2350149011">Appstore for Android</a>, and the list goes on. These app stores make it extremely easy to distribute software and, what's more, make it straightforward for consumers to find relevant apps. Need an app to calculate tips? No problem, search it out in your app store of device, read the reviews, download the most highly reviewed one, and within minutes you're calculating the appropriate tip before you finish your dinner. That's revolutionary!</p>

<p>This app store trend, by the way, is starting to appear on desktops and the web because of their success on mobile devices. It should come as no surprise that my most recent desktop software purchases were from the <a href="http://www.apple.com/osx/apps/app-store.html">Mac App Store</a>; what's more, you can browse the <a href="https://chrome.google.com/webstore">Chrome web store</a> from your desktop as easily as you can browse the iOS App Store on your iPad.</p>

<p>Thus, software delivery on the mobile platform is, at least for the foreseeable future, firmly established via app stores. And app stores cater to native apps (100% native and/or hybrid) only. The average person will not look for useful apps via their device's browser: that route is still a jungle. And, at this point, there is no viable pure play mobile web app delivery channel.</p>

<p>If you are betting against native apps, you had better consider how consumers find and consume apps. Just because the web made it easier for consumers to use apps (and thus crushed desktop applications in the process) before the mobile revolution, it doesn't necessarily mean native apps on mobile devices will be crushed by web apps <em>again</em>. The software delivery channel is firmly established on mobile devices and until those app stores support icon-ifying URLs, native is the only means for mass consumer discovery.</p>

<p><em>Thanks to <a href="http://www.vectorportal.com/stockvectors">Software Box Vector Blue</a> for the image of a software box.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cost and the Great Mobile App Debate]]></title>
    <link href="http://aglover.github.com/blog/2012/09/01/cost-and-the-great-mobile-app-debate/"/>
    <updated>2012-09-01T11:07:00-04:00</updated>
    <id>http://aglover.github.com/blog/2012/09/01/cost-and-the-great-mobile-app-debate</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/HTML5-logo.svg/200px-HTML5-logo.svg.png"> The Great Mobile App Debate rages on; in fact, it seems of late, the debate has been heating up <em>dramatically</em>. And interestingly enough, some intriguing people are joining this lively discussion including <a href="http://martinfowler.com/">Martin Fowler</a>. In his presentation dubbed '<a href="http://martinfowler.com/articles/multiMobile/">Developing Software for Multiple Devices</a>', Martin makes the case for <a href="http://en.wikipedia.org/wiki/HTML5">HTML5</a> citing the reduced cost of building a single platform app as opposed to building an app for each platform. What's more, he notes that the option to build an app via some cross-platform framework (presumably he's talking about <a href="http://thinkmobile.appcelerator.com/blog/bid/211263/The-Great-Mobile-App-Debate-Native-vs-HTML5">Appcelerator</a> or the <a href="http://xamarin.com/">Xamarin</a>'s of the world) isn't viable. He invokes memories from the early days of desktop apps:</p>

<p><blockquote><p>By applying the lessons of history we can infer that cross-platform toolkits will not be a viable solution to the multitude of mobile platforms.</p><footer><strong>Martin Fowler</strong> <cite><a href='http://martinfowler.com/articles/multiMobile/#desktop-history'>Developing Software for Multiple Devices</a></cite></footer></blockquote></p>

<p>And he thus <a href="http://martinfowler.com/articles/multiMobile/#uncanny">ties this direction</a> into a potential result of building apps that suffer from "<a href="http://en.wikipedia.org/wiki/Uncanny_valley">The Uncanny Valley</a>" (i.e. "slight imperfections of an almost-native user interface cause a disproportionate negative response for the user").</p>

<p>This analogy, however, isn't necessarily correct. If you invoke memories of, say, Java and think back to AWT or Swing and the resulting, almost always, underwhelming UI/UX, then you've got a point. But the UIs of say, Xamarin are 100% native (which is the polar opposite of Swing!)-- there is no <a href="http://martinfowler.com/articles/multiMobile/#frankenstein">Frankenstein-ness</a> here. There is no mimicking going on -- a single code base is compiled <em>natively</em> into the underlying platform's UI. All you have to do is take a look at a sample application built using <a href="http://www.coronalabs.com/products/corona-sdk/">Corona</a> and you'll realize that at this point, the Uncanny Valley argument for cross-platform frameworks is <a href="http://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt">FUD</a>.</p>

<p>Which leads full circle back to the underlying argument for HTML5: cost. A cross-platform framework that produces a stellar app with exceptional UX <em>is cost effective</em>! You potentially build one app for multiple devices and it meets the terrifically high standards that consumers demand of a mobile app. And this is one thing that is often not met with pure play mobile web apps: they are not yet at parity with native-ness. More often than not, I find myself looking at <a href="http://wtfmobileweb.com/">Frankenstein mobile web apps</a>.</p>

<p>This isn't to say HTML5 isn't worth consideration. There are certainly apps that have been built as pure play web apps and they are terrific. The point of the discussion shouldn't focus on HTML5 versus Native versus Hybrid. It should instead focus on what you're trying to build. If you want to build a fantastic interactive app that wows users (think something like <a href="http://flipboard.com/">Flipboard</a>) then you have a different line of thinking to pursue. If your goal is to build an information app that conveys data then UI/UX could be secondary and thus, an HTML5 option might just meet your needs.</p>

<p>The Great Mobile App Debate shows no sign of abating anytime soon. HTML5 offers a plethora of promises for awesomeness. Someday this might be the case; however, HTML5 isn't an app development silver bullet.</p>
]]></content>
  </entry>
  
</feed>
