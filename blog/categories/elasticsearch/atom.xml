<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elasticsearch | The Disco Blog]]></title>
  <link href="http://thediscoblog.com/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://thediscoblog.com/"/>
  <updated>2013-09-09T18:40:26-04:00</updated>
  <id>http://thediscoblog.com/</id>
  <author>
    <name><![CDATA[Andrew Glover]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Effortless ElasticSearch clustering]]></title>
    <link href="http://thediscoblog.com/blog/2013/09/03/effortless-elasticsearch-clustering/"/>
    <updated>2013-09-03T07:50:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/09/03/effortless-elasticsearch-clustering</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/cluster.jpg"><a href="http://thediscoblog.com/blog/categories/elasticsearch/">ElasticSearch</a> supports <a href="http://www.elasticsearch.org/guide/reference/modules/cluster/">clustering</a>; that is, you can have a series of distinct <a href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/">ElasticSearch</a> instances work in a coordinated manner without much administrative intervention at all. Clustering ElasticSearch instances (or nodes) provides data redundancy as well as data availability.</p>

<p>Best of all, clustering in ElasticSearch, by default, doesn't require <em>any</em> configuration -- nodes discover each other. You can set up a cluster in about 60 seconds. Let me show you how!</p>

<!-- more -->


<p></p>

<p>First, download and unzip or untar the <a href="http://thediscoblog.com/blog/2013/01/02/scalable-searching-with-elasticsearch/">latest version of ElasticSearch</a>. Next, copy the resultant ElasticSearch install directory (for example, mine is dubbed <code>elasticsearch-0.90.3</code>) into 3 different directories; for example, I've called my directories <code>node-1</code>, <code>node-2</code>, and <code>node-3</code>.</p>

<p>Next, open up three terminal windows and in each, change directories to a sequential node. Start the instance in the <code>node-1</code> directory like so:</p>

<p><code>bash Starting up ElasticSearch
./bin/elasticsearch -f
</code></p>

<p>The <code>-f</code> forces the process to run in the foreground.</p>

<p>By default, ElasticSearch nodes will name themselves if you don't provide a name (via the <code>elasticsearch.yml</code> configuration file). Thus, after you start the first instance, you should see something along the lines of:</p>

<p><code>bash A master node is created!
[cluster.service] [Dionysus] new_master [Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]], reason: zen-disco-join (elected_as_master)
</code></p>

<p>In the above log output, "Dionysus" is the automatic name chosen by ElasticSearch. Note the part about "new_master" for the <code>cluster.service</code>.</p>

<p>Next, go into the next terminal window, say <code>node-2</code>, and start that instance the same way (via the <code>-f</code> flag). You should see the 2nd instance (in my case, named <code>Caiera</code>) discover the master:</p>

<p><code>bash Node #2 discovers the master node
[cluster.service] [Caiera] detected_master [Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]], added {[Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]],}, reason: zen-disco-receive(from master [[Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]]])
</code></p>

<p>See the <code>detected_master</code> statement above?  And you should see the master, "Dionysus", add the 2nd instance, "Caiera", too (via the first terminal window):</p>

<p><code>bash The master node adds node #2
[cluster.service] [Dionysus] added {[Caiera][Eh3DHlcRQhGxatGnUG8smA][inet[/192.168.1.12:9301]],}, reason: zen-disco-receive(join from node[[Caiera][Eh3DHlcRQhGxatGnUG8smA][inet[/192.168.1.12:9301]]])
</code></p>

<p>Lastly, start the 3rd instance in the 3rd window.</p>

<p>In this case, my 3rd node is dubbed "Phantom Rider" and it'll discover the master:</p>

<p><code>bash Node #3 discovers the master
[cluster.service] [Phantom Rider] detected_master [Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]], added {[Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]],[Caiera][Eh3DHlcRQhGxatGnUG8smA][inet[/192.168.1.12:9301]],}, reason: zen-disco-receive(from master [[Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]]])
</code></p>

<p>And the master, will in turn, add "Phantom Rider" into the cluster:</p>

<p><code>bash The master node adds node #3
[cluster.service] [Dionysus] added {[Phantom Rider][Sw1bDSbFQqeTq4M45qbNpg][inet[/192.168.1.12:9302]],}, reason: zen-disco-receive(join from node[[Phantom Rider][Sw1bDSbFQqeTq4M45qbNpg][inet[/192.168.1.12:9302]]])
</code></p>

<p>Now that you have 3 ElasticSearch instances running, you can run a few RESTful commands to verify your cluster is operational.</p>

<p>First, in a new terminal window, run this command:</p>

<p><code>bash cURL to ascertain cluster nodes
curl -XGET 'http://localhost:9200/_cluster/nodes?pretty=true'
</code></p>

<p>You should see a nicely formatting JSON response. It'll look something like:</p>

<p>``` json ElasticSearch nodes
{
  "cluster_name" : "elasticsearch",
  "nodes" : { "Eh3DHlcRQhGxatGnUG8smA" : { "hostname" : "new-host-5.home",</p>

<pre><code>      "http_address" : "inet[/192.168.1.12:9201]",
      "name" : "Caiera",
      "transport_address" : "inet[/192.168.1.12:9301]",
      "version" : "0.90.3"
    },
  "Sw1bDSbFQqeTq4M45qbNpg" : { "hostname" : "new-host-5.home",
      "http_address" : "inet[/192.168.1.12:9202]",
      "name" : "Phantom Rider",
      "transport_address" : "inet[/192.168.1.12:9302]",
      "version" : "0.90.3"
    },
  "r7gbosdKSWGfTCgRPrS6vw" : { "hostname" : "new-host-5.home",
      "http_address" : "inet[/192.168.1.12:9200]",
      "name" : "Dionysus",
      "transport_address" : "inet[/192.168.1.12:9300]",
      "version" : "0.90.3"
    }
},
</code></pre>

<p>  "ok" : true
}
```</p>

<p>Note the <code>cluster_name</code> is by default elasticsearch -- you can change this name as well. Also, by default, the master node will claim the 9200 port, however, you can run that same command against any node (for example, <code>http://localhost:9201/_cluster/nodes?pretty=true</code> will respond with the same exact response).</p>

<p>You can check the health of a cluster, as well, by running this command:</p>

<p><code>bash cURL to ascertain cluster health
curl -XGET 'http://localhost:9200/_cluster/health?pretty=true'
</code></p>

<p>And you should see another JSON response like:</p>

<p><code>json ElasticSearch cluster health
{
  "active_primary_shards" : 0,
  "active_shards" : 0,
  "cluster_name" : "elasticsearch",
  "initializing_shards" : 0,
  "number_of_data_nodes" : 3,
  "number_of_nodes" : 3,
  "relocating_shards" : 0,
  "status" : "green",
  "timed_out" : false,
  "unassigned_shards" : 0
}
</code></p>

<p>Nodes a cluster will elect a new master if your master node goes down. For example, if you go into the master node terminal window and control-c the process, you should see the two other nodes quickly recognize the master's failure and consequently elect one of themselves as the new master:</p>

<p><code>bash A new master is elected
[discovery.zen] [Caiera] master_left [[Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]]], reason [shut_down]
[cluster.service] [Caiera] master {new [Caiera][Eh3DHlcRQhGxatGnUG8smA][inet[/192.168.1.12:9301]], previous [Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]]}, removed {[Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]],}, reason: zen-disco-master_failed ([Dionysus][r7gbosdKSWGfTCgRPrS6vw][inet[/192.168.1.12:9300]])
</code></p>

<p>Remember, ElasticSearch will make intelligent defaults for you, however, you should most likely look closely at the various aspects you can configure when it comes to clustering. For example, cluster name and node names are something you should consider implementing.</p>

<p>What's more, the process of discovery can be configured. For instance, multicast is used for auto-discovery, however, there are other options available, such as unicast, which allows you to specify which nodes can be a part of a cluster (that is, unknown nodes cannot join).</p>

<p>Finally, you can control how nodes operate in a cluster. You can explicitly forbid a node from being a master, for example, and you can also configure nodes to not hold data (thus, those nodes become veritable routers for searches). These options allow you to create an interesting topology that has some intelligent routing built in.</p>

<p>Regardless of how you configure an ElasticSearch cluster, I hope you've seen that it couldn't be any easier. Can you dig it, man?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ElasticSearch on EC2 in less than 60 seconds]]></title>
    <link href="http://thediscoblog.com/blog/2013/05/17/elasticsearch-on-ec2-in-less-than-60-seconds/"/>
    <updated>2013-05-17T17:24:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/05/17/elasticsearch-on-ec2-in-less-than-60-seconds</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/mine/es-bonzai.jpg">Curious to see what all the <a href="http://www.elasticsearch.org/">ElasticSearch</a> hubbub is about? Wanna see it in action without a lot of elbow grease? Then look no further, friend -- in less than 60 seconds, I'll show you how to install <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-24/">ElasticSearch</a> on an <a href="http://aws.amazon.com/">AWS AMI</a>.</p>

<p>You'll first <a href="http://www.drdobbs.com/web-development/getting-started-with-the-cloud-amazon-we/231601598">need an AWS account</a> along with an SSH key pair. If you don't already have those two steps done, go ahead and do that. The steps that follow suggest a particular AMI; however, you are free to select the <a href="http://aws.amazon.com/ec2/instance-types/">instance type</a>. <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Micro instance types</a> are free to use; consequently, you can get <a href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/">up and running with ElasticSearch</a> in less than a minute <em>for free</em>.</p>

<!-- more -->


<p>Now that you've got an <a href="http://www.ibm.com/developerworks/web/library/j-s3/">AWS</a> account and an SSH key pair, go ahead and create a new security group (or edit an existing one). It's important that the <a href="http://www.elasticsearch.org/tutorials/elasticsearch-on-ec2/">following ports</a> are open:</p>

<ul>
<li>22 (required for SSH)</li>
<li>80 (ElasticSearch uses HTTP for standard API calls)</li>
<li>9200 (required for ElasticSearch)</li>
<li>9300 (required for ElasticSearch)</li>
</ul>


<p>Next, fire up a Linux AMI. I, for example, prefer <a href="http://cloud-images.ubuntu.com/locator/ec2/">ami-c30360aa</a> (this is Ubuntu Server version 13.04) and I configure the AMI to use the security group that I just covered.</p>

<p>Now, SSH to your newly instantiated AMI.  Once on the AMI, you'll need to install Java. Never fear though, I've got you covered. All you need to do is run a handy script via the <a href="https://github.com/aglover/ubuntu-equip">Ubuntu-Equip project</a>, that I use frequently just for this sorta thing:</p>

<p><code>bash installing Java
wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_java.sh &amp;&amp; bash equip_java.sh
</code></p>

<p>You'll need to accept the license from Oracle. Once that script completes, go ahead and type  <code>java -version</code> and you should see Oracle's JDK (i.e Java version "1.7.0_21").</p>

<p>Next, download and install ElasticSearch via another nifty <a href="https://github.com/aglover/ubuntu-equip">Ubuntu-Equip</a> script:</p>

<p><code>bash installing elasticsearch
wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_elasticsearch.sh &amp;&amp; bash equip_elasticsearch.sh
</code></p>

<p>This script doesn't start ElasticSearch for you; thus, go ahead and change directories into the <code>elasticsearch</code> directory and fire it up like so:</p>

<p><code>bash starting elasticsearch
~/elasticsearch$ bin/elasticsearch -f
</code></p>

<p>Take a deep breath (but not too deep, as I need you to finish in less than 60 seconds) and find the Public DNS of the AMI you've been working on. Go ahead and copy it, then fire up a browser on your local machine and go to http://YOUR_AMI_DNS_NAME.com:9200/_plugin/inquisitor/ (be sure to note the port).</p>

<p>By the way, <a href="https://github.com/polyfractal/elasticsearch-inquisitor">Inquisitor</a> is a handy web application that lets you query your indexes. It was installed via the Ubuntu-Equip script -- this tool is invaluable in figuring out how to properly query your indexes.</p>

<p>And that is it. In less than 60 seconds you've got ElasticSearch running in the cloud for you. Want to create a cluster? No problem, just follow these steps again to fire up another ElasticSearch instance and then <a href="http://www.elasticsearch.org/videos/three-nodes-and-one-cluster/">configure the cluster accordingly</a>.</p>

<p>I've not gone over <a href="http://www.elasticsearch.org/guide/reference/setup/configuration/">configuring ElasticSearch</a> nor have I showed you how to create ElasticSearch as a service on a Linux instance, but for one minute, what do you expect?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The democratization of search]]></title>
    <link href="http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search/"/>
    <updated>2013-05-14T11:33:00-04:00</updated>
    <id>http://thediscoblog.com/blog/2013/05/14/the-democratization-of-search</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/democracy.jpg">Over the past year and a half, I've watched <a href="http://www.elasticsearch.org/">ElasticSearch</a> grow from a seemingly part-time code experiment into a thriving ecosystem. Not only has the number of <a href="http://www.elasticsearch.org/guide/clients/">client libraries</a> grown from 1 to over 25 (and counting!); it's now a <a href="http://www.elasticsearch.com/">commercially sponsored project</a> to the tune of <a href="http://www.whiteboardmag.com/youre-hot-or-not-why-elasticsearch-raised-24-million-just-3-months-after-a-10-million-round/">$34 million</a> (a <a href="http://www.zdnet.com/elasticsearch-raises-24-million-big-data-analytics-7000011496/">$10M series A</a> and a <a href="http://gigaom.com/2013/02/19/open-source-search-tool-elasticsearch-gets-24m/">$24M series B</a>) with 200,000 downloads a month.</p>

<p>Search is the touchstone of the Internet; without search the Internet wouldn't be all that useful. Google's meteoric rise and its resultant eponymous name for search is clear evidence as to the importance of search. Search, however, hasn't always been that easy nor affordable to implement.</p>

<!--more-->


<p>Before the likes of open source projects like <a href="http://lucene.apache.org/">Lucene</a>, implementing search in an application involved an expensive commercial product or a series of SQL <code>like</code> statements that were never really good enough. Lucene, however, isn't a simple hobbyist's pursuit. Lucene requires a lot of expertise; what's more, successful projects within the Lucene ecosystem, like <a href="http://lucene.apache.org/solr/">Solr</a> lack a key feature that is defining modern architectures: <a href="http://www.searchblox.com/solr-vs-elasticsearch">distributed</a>.</p>

<p>The continued low cost of storage combined with cheap rent-able infrastructures like <a href="http://www.drdobbs.com/web-development/getting-started-with-the-cloud-amazon-we/231601598">AWS</a> has made it convenient to store a plethora of data, thus bringing to bear the importance that applications must support searching vast amounts of data, do it quickly, and affordably. This is where <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-24/">ElasticSearch shines</a>.</p>

<p><a href="http://www.elasticsearch.org/overview/">ElasticSearch sits on top of Lucene</a> and adds not only a simple API for adding and searching content, but does it in a distributed manner. With infinitesimal arm grease, you can set up a search cluster that smears your data and resultant queries across a series of nodes. Not only is this resultant architecture fast, but it's easy to set up and extremely affordable as search nodes can run on commodity hardware. In essence, ElasticSearch brings search to the masses.</p>

<p>Google and its resultant ease of search has changed the mindset of application users. Searching content is a <em>presumed feature</em> and if you don't provide it, you're already a few steps behind your competition. ElasticSearch is clearly a path to constructing a viable, easy to install, affordable, distributed search infrastructure for any application. If you don't believe me, take a look at some of the innovative companies with substantial amounts of users using it: <a href="https://github.com/">Github</a>, <a href="https://foursquare.com/">foursquare</a>, and <a href="http://stackoverflow.com/">Stack Overflow</a> are just a few.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalable searching with ElasticSearch]]></title>
    <link href="http://thediscoblog.com/blog/2013/01/02/scalable-searching-with-elasticsearch/"/>
    <updated>2013-01-02T16:02:00-05:00</updated>
    <id>http://thediscoblog.com/blog/2013/01/02/scalable-searching-with-elasticsearch</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/mine/search_flickr.jpg">Search is no longer an optional feature: it's expected of most any application that consumes, produces, or stores data. And not everyone wants to be a search technology specialist, especially given the range of sophisticated algorithms underlying today's complex searches (i.e. SQL queries are no longer sufficient!). Knowing about existing, open source search platforms could save you a lot of time and money and allow you to spend your time fine-tuning your software's main functionality.</p>

<p>In "<a href="http://www.ibm.com/developerworks/java/library/j-javadev2-24/index.html">Java development 2.0: Scalable searching with ElasticSearch</a>", I introduce <a href="http://www.elasticsearch.org/">ElasticSearch</a>, a distributed search platform that is easy to get started with and vastly extendable. ElasticSearch's sophistication and ease-of-use are impressive, and its support for horizontal scalability offers a world of options should your data requirements need to scale. So what are you waiting for? Give <a href="http://www.ibm.com/developerworks/java/library/j-javadev2-24/index.html">it a read</a>!</p>

<p>Thanks to <a href="http://www.flickr.com/photos/danardvincente/2512148775/">Danard Vincente</a> for the search-engine-magnifying-glass image!</p>
]]></content>
  </entry>
  
</feed>
